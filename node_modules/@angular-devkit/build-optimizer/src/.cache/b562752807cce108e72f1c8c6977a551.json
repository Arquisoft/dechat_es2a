{"remainingRequest":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\@angular-mdc\\web\\esm5\\slider.es5.js","dependencies":[{"path":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\@angular-mdc\\web\\esm5\\slider.es5.js","mtime":1556004096908},{"path":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556004112812},{"path":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1556004088045}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright (c) 2018 Dominic Carretto\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE\n */\n/** PURE_IMPORTS_START _angular_core,_angular_forms,_angular_mdc_web_common,_angular_common PURE_IMPORTS_END */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, HostBinding, Input, Output, Renderer2, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { toNumber, isBrowser, EventRegistry } from '@angular-mdc/web/common';\nimport { CommonModule } from '@angular/common';\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor)\n            descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps)\n        _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps)\n        _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass)\n        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @template A\n */\nvar MDCFoundation = \n/*#__PURE__*/\n/*@__PURE__*/ function () {\n    _createClass(MDCFoundation, null, [{\n            key: \"cssClasses\",\n            /** @return enum{cssClasses} */\n            get: function get() {\n                // Classes extending MDCFoundation should implement this method to return an object which exports every\n                // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}\n                return {};\n            }\n            /** @return enum{strings} */\n        }, {\n            key: \"strings\",\n            get: function get() {\n                // Classes extending MDCFoundation should implement this method to return an object which exports all\n                // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}\n                return {};\n            }\n            /** @return enum{numbers} */\n        }, {\n            key: \"numbers\",\n            get: function get() {\n                // Classes extending MDCFoundation should implement this method to return an object which exports all\n                // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}\n                return {};\n            }\n            /** @return {!Object} */\n        }, {\n            key: \"defaultAdapter\",\n            get: function get() {\n                // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient\n                // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter\n                // validation.\n                return {};\n            }\n            /**\n             * @param {A=} adapter\n             */\n        }]);\n    function MDCFoundation() {\n        var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _classCallCheck(this, MDCFoundation);\n        /** @protected {!A} */\n        this.adapter_ = adapter;\n    }\n    _createClass(MDCFoundation, [{\n            key: \"init\",\n            value: function init() {\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n            }\n        }]);\n    return MDCFoundation;\n}();\n/**\n * @template F\n */\nvar MDCComponent = \n/*#__PURE__*/\n/*@__PURE__*/ function () {\n    _createClass(MDCComponent, null, [{\n            key: \"attachTo\",\n            /**\n             * @param {!Element} root\n             * @return {!MDCComponent}\n             */\n            value: function attachTo(root) {\n                // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and\n                // returns an instantiated component with its root set to that element. Also note that in the cases of\n                // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized\n                // from getDefaultFoundation().\n                return new MDCComponent(root, new MDCFoundation());\n            }\n            /**\n             * @param {!Element} root\n             * @param {F=} foundation\n             * @param {...?} args\n             */\n        }]);\n    function MDCComponent(root) {\n        var foundation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n        _classCallCheck(this, MDCComponent);\n        /** @protected {!Element} */\n        this.root_ = root;\n        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n            args[_key - 2] = arguments[_key];\n        }\n        this.initialize.apply(this, args); // Note that we initialize foundation here and not within the constructor's default param so that\n        // this.root_ is defined and can be used within the foundation class.\n        /** @protected {!F} */\n        this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;\n        this.foundation_.init();\n        this.initialSyncWithDOM();\n    }\n    _createClass(MDCComponent, [{\n            key: \"initialize\",\n            value: function initialize() { } // Subclasses can override this to do any additional setup work that would be considered part of a\n            // \"constructor\". Essentially, it is a hook into the parent constructor before the foundation is\n            // initialized. Any additional arguments besides root and foundation will be passed in here.\n            /**\n             * @return {!F} foundation\n             */\n        }, {\n            key: \"getDefaultFoundation\",\n            value: function getDefaultFoundation() {\n                // Subclasses must override this method to return a properly configured foundation class for the\n                // component.\n                throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' + 'foundation class');\n            }\n        }, {\n            key: \"initialSyncWithDOM\",\n            value: function initialSyncWithDOM() {\n                // object. An example of this would be a form control wrapper that needs to synchronize its internal state\n                // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM\n                // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n                // Subclasses may implement this method to release any resources / deregister any listeners they have\n                // attached. An example of this might be deregistering a resize event from the window object.\n                this.foundation_.destroy();\n            }\n            /**\n             * Wrapper method to add an event listener to the component's root element. This is most useful when\n             * listening for custom events.\n             * @param {string} evtType\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"listen\",\n            value: function listen(evtType, handler) {\n                this.root_.addEventListener(evtType, handler);\n            }\n            /**\n             * Wrapper method to remove an event listener to the component's root element. This is most useful when\n             * unlistening for custom events.\n             * @param {string} evtType\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"unlisten\",\n            value: function unlisten(evtType, handler) {\n                this.root_.removeEventListener(evtType, handler);\n            }\n            /**\n             * Fires a cross-browser-compatible custom event from the component root of the given type,\n             * with the given data.\n             * @param {string} evtType\n             * @param {!Object} evtData\n             * @param {boolean=} shouldBubble\n             */\n        }, {\n            key: \"emit\",\n            value: function emit(evtType, evtData) {\n                var shouldBubble = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                var evt;\n                if (typeof CustomEvent === 'function') {\n                    evt = new CustomEvent(evtType, {\n                        detail: evtData,\n                        bubbles: shouldBubble\n                    });\n                }\n                else {\n                    evt = document.createEvent('CustomEvent');\n                    evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n                }\n                this.root_.dispatchEvent(evt);\n            }\n        }]);\n    return MDCComponent;\n}();\n/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** @enum {string} */\nvar cssClasses = {\n    ACTIVE: 'mdc-slider--active',\n    DISABLED: 'mdc-slider--disabled',\n    DISCRETE: 'mdc-slider--discrete',\n    FOCUS: 'mdc-slider--focus',\n    IN_TRANSIT: 'mdc-slider--in-transit',\n    IS_DISCRETE: 'mdc-slider--discrete',\n    HAS_TRACK_MARKER: 'mdc-slider--display-markers'\n};\n/** @enum {string} */\nvar strings = {\n    TRACK_SELECTOR: '.mdc-slider__track',\n    TRACK_MARKER_CONTAINER_SELECTOR: '.mdc-slider__track-marker-container',\n    LAST_TRACK_MARKER_SELECTOR: '.mdc-slider__track-marker:last-child',\n    THUMB_CONTAINER_SELECTOR: '.mdc-slider__thumb-container',\n    PIN_VALUE_MARKER_SELECTOR: '.mdc-slider__pin-value-marker',\n    ARIA_VALUEMIN: 'aria-valuemin',\n    ARIA_VALUEMAX: 'aria-valuemax',\n    ARIA_VALUENOW: 'aria-valuenow',\n    ARIA_DISABLED: 'aria-disabled',\n    STEP_DATA_ATTR: 'data-step',\n    CHANGE_EVENT: 'MDCSlider:change',\n    INPUT_EVENT: 'MDCSlider:input'\n};\n/** @enum {number} */\nvar numbers = {\n    PAGE_FACTOR: 4\n};\n/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable no-unused-vars */\n/**\n * Adapter for MDC Slider.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the Slider into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nvar MDCSliderAdapter = \n/*#__PURE__*/\n/*@__PURE__*/ function () {\n    function MDCSliderAdapter() {\n        _classCallCheck(this, MDCSliderAdapter);\n    }\n    _createClass(MDCSliderAdapter, [{\n            key: \"hasClass\",\n            /**\n             * Returns true if className exists for the slider Element\n             * @param {string} className\n             * @return {boolean}\n             */\n            value: function hasClass(className) { }\n            /**\n             * Adds a class to the slider Element\n             * @param {string} className\n             */\n        }, {\n            key: \"addClass\",\n            value: function addClass(className) { }\n            /**\n             * Removes a class from the slider Element\n             * @param {string} className\n             */\n        }, {\n            key: \"removeClass\",\n            value: function removeClass(className) { }\n            /**\n             * Returns a string if attribute name exists on the slider Element,\n             * otherwise returns null\n             * @param {string} name\n             * @return {?string}\n             */\n        }, {\n            key: \"getAttribute\",\n            value: function getAttribute(name) { }\n            /**\n             * Sets attribute name on slider Element to value\n             * @param {string} name\n             * @param {string} value\n             */\n        }, {\n            key: \"setAttribute\",\n            value: function setAttribute(name, value) { }\n            /**\n             * Removes attribute name from slider Element\n             * @param {string} name\n             */\n        }, {\n            key: \"removeAttribute\",\n            value: function removeAttribute(name) { }\n            /**\n             * Returns the bounding client rect for the slider Element\n             * @return {?ClientRect}\n             */\n        }, {\n            key: \"computeBoundingRect\",\n            value: function computeBoundingRect() { }\n            /**\n             * Returns the tab index of the slider Element\n             * @return {number}\n             */\n        }, {\n            key: \"getTabIndex\",\n            value: function getTabIndex() { }\n            /**\n             * Registers an event handler on the root element for a given event.\n             * @param {string} type\n             * @param {function(!Event): undefined} handler\n             */\n        }, {\n            key: \"registerInteractionHandler\",\n            value: function registerInteractionHandler(type, handler) { }\n            /**\n             * Deregisters an event handler on the root element for a given event.\n             * @param {string} type\n             * @param {function(!Event): undefined} handler\n             */\n        }, {\n            key: \"deregisterInteractionHandler\",\n            value: function deregisterInteractionHandler(type, handler) { }\n            /**\n             * Registers an event handler on the thumb container element for a given event.\n             * @param {string} type\n             * @param {function(!Event): undefined} handler\n             */\n        }, {\n            key: \"registerThumbContainerInteractionHandler\",\n            value: function registerThumbContainerInteractionHandler(type, handler) { }\n            /**\n             * Deregisters an event handler on the thumb container element for a given event.\n             * @param {string} type\n             * @param {function(!Event): undefined} handler\n             */\n        }, {\n            key: \"deregisterThumbContainerInteractionHandler\",\n            value: function deregisterThumbContainerInteractionHandler(type, handler) { }\n            /**\n             * Registers an event handler on the body for a given event.\n             * @param {string} type\n             * @param {function(!Event): undefined} handler\n             */\n        }, {\n            key: \"registerBodyInteractionHandler\",\n            value: function registerBodyInteractionHandler(type, handler) { }\n            /**\n             * Deregisters an event handler on the body for a given event.\n             * @param {string} type\n             * @param {function(!Event): undefined} handler\n             */\n        }, {\n            key: \"deregisterBodyInteractionHandler\",\n            value: function deregisterBodyInteractionHandler(type, handler) { }\n            /**\n             * Registers an event handler for the window resize event\n             * @param {function(!Event): undefined} handler\n             */\n        }, {\n            key: \"registerResizeHandler\",\n            value: function registerResizeHandler(handler) { }\n            /**\n             * Deregisters an event handler for the window resize event\n             * @param {function(!Event): undefined} handler\n             */\n        }, {\n            key: \"deregisterResizeHandler\",\n            value: function deregisterResizeHandler(handler) { }\n            /**\n             * Emits a custom event MDCSlider:input from the root\n             */\n        }, {\n            key: \"notifyInput\",\n            value: function notifyInput() { }\n            /**\n             * Emits a custom event MDCSlider:change from the root\n             */\n        }, {\n            key: \"notifyChange\",\n            value: function notifyChange() { }\n            /**\n             * Sets a style property of the thumb container element to the passed value\n             * @param {string} propertyName\n             * @param {string} value\n             */\n        }, {\n            key: \"setThumbContainerStyleProperty\",\n            value: function setThumbContainerStyleProperty(propertyName, value) { }\n            /**\n             * Sets a style property of the track element to the passed value\n             * @param {string} propertyName\n             * @param {string} value\n             */\n        }, {\n            key: \"setTrackStyleProperty\",\n            value: function setTrackStyleProperty(propertyName, value) { }\n            /**\n             * Sets the inner text of the pin marker to the passed value\n             * @param {number} value\n             */\n        }, {\n            key: \"setMarkerValue\",\n            value: function setMarkerValue(value) { }\n            /**\n             * Appends the passed number of track markers to the track mark container element\n             * @param {number} numMarkers\n             */\n        }, {\n            key: \"appendTrackMarkers\",\n            value: function appendTrackMarkers(numMarkers) { }\n            /**\n             * Removes all track markers fromt he track mark container element\n             */\n        }, {\n            key: \"removeTrackMarkers\",\n            value: function removeTrackMarkers() { }\n            /**\n             * Sets a style property of the last track marker to the passed value\n             * @param {string} propertyName\n             * @param {string} value\n             */\n        }, {\n            key: \"setLastTrackMarkersStyleProperty\",\n            value: function setLastTrackMarkersStyleProperty(propertyName, value) { }\n            /**\n             * Returns true if the root element is RTL, otherwise false\n             * @return {boolean}\n             */\n        }, {\n            key: \"isRTL\",\n            value: function isRTL() { }\n        }]);\n    return MDCSliderAdapter;\n}();\n/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** @const {Object<string, !VendorPropertyMapType>} */\nvar eventTypeMap = {\n    'animationstart': {\n        noPrefix: 'animationstart',\n        webkitPrefix: 'webkitAnimationStart',\n        styleProperty: 'animation'\n    },\n    'animationend': {\n        noPrefix: 'animationend',\n        webkitPrefix: 'webkitAnimationEnd',\n        styleProperty: 'animation'\n    },\n    'animationiteration': {\n        noPrefix: 'animationiteration',\n        webkitPrefix: 'webkitAnimationIteration',\n        styleProperty: 'animation'\n    },\n    'transitionend': {\n        noPrefix: 'transitionend',\n        webkitPrefix: 'webkitTransitionEnd',\n        styleProperty: 'transition'\n    }\n};\n/** @const {Object<string, !VendorPropertyMapType>} */\nvar cssPropertyMap = {\n    'animation': {\n        noPrefix: 'animation',\n        webkitPrefix: '-webkit-animation'\n    },\n    'transform': {\n        noPrefix: 'transform',\n        webkitPrefix: '-webkit-transform'\n    },\n    'transition': {\n        noPrefix: 'transition',\n        webkitPrefix: '-webkit-transition'\n    }\n};\n/**\n * @param {!Object} windowObj\n * @return {boolean}\n */\nfunction hasProperShape(windowObj) {\n    return windowObj['document'] !== undefined && typeof windowObj['document']['createElement'] === 'function';\n}\n/**\n * @param {string} eventType\n * @return {boolean}\n */\nfunction eventFoundInMaps(eventType) {\n    return eventType in eventTypeMap || eventType in cssPropertyMap;\n}\n/**\n * @param {string} eventType\n * @param {!Object<string, !VendorPropertyMapType>} map\n * @param {!Element} el\n * @return {string}\n */\nfunction getJavaScriptEventName(eventType, map, el) {\n    return map[eventType].styleProperty in el.style ? map[eventType].noPrefix : map[eventType].webkitPrefix;\n}\n/**\n * Helper function to determine browser prefix for CSS3 animation events\n * and property names.\n * @param {!Object} windowObj\n * @param {string} eventType\n * @return {string}\n */\nfunction getAnimationName(windowObj, eventType) {\n    if (!hasProperShape(windowObj) || !eventFoundInMaps(eventType)) {\n        return eventType;\n    }\n    var map = \n    /** @type {!Object<string, !VendorPropertyMapType>} */\n    eventType in eventTypeMap ? eventTypeMap : cssPropertyMap;\n    var el = windowObj['document']['createElement']('div');\n    var eventName = '';\n    if (map === eventTypeMap) {\n        eventName = getJavaScriptEventName(eventType, map, el);\n    }\n    else {\n        eventName = map[eventType].noPrefix in el.style ? map[eventType].noPrefix : map[eventType].webkitPrefix;\n    }\n    return eventName;\n} // Public functions to access getAnimationName() for JavaScript events or CSS\n/**\n * @param {!Object} windowObj\n * @param {string} eventType\n * @return {string}\n */\nfunction getCorrectEventName(windowObj, eventType) {\n    return getAnimationName(windowObj, eventType);\n}\n/**\n * @param {!Object} windowObj\n * @param {string} eventType\n * @return {string}\n */\nfunction getCorrectPropertyName(windowObj, eventType) {\n    return getAnimationName(windowObj, eventType);\n}\n/** @enum {string} */\nvar KEY_IDS = {\n    ARROW_LEFT: 'ArrowLeft',\n    ARROW_RIGHT: 'ArrowRight',\n    ARROW_UP: 'ArrowUp',\n    ARROW_DOWN: 'ArrowDown',\n    HOME: 'Home',\n    END: 'End',\n    PAGE_UP: 'PageUp',\n    PAGE_DOWN: 'PageDown'\n};\n/** @enum {string} */\nvar MOVE_EVENT_MAP = {\n    'mousedown': 'mousemove',\n    'touchstart': 'touchmove',\n    'pointerdown': 'pointermove'\n};\nvar DOWN_EVENTS = ['mousedown', 'pointerdown', 'touchstart'];\nvar UP_EVENTS = ['mouseup', 'pointerup', 'touchend'];\n/**\n * @extends {MDCFoundation<!MDCSliderAdapter>}\n */\nvar MDCSliderFoundation = \n/*#__PURE__*/\nfunction (_MDCFoundation) {\n    _inherits(MDCSliderFoundation, _MDCFoundation);\n    _createClass(MDCSliderFoundation, null, [{\n            key: \"cssClasses\",\n            /** @return enum {cssClasses} */\n            get: function get() {\n                return cssClasses;\n            }\n            /** @return enum {strings} */\n        }, {\n            key: \"strings\",\n            get: function get() {\n                return strings;\n            }\n            /** @return enum {numbers} */\n        }, {\n            key: \"numbers\",\n            get: function get() {\n                return numbers;\n            }\n            /** @return {!MDCSliderAdapter} */\n        }, {\n            key: \"defaultAdapter\",\n            get: function get() {\n                return (\n                /** @type {!MDCSliderAdapter} */\n                {\n                    hasClass: function hasClass() {\n                        return (\n                        /* className: string */\n                        /* boolean */\n                        false);\n                    },\n                    addClass: function addClass() { },\n                    removeClass: function removeClass() { },\n                    getAttribute: function getAttribute() {\n                        return (\n                        /* name: string */\n                        /* string|null */\n                        null);\n                    },\n                    setAttribute: function setAttribute() { },\n                    removeAttribute: function removeAttribute() { },\n                    computeBoundingRect: function computeBoundingRect() {\n                        return (\n                        /* ClientRect */\n                        {\n                            top: 0,\n                            right: 0,\n                            bottom: 0,\n                            left: 0,\n                            width: 0,\n                            height: 0\n                        });\n                    },\n                    getTabIndex: function getTabIndex() {\n                        return (\n                        /* number */\n                        0);\n                    },\n                    registerInteractionHandler: function registerInteractionHandler() { },\n                    deregisterInteractionHandler: function deregisterInteractionHandler() { },\n                    registerThumbContainerInteractionHandler: function registerThumbContainerInteractionHandler() { },\n                    deregisterThumbContainerInteractionHandler: function deregisterThumbContainerInteractionHandler() { },\n                    registerBodyInteractionHandler: function registerBodyInteractionHandler() { },\n                    deregisterBodyInteractionHandler: function deregisterBodyInteractionHandler() { },\n                    registerResizeHandler: function registerResizeHandler() { },\n                    deregisterResizeHandler: function deregisterResizeHandler() { },\n                    notifyInput: function notifyInput() { },\n                    notifyChange: function notifyChange() { },\n                    setThumbContainerStyleProperty: function setThumbContainerStyleProperty() { },\n                    setTrackStyleProperty: function setTrackStyleProperty() { },\n                    setMarkerValue: function setMarkerValue() { },\n                    appendTrackMarkers: function appendTrackMarkers() { },\n                    removeTrackMarkers: function removeTrackMarkers() { },\n                    setLastTrackMarkersStyleProperty: function setLastTrackMarkersStyleProperty() { },\n                    isRTL: function isRTL() {\n                        return (\n                        /* boolean */\n                        false);\n                    }\n                });\n            }\n            /**\n             * Creates a new instance of MDCSliderFoundation\n             * @param {?MDCSliderAdapter} adapter\n             */\n        }]);\n    function MDCSliderFoundation(adapter) {\n        var _this;\n        _classCallCheck(this, MDCSliderFoundation);\n        _this = _possibleConstructorReturn(this, (MDCSliderFoundation.__proto__ || Object.getPrototypeOf(MDCSliderFoundation)).call(this, Object.assign(MDCSliderFoundation.defaultAdapter, adapter)));\n        /** @private {?ClientRect} */\n        _this.rect_ = null; // We set this to NaN since we want it to be a number, but we can't use '0' or '-1'\n        // because those could be valid tabindices set by the client code.\n        _this.savedTabIndex_ = NaN;\n        _this.active_ = false;\n        _this.inTransit_ = false;\n        _this.isDiscrete_ = false;\n        _this.hasTrackMarker_ = false;\n        _this.handlingThumbTargetEvt_ = false;\n        _this.min_ = 0;\n        _this.max_ = 100;\n        _this.step_ = 0;\n        _this.value_ = 0;\n        _this.disabled_ = false;\n        _this.preventFocusState_ = false;\n        _this.updateUIFrame_ = 0;\n        _this.thumbContainerPointerHandler_ = function () {\n            _this.handlingThumbTargetEvt_ = true;\n        };\n        _this.interactionStartHandler_ = function (evt) {\n            return _this.handleDown_(evt);\n        };\n        _this.keydownHandler_ = function (evt) {\n            return _this.handleKeydown_(evt);\n        };\n        _this.focusHandler_ = function () {\n            return _this.handleFocus_();\n        };\n        _this.blurHandler_ = function () {\n            return _this.handleBlur_();\n        };\n        _this.resizeHandler_ = function () {\n            return _this.layout();\n        };\n        return _this;\n    }\n    _createClass(MDCSliderFoundation, [{\n            key: \"init\",\n            value: function init() {\n                var _this2 = this;\n                this.isDiscrete_ = this.adapter_.hasClass(cssClasses.IS_DISCRETE);\n                this.hasTrackMarker_ = this.adapter_.hasClass(cssClasses.HAS_TRACK_MARKER);\n                DOWN_EVENTS.forEach(function (evtName) {\n                    return _this2.adapter_.registerInteractionHandler(evtName, _this2.interactionStartHandler_);\n                });\n                this.adapter_.registerInteractionHandler('keydown', this.keydownHandler_);\n                this.adapter_.registerInteractionHandler('focus', this.focusHandler_);\n                this.adapter_.registerInteractionHandler('blur', this.blurHandler_);\n                DOWN_EVENTS.forEach(function (evtName) {\n                    _this2.adapter_.registerThumbContainerInteractionHandler(evtName, _this2.thumbContainerPointerHandler_);\n                });\n                this.adapter_.registerResizeHandler(this.resizeHandler_);\n                this.layout(); // At last step, provide a reasonable default value to discrete slider\n                if (this.isDiscrete_ && this.getStep() == 0) {\n                    this.step_ = 1;\n                }\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n                var _this3 = this;\n                DOWN_EVENTS.forEach(function (evtName) {\n                    _this3.adapter_.deregisterInteractionHandler(evtName, _this3.interactionStartHandler_);\n                });\n                this.adapter_.deregisterInteractionHandler('keydown', this.keydownHandler_);\n                this.adapter_.deregisterInteractionHandler('focus', this.focusHandler_);\n                this.adapter_.deregisterInteractionHandler('blur', this.blurHandler_);\n                DOWN_EVENTS.forEach(function (evtName) {\n                    _this3.adapter_.deregisterThumbContainerInteractionHandler(evtName, _this3.thumbContainerPointerHandler_);\n                });\n                this.adapter_.deregisterResizeHandler(this.resizeHandler_);\n            }\n        }, {\n            key: \"setupTrackMarker\",\n            value: function setupTrackMarker() {\n                if (this.isDiscrete_ && this.hasTrackMarker_ && this.getStep() != 0) {\n                    var min = this.getMin();\n                    var max = this.getMax();\n                    var step = this.getStep();\n                    var numMarkers = (max - min) / step; // In case distance between max & min is indivisible to step,\n                    // we place the secondary to last marker proportionally at where thumb\n                    // could reach and place the last marker at max value\n                    var indivisible = Math.ceil(numMarkers) !== numMarkers;\n                    if (indivisible) {\n                        numMarkers = Math.ceil(numMarkers);\n                    }\n                    this.adapter_.removeTrackMarkers();\n                    this.adapter_.appendTrackMarkers(numMarkers);\n                    if (indivisible) {\n                        var lastStepRatio = (max - numMarkers * step) / step + 1;\n                        var flex = getCorrectPropertyName(window, 'flex');\n                        this.adapter_.setLastTrackMarkersStyleProperty(flex, String(lastStepRatio));\n                    }\n                }\n            }\n        }, {\n            key: \"layout\",\n            value: function layout() {\n                this.rect_ = this.adapter_.computeBoundingRect();\n                this.updateUIForCurrentValue_();\n            }\n            /** @return {number} */\n        }, {\n            key: \"getValue\",\n            value: function getValue() {\n                return this.value_;\n            }\n            /** @param {number} value */\n        }, {\n            key: \"setValue\",\n            value: function setValue(value) {\n                this.setValue_(value, false);\n            }\n            /** @return {number} */\n        }, {\n            key: \"getMax\",\n            value: function getMax() {\n                return this.max_;\n            }\n            /** @param {number} max */\n        }, {\n            key: \"setMax\",\n            value: function setMax(max) {\n                if (max < this.min_) {\n                    throw new Error('Cannot set max to be less than the slider\\'s minimum value');\n                }\n                this.max_ = max;\n                this.setValue_(this.value_, false, true);\n                this.adapter_.setAttribute(strings.ARIA_VALUEMAX, String(this.max_));\n                this.setupTrackMarker();\n            }\n            /** @return {number} */\n        }, {\n            key: \"getMin\",\n            value: function getMin() {\n                return this.min_;\n            }\n            /** @param {number} min */\n        }, {\n            key: \"setMin\",\n            value: function setMin(min) {\n                if (min > this.max_) {\n                    throw new Error('Cannot set min to be greater than the slider\\'s maximum value');\n                }\n                this.min_ = min;\n                this.setValue_(this.value_, false, true);\n                this.adapter_.setAttribute(strings.ARIA_VALUEMIN, String(this.min_));\n                this.setupTrackMarker();\n            }\n            /** @return {number} */\n        }, {\n            key: \"getStep\",\n            value: function getStep() {\n                return this.step_;\n            }\n            /** @param {number} step */\n        }, {\n            key: \"setStep\",\n            value: function setStep(step) {\n                if (step < 0) {\n                    throw new Error('Step cannot be set to a negative number');\n                }\n                if (this.isDiscrete_ && (typeof step !== 'number' || step < 1)) {\n                    step = 1;\n                }\n                this.step_ = step;\n                this.setValue_(this.value_, false, true);\n                this.setupTrackMarker();\n            }\n            /** @return {boolean} */\n        }, {\n            key: \"isDisabled\",\n            value: function isDisabled() {\n                return this.disabled_;\n            }\n            /** @param {boolean} disabled */\n        }, {\n            key: \"setDisabled\",\n            value: function setDisabled(disabled) {\n                this.disabled_ = disabled;\n                this.toggleClass_(cssClasses.DISABLED, this.disabled_);\n                if (this.disabled_) {\n                    this.savedTabIndex_ = this.adapter_.getTabIndex();\n                    this.adapter_.setAttribute(strings.ARIA_DISABLED, 'true');\n                    this.adapter_.removeAttribute('tabindex');\n                }\n                else {\n                    this.adapter_.removeAttribute(strings.ARIA_DISABLED);\n                    if (!isNaN(this.savedTabIndex_)) {\n                        this.adapter_.setAttribute('tabindex', String(this.savedTabIndex_));\n                    }\n                }\n            }\n            /**\n             * Called when the user starts interacting with the slider\n             * @param {!Event} evt\n             * @private\n             */\n        }, {\n            key: \"handleDown_\",\n            value: function handleDown_(evt) {\n                var _this4 = this;\n                if (this.disabled_) {\n                    return;\n                }\n                this.preventFocusState_ = true;\n                this.setInTransit_(!this.handlingThumbTargetEvt_);\n                this.handlingThumbTargetEvt_ = false;\n                this.setActive_(true);\n                var moveHandler = function moveHandler(evt) {\n                    _this4.handleMove_(evt);\n                }; // Note: upHandler is [de]registered on ALL potential pointer-related release event types, since some browsers\n                // do not always fire these consistently in pairs.\n                // (See https://github.com/material-components/material-components-web/issues/1192)\n                var upHandler = function upHandler() {\n                    _this4.handleUp_();\n                    _this4.adapter_.deregisterBodyInteractionHandler(MOVE_EVENT_MAP[evt.type], moveHandler);\n                    UP_EVENTS.forEach(function (evtName) {\n                        return _this4.adapter_.deregisterBodyInteractionHandler(evtName, upHandler);\n                    });\n                };\n                this.adapter_.registerBodyInteractionHandler(MOVE_EVENT_MAP[evt.type], moveHandler);\n                UP_EVENTS.forEach(function (evtName) {\n                    return _this4.adapter_.registerBodyInteractionHandler(evtName, upHandler);\n                });\n                this.setValueFromEvt_(evt);\n            }\n            /**\n             * Called when the user moves the slider\n             * @param {!Event} evt\n             * @private\n             */\n        }, {\n            key: \"handleMove_\",\n            value: function handleMove_(evt) {\n                evt.preventDefault();\n                this.setValueFromEvt_(evt);\n            }\n            /**\n             * Called when the user's interaction with the slider ends\n             * @private\n             */\n        }, {\n            key: \"handleUp_\",\n            value: function handleUp_() {\n                this.setActive_(false);\n                this.adapter_.notifyChange();\n            }\n            /**\n             * Returns the pageX of the event\n             * @param {!Event} evt\n             * @return {number}\n             * @private\n             */\n        }, {\n            key: \"getPageX_\",\n            value: function getPageX_(evt) {\n                if (evt.targetTouches && evt.targetTouches.length > 0) {\n                    return evt.targetTouches[0].pageX;\n                }\n                return evt.pageX;\n            }\n            /**\n             * Sets the slider value from an event\n             * @param {!Event} evt\n             * @private\n             */\n        }, {\n            key: \"setValueFromEvt_\",\n            value: function setValueFromEvt_(evt) {\n                var pageX = this.getPageX_(evt);\n                var value = this.computeValueFromPageX_(pageX);\n                this.setValue_(value, true);\n            }\n            /**\n             * Computes the new value from the pageX position\n             * @param {number} pageX\n             * @return {number}\n             */\n        }, {\n            key: \"computeValueFromPageX_\",\n            value: function computeValueFromPageX_(pageX) {\n                var max = this.max_, min = this.min_;\n                var xPos = pageX - this.rect_.left;\n                var pctComplete = xPos / this.rect_.width;\n                if (this.adapter_.isRTL()) {\n                    pctComplete = 1 - pctComplete;\n                } // Fit the percentage complete between the range [min,max]\n                // by remapping from [0, 1] to [min, min+(max-min)].\n                return min + pctComplete * (max - min);\n            }\n            /**\n             * Handles keydown events\n             * @param {!Event} evt\n             */\n        }, {\n            key: \"handleKeydown_\",\n            value: function handleKeydown_(evt) {\n                var keyId = this.getKeyId_(evt);\n                var value = this.getValueForKeyId_(keyId);\n                if (isNaN(value)) {\n                    return;\n                } // Prevent page from scrolling due to key presses that would normally scroll the page\n                evt.preventDefault();\n                this.adapter_.addClass(cssClasses.FOCUS);\n                this.setValue_(value, true);\n                this.adapter_.notifyChange();\n            }\n            /**\n             * Returns the computed name of the event\n             * @param {!Event} kbdEvt\n             * @return {string}\n             */\n        }, {\n            key: \"getKeyId_\",\n            value: function getKeyId_(kbdEvt) {\n                if (kbdEvt.key === KEY_IDS.ARROW_LEFT || kbdEvt.keyCode === 37) {\n                    return KEY_IDS.ARROW_LEFT;\n                }\n                if (kbdEvt.key === KEY_IDS.ARROW_RIGHT || kbdEvt.keyCode === 39) {\n                    return KEY_IDS.ARROW_RIGHT;\n                }\n                if (kbdEvt.key === KEY_IDS.ARROW_UP || kbdEvt.keyCode === 38) {\n                    return KEY_IDS.ARROW_UP;\n                }\n                if (kbdEvt.key === KEY_IDS.ARROW_DOWN || kbdEvt.keyCode === 40) {\n                    return KEY_IDS.ARROW_DOWN;\n                }\n                if (kbdEvt.key === KEY_IDS.HOME || kbdEvt.keyCode === 36) {\n                    return KEY_IDS.HOME;\n                }\n                if (kbdEvt.key === KEY_IDS.END || kbdEvt.keyCode === 35) {\n                    return KEY_IDS.END;\n                }\n                if (kbdEvt.key === KEY_IDS.PAGE_UP || kbdEvt.keyCode === 33) {\n                    return KEY_IDS.PAGE_UP;\n                }\n                if (kbdEvt.key === KEY_IDS.PAGE_DOWN || kbdEvt.keyCode === 34) {\n                    return KEY_IDS.PAGE_DOWN;\n                }\n                return '';\n            }\n            /**\n             * Computes the value given a keyboard key ID\n             * @param {string} keyId\n             * @return {number}\n             */\n        }, {\n            key: \"getValueForKeyId_\",\n            value: function getValueForKeyId_(keyId) {\n                var max = this.max_, min = this.min_, step = this.step_;\n                var delta = step || (max - min) / 100;\n                var valueNeedsToBeFlipped = this.adapter_.isRTL() && (keyId === KEY_IDS.ARROW_LEFT || keyId === KEY_IDS.ARROW_RIGHT);\n                if (valueNeedsToBeFlipped) {\n                    delta = -delta;\n                }\n                switch (keyId) {\n                    case KEY_IDS.ARROW_LEFT:\n                    case KEY_IDS.ARROW_DOWN:\n                        return this.value_ - delta;\n                    case KEY_IDS.ARROW_RIGHT:\n                    case KEY_IDS.ARROW_UP:\n                        return this.value_ + delta;\n                    case KEY_IDS.HOME:\n                        return this.min_;\n                    case KEY_IDS.END:\n                        return this.max_;\n                    case KEY_IDS.PAGE_UP:\n                        return this.value_ + delta * numbers.PAGE_FACTOR;\n                    case KEY_IDS.PAGE_DOWN:\n                        return this.value_ - delta * numbers.PAGE_FACTOR;\n                    default:\n                        return NaN;\n                }\n            }\n        }, {\n            key: \"handleFocus_\",\n            value: function handleFocus_() {\n                if (this.preventFocusState_) {\n                    return;\n                }\n                this.adapter_.addClass(cssClasses.FOCUS);\n            }\n        }, {\n            key: \"handleBlur_\",\n            value: function handleBlur_() {\n                this.preventFocusState_ = false;\n                this.adapter_.removeClass(cssClasses.FOCUS);\n            }\n            /**\n             * Sets the value of the slider\n             * @param {number} value\n             * @param {boolean} shouldFireInput\n             * @param {boolean=} force\n             */\n        }, {\n            key: \"setValue_\",\n            value: function setValue_(value, shouldFireInput) {\n                var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                if (value === this.value_ && !force) {\n                    return;\n                }\n                var min = this.min_, max = this.max_;\n                var valueSetToBoundary = value === min || value === max;\n                if (this.step_ && !valueSetToBoundary) {\n                    value = this.quantize_(value);\n                }\n                if (value < min) {\n                    value = min;\n                }\n                else if (value > max) {\n                    value = max;\n                }\n                this.value_ = value;\n                this.adapter_.setAttribute(strings.ARIA_VALUENOW, String(this.value_));\n                this.updateUIForCurrentValue_();\n                if (shouldFireInput) {\n                    this.adapter_.notifyInput();\n                    if (this.isDiscrete_) {\n                        this.adapter_.setMarkerValue(value);\n                    }\n                }\n            }\n            /**\n             * Calculates the quantized value\n             * @param {number} value\n             * @return {number}\n             */\n        }, {\n            key: \"quantize_\",\n            value: function quantize_(value) {\n                var numSteps = Math.round(value / this.step_);\n                var quantizedVal = numSteps * this.step_;\n                return quantizedVal;\n            }\n        }, {\n            key: \"updateUIForCurrentValue_\",\n            value: function updateUIForCurrentValue_() {\n                var _this5 = this;\n                var max = this.max_, min = this.min_, value = this.value_;\n                var pctComplete = (value - min) / (max - min);\n                var translatePx = pctComplete * this.rect_.width;\n                if (this.adapter_.isRTL()) {\n                    translatePx = this.rect_.width - translatePx;\n                }\n                var transformProp = getCorrectPropertyName(window, 'transform');\n                var transitionendEvtName = getCorrectEventName(window, 'transitionend');\n                if (this.inTransit_) {\n                    var onTransitionEnd = function onTransitionEnd() {\n                        _this5.setInTransit_(false);\n                        _this5.adapter_.deregisterThumbContainerInteractionHandler(transitionendEvtName, onTransitionEnd);\n                    };\n                    this.adapter_.registerThumbContainerInteractionHandler(transitionendEvtName, onTransitionEnd);\n                }\n                this.updateUIFrame_ = requestAnimationFrame(function () {\n                    // NOTE(traviskaufman): It would be nice to use calc() here,\n                    // but IE cannot handle calcs in transforms correctly.\n                    // See: https://goo.gl/NC2itk\n                    // Also note that the -50% offset is used to center the slider thumb.\n                    _this5.adapter_.setThumbContainerStyleProperty(transformProp, \"translateX(\".concat(translatePx, \"px) translateX(-50%)\"));\n                    _this5.adapter_.setTrackStyleProperty(transformProp, \"scaleX(\".concat(pctComplete, \")\"));\n                });\n            }\n            /**\n             * Toggles the active state of the slider\n             * @param {boolean} active\n             */\n        }, {\n            key: \"setActive_\",\n            value: function setActive_(active) {\n                this.active_ = active;\n                this.toggleClass_(cssClasses.ACTIVE, this.active_);\n            }\n            /**\n             * Toggles the inTransit state of the slider\n             * @param {boolean} inTransit\n             */\n        }, {\n            key: \"setInTransit_\",\n            value: function setInTransit_(inTransit) {\n                this.inTransit_ = inTransit;\n                this.toggleClass_(cssClasses.IN_TRANSIT, this.inTransit_);\n            }\n            /**\n             * Conditionally adds or removes a class based on shouldBePresent\n             * @param {string} className\n             * @param {boolean} shouldBePresent\n             */\n        }, {\n            key: \"toggleClass_\",\n            value: function toggleClass_(className, shouldBePresent) {\n                if (shouldBePresent) {\n                    this.adapter_.addClass(className);\n                }\n                else {\n                    this.adapter_.removeClass(className);\n                }\n            }\n        }]);\n    return MDCSliderFoundation;\n}(MDCFoundation);\n/**\n * @extends MDCComponent<!MDCSliderFoundation>\n */\nvar MDCSlider = \n/*#__PURE__*/\nfunction (_MDCComponent) {\n    _inherits(MDCSlider, _MDCComponent);\n    _createClass(MDCSlider, null, [{\n            key: \"attachTo\",\n            value: function attachTo(root) {\n                return new MDCSlider(root);\n            }\n        }]);\n    function MDCSlider() {\n        var _ref;\n        var _this;\n        _classCallCheck(this, MDCSlider);\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n        _this = _possibleConstructorReturn(this, (_ref = MDCSlider.__proto__ || Object.getPrototypeOf(MDCSlider)).call.apply(_ref, [this].concat(args)));\n        /** @type {?Element} */\n        _this.thumbContainer_;\n        /** @type {?Element} */\n        _this.track_;\n        /** @type {?Element} */\n        _this.pinValueMarker_;\n        /** @type {?Element} */\n        _this.trackMarkerContainer_;\n        return _this;\n    }\n    /** @return {number} */\n    _createClass(MDCSlider, [{\n            key: \"initialize\",\n            value: function initialize() {\n                this.thumbContainer_ = this.root_.querySelector(strings.THUMB_CONTAINER_SELECTOR);\n                this.track_ = this.root_.querySelector(strings.TRACK_SELECTOR);\n                this.pinValueMarker_ = this.root_.querySelector(strings.PIN_VALUE_MARKER_SELECTOR);\n                this.trackMarkerContainer_ = this.root_.querySelector(strings.TRACK_MARKER_CONTAINER_SELECTOR);\n            }\n            /**\n             * @return {!MDCSliderFoundation}\n             */\n        }, {\n            key: \"getDefaultFoundation\",\n            value: function getDefaultFoundation() {\n                var _this2 = this;\n                return new MDCSliderFoundation(\n                /** @type {!MDCSliderAdapter} */\n                {\n                    hasClass: function hasClass(className) {\n                        return _this2.root_.classList.contains(className);\n                    },\n                    addClass: function addClass(className) {\n                        return _this2.root_.classList.add(className);\n                    },\n                    removeClass: function removeClass(className) {\n                        return _this2.root_.classList.remove(className);\n                    },\n                    getAttribute: function getAttribute(name) {\n                        return _this2.root_.getAttribute(name);\n                    },\n                    setAttribute: function setAttribute(name, value) {\n                        return _this2.root_.setAttribute(name, value);\n                    },\n                    removeAttribute: function removeAttribute(name) {\n                        return _this2.root_.removeAttribute(name);\n                    },\n                    computeBoundingRect: function computeBoundingRect() {\n                        return _this2.root_.getBoundingClientRect();\n                    },\n                    getTabIndex: function getTabIndex() {\n                        return _this2.root_.tabIndex;\n                    },\n                    registerInteractionHandler: function registerInteractionHandler(type, handler) {\n                        _this2.root_.addEventListener(type, handler);\n                    },\n                    deregisterInteractionHandler: function deregisterInteractionHandler(type, handler) {\n                        _this2.root_.removeEventListener(type, handler);\n                    },\n                    registerThumbContainerInteractionHandler: function registerThumbContainerInteractionHandler(type, handler) {\n                        _this2.thumbContainer_.addEventListener(type, handler);\n                    },\n                    deregisterThumbContainerInteractionHandler: function deregisterThumbContainerInteractionHandler(type, handler) {\n                        _this2.thumbContainer_.removeEventListener(type, handler);\n                    },\n                    registerBodyInteractionHandler: function registerBodyInteractionHandler(type, handler) {\n                        document.body.addEventListener(type, handler);\n                    },\n                    deregisterBodyInteractionHandler: function deregisterBodyInteractionHandler(type, handler) {\n                        document.body.removeEventListener(type, handler);\n                    },\n                    registerResizeHandler: function registerResizeHandler(handler) {\n                        window.addEventListener('resize', handler);\n                    },\n                    deregisterResizeHandler: function deregisterResizeHandler(handler) {\n                        window.removeEventListener('resize', handler);\n                    },\n                    notifyInput: function notifyInput() {\n                        _this2.emit(strings.INPUT_EVENT, _this2);\n                    },\n                    notifyChange: function notifyChange() {\n                        _this2.emit(strings.CHANGE_EVENT, _this2);\n                    },\n                    setThumbContainerStyleProperty: function setThumbContainerStyleProperty(propertyName, value) {\n                        _this2.thumbContainer_.style.setProperty(propertyName, value);\n                    },\n                    setTrackStyleProperty: function setTrackStyleProperty(propertyName, value) {\n                        _this2.track_.style.setProperty(propertyName, value);\n                    },\n                    setMarkerValue: function setMarkerValue(value) {\n                        _this2.pinValueMarker_.innerText = value;\n                    },\n                    appendTrackMarkers: function appendTrackMarkers(numMarkers) {\n                        var frag = document.createDocumentFragment();\n                        for (var i = 0; i < numMarkers; i++) {\n                            var marker = document.createElement('div');\n                            marker.classList.add('mdc-slider__track-marker');\n                            frag.appendChild(marker);\n                        }\n                        _this2.trackMarkerContainer_.appendChild(frag);\n                    },\n                    removeTrackMarkers: function removeTrackMarkers() {\n                        while (_this2.trackMarkerContainer_.firstChild) {\n                            _this2.trackMarkerContainer_.removeChild(_this2.trackMarkerContainer_.firstChild);\n                        }\n                    },\n                    setLastTrackMarkersStyleProperty: function setLastTrackMarkersStyleProperty(propertyName, value) {\n                        // We remove and append new nodes, thus, the last track marker must be dynamically found.\n                        var lastTrackMarker = _this2.root_.querySelector(strings.LAST_TRACK_MARKER_SELECTOR);\n                        lastTrackMarker.style.setProperty(propertyName, value);\n                    },\n                    isRTL: function isRTL() {\n                        return getComputedStyle(_this2.root_).direction === 'rtl';\n                    }\n                });\n            }\n        }, {\n            key: \"initialSyncWithDOM\",\n            value: function initialSyncWithDOM() {\n                var origValueNow = parseFloat(this.root_.getAttribute(strings.ARIA_VALUENOW));\n                this.min = parseFloat(this.root_.getAttribute(strings.ARIA_VALUEMIN)) || this.min;\n                this.max = parseFloat(this.root_.getAttribute(strings.ARIA_VALUEMAX)) || this.max;\n                this.step = parseFloat(this.root_.getAttribute(strings.STEP_DATA_ATTR)) || this.step;\n                this.value = origValueNow || this.value;\n                this.disabled = this.root_.hasAttribute(strings.ARIA_DISABLED) && this.root_.getAttribute(strings.ARIA_DISABLED) !== 'false';\n                this.foundation_.setupTrackMarker();\n            }\n        }, {\n            key: \"layout\",\n            value: function layout() {\n                this.foundation_.layout();\n            }\n            /** @param {number=} amount */\n        }, {\n            key: \"stepUp\",\n            value: function stepUp() {\n                var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.step || 1;\n                this.value += amount;\n            }\n            /** @param {number=} amount */\n        }, {\n            key: \"stepDown\",\n            value: function stepDown() {\n                var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.step || 1;\n                this.value -= amount;\n            }\n        }, {\n            key: \"value\",\n            get: function get() {\n                return this.foundation_.getValue();\n            }\n            /** @param {number} value */\n            ,\n            set: function set(value) {\n                this.foundation_.setValue(value);\n            }\n            /** @return {number} */\n        }, {\n            key: \"min\",\n            get: function get() {\n                return this.foundation_.getMin();\n            }\n            /** @param {number} min */\n            ,\n            set: function set(min) {\n                this.foundation_.setMin(min);\n            }\n            /** @return {number} */\n        }, {\n            key: \"max\",\n            get: function get() {\n                return this.foundation_.getMax();\n            }\n            /** @param {number} max */\n            ,\n            set: function set(max) {\n                this.foundation_.setMax(max);\n            }\n            /** @return {number} */\n        }, {\n            key: \"step\",\n            get: function get() {\n                return this.foundation_.getStep();\n            }\n            /** @param {number} step */\n            ,\n            set: function set(step) {\n                this.foundation_.setStep(step);\n            }\n            /** @return {boolean} */\n        }, {\n            key: \"disabled\",\n            get: function get() {\n                return this.foundation_.isDisabled();\n            }\n            /** @param {boolean} disabled */\n            ,\n            set: function set(disabled) {\n                this.foundation_.setDisabled(disabled);\n            }\n        }]);\n    return MDCSlider;\n}(MDCComponent);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ MDC_SLIDER_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: /*@__PURE__*/ forwardRef(function () { return MdcSlider; }),\n    multi: true\n};\nvar MdcSliderChange = /** @class */ /*@__PURE__*/ (function () {\n    function MdcSliderChange(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n    return MdcSliderChange;\n}());\nvar MdcSlider = /** @class */ /*@__PURE__*/ (function () {\n    function MdcSlider(_changeDetectorRef, _renderer, elementRef, _registry) {\n        var _this = this;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._renderer = _renderer;\n        this.elementRef = elementRef;\n        this._registry = _registry;\n        this.tabIndex = 0;\n        this.name = null;\n        this._discrete = false;\n        this._markers = false;\n        this._min = 0;\n        this._max = 100;\n        this._step = 0;\n        this._value = 0;\n        this._disabled = false;\n        this.change = new EventEmitter();\n        this.input = new EventEmitter();\n        this.isHostClass = true;\n        this.role = 'slider';\n        /**\n         * View -> model callback called when value changes\n         */\n        this._onChange = function () { };\n        /**\n         * View -> model callback called when radio has been touched\n         */\n        this._onTouched = function () { };\n        this._mdcAdapter = {\n            hasClass: function (className) { return _this._getHostElement().classList.contains(className); },\n            addClass: function (className) { return _this._renderer.addClass(_this._getHostElement(), className); },\n            removeClass: function (className) { return _this._renderer.removeClass(_this._getHostElement(), className); },\n            getAttribute: function (name) { return _this._getHostElement().getAttribute(name); },\n            setAttribute: function (name, value) { return _this._renderer.setAttribute(_this._getHostElement(), name, value); },\n            removeAttribute: function (name) { return _this._renderer.removeAttribute(_this._getHostElement(), name); },\n            computeBoundingRect: function () { return _this._getHostElement().getBoundingClientRect(); },\n            getTabIndex: function () { return _this._getHostElement().tabIndex; },\n            registerInteractionHandler: function (type, handler) {\n                return _this._registry.listen(type, handler, _this._getHostElement());\n            },\n            deregisterInteractionHandler: function (type, handler) { return _this._registry.unlisten(type, handler); },\n            registerThumbContainerInteractionHandler: function (type, handler) {\n                if (_this.thumbContainer) {\n                    _this._registry.listen(type, handler, _this.thumbContainer.nativeElement);\n                }\n            },\n            deregisterThumbContainerInteractionHandler: function (type, handler) {\n                return _this._registry.unlisten(type, handler);\n            },\n            registerBodyInteractionHandler: function (type, handler) {\n                if (isBrowser()) {\n                    _this._registry.listen(type, handler, document.body);\n                }\n            },\n            deregisterBodyInteractionHandler: function (type, handler) { return _this._registry.unlisten(type, handler); },\n            registerResizeHandler: function (handler) {\n                if (isBrowser()) {\n                    _this._registry.listen('resize', handler, window);\n                }\n            },\n            deregisterResizeHandler: function (handler) { return _this._registry.unlisten('resize', handler); },\n            notifyInput: function () {\n                _this.input.emit(new MdcSliderChange(_this, _this.getValue()));\n                _this._onTouched();\n            },\n            notifyChange: function () {\n                _this.change.emit(new MdcSliderChange(_this, _this.getValue()));\n                _this.setValue(_this.getValue());\n            },\n            setThumbContainerStyleProperty: function (propertyName, value) {\n                return _this._renderer.setStyle(_this.thumbContainer.nativeElement, propertyName, value);\n            },\n            setTrackStyleProperty: function (propertyName, value) {\n                return _this._renderer.setStyle(_this.track.nativeElement, propertyName, value);\n            },\n            setMarkerValue: function (value) { return _this.pinValueMarker.nativeElement.innerText = value; },\n            appendTrackMarkers: function (numMarkers) {\n                for (var /** @type {?} */ i = 0; i < numMarkers; i++) {\n                    var /** @type {?} */ marker = _this._renderer.createElement('div');\n                    _this._renderer.addClass(marker, 'mdc-slider__track-marker');\n                    _this._renderer.appendChild(_this.trackMarkerContainer.nativeElement, marker);\n                }\n            },\n            removeTrackMarkers: function () {\n                while (_this.trackMarkerContainer.nativeElement.firstChild) {\n                    _this._renderer.removeChild(_this.trackMarkerContainer.nativeElement, _this.trackMarkerContainer.nativeElement.firstChild);\n                }\n            },\n            setLastTrackMarkersStyleProperty: function (propertyName, value) {\n                return _this._renderer.setStyle(_this.trackMarkerContainer.nativeElement.lastChild, propertyName, value);\n            },\n            isRTL: function () { return getComputedStyle(_this._getHostElement()).direction === 'rtl'; }\n        };\n    }\n    Object.defineProperty(MdcSlider.prototype, \"discrete\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._discrete; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.setDiscrete(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcSlider.prototype, \"markers\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._markers; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.setMarkers(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcSlider.prototype, \"min\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._min; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.setMin(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcSlider.prototype, \"max\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._max; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.setMax(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcSlider.prototype, \"step\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._step; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.setStep(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcSlider.prototype, \"value\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._value; },\n        set: /**\n         * @param {?} newValue\n         * @return {?}\n         */ function (newValue) {\n            this.setValue(newValue);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcSlider.prototype, \"disabled\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.setDisabled(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcSlider.prototype, \"classDiscrete\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.discrete ? 'mdc-slider--discrete' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcSlider.prototype, \"classDisplayMarkers\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.markers && this.discrete ? 'mdc-slider--display-markers' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdcSlider.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            this._foundation = new MDCSliderFoundation(this._mdcAdapter);\n            this._foundation.init();\n            this.setMin(this.min);\n            this.setMax(this.max);\n            this.setStep(this.step);\n            this.setValue(this.value);\n            this._foundation.setupTrackMarker();\n        };\n    /**\n     * @return {?}\n     */\n    MdcSlider.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._foundation.destroy();\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MdcSlider.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (value) {\n                if (value !== this.value) {\n                    this.setValue(value);\n                }\n            }\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MdcSlider.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this._onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MdcSlider.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this._onTouched = fn;\n        };\n    /**\n     * @param {?} discrete\n     * @return {?}\n     */\n    MdcSlider.prototype.setDiscrete = /**\n     * @param {?} discrete\n     * @return {?}\n     */\n        function (discrete) {\n            this._discrete = discrete;\n        };\n    /**\n     * @param {?} markers\n     * @return {?}\n     */\n    MdcSlider.prototype.setMarkers = /**\n     * @param {?} markers\n     * @return {?}\n     */\n        function (markers) {\n            this._markers = markers;\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MdcSlider.prototype.setValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (this.disabled) {\n                return;\n            }\n            var /** @type {?} */ previousValue = this.value;\n            this._value = value;\n            if (!this._foundation) {\n                return;\n            }\n            this._foundation.setValue(value);\n            if (value !== previousValue) {\n                this._onChange(value);\n            }\n            this._changeDetectorRef.markForCheck();\n        };\n    /**\n     * @return {?}\n     */\n    MdcSlider.prototype.getValue = /**\n     * @return {?}\n     */\n        function () {\n            return this._foundation.getValue();\n        };\n    /**\n     * @return {?}\n     */\n    MdcSlider.prototype.layout = /**\n     * @return {?}\n     */\n        function () {\n            this._foundation.layout();\n        };\n    /**\n     * @param {?} min\n     * @return {?}\n     */\n    MdcSlider.prototype.setMin = /**\n     * @param {?} min\n     * @return {?}\n     */\n        function (min) {\n            if (min > this.max) {\n                return;\n            }\n            this._min = min;\n            if (!this._foundation) {\n                return;\n            }\n            this._foundation.setMin(toNumber(min, 0));\n            this._changeDetectorRef.markForCheck();\n        };\n    /**\n     * @return {?}\n     */\n    MdcSlider.prototype.getMin = /**\n     * @return {?}\n     */\n        function () {\n            return this._foundation.getMin();\n        };\n    /**\n     * @param {?} max\n     * @return {?}\n     */\n    MdcSlider.prototype.setMax = /**\n     * @param {?} max\n     * @return {?}\n     */\n        function (max) {\n            if (this.min > max) {\n                return;\n            }\n            this._max = max;\n            if (!this._foundation) {\n                return;\n            }\n            this._foundation.setMax(toNumber(max, 100));\n            this._changeDetectorRef.markForCheck();\n        };\n    /**\n     * @return {?}\n     */\n    MdcSlider.prototype.getMax = /**\n     * @return {?}\n     */\n        function () {\n            return this._foundation.getMax();\n        };\n    /**\n     * @param {?} step\n     * @return {?}\n     */\n    MdcSlider.prototype.setStep = /**\n     * @param {?} step\n     * @return {?}\n     */\n        function (step) {\n            this._step = step;\n            if (!this._foundation) {\n                return;\n            }\n            this._foundation.setStep(step);\n            this._changeDetectorRef.markForCheck();\n        };\n    /**\n     * @return {?}\n     */\n    MdcSlider.prototype.getStep = /**\n     * @return {?}\n     */\n        function () {\n            return this._foundation.getStep();\n        };\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    MdcSlider.prototype.setDisabled = /**\n     * @param {?} disabled\n     * @return {?}\n     */\n        function (disabled) {\n            this.setDisabledState(disabled);\n        };\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    MdcSlider.prototype.setDisabledState = /**\n     * @param {?} disabled\n     * @return {?}\n     */\n        function (disabled) {\n            this._disabled = disabled;\n            if (!this._foundation) {\n                return;\n            }\n            this._foundation.setDisabled(disabled);\n            this._changeDetectorRef.markForCheck();\n        };\n    /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n    MdcSlider.prototype._getHostElement = /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n        function () {\n            return this.elementRef.nativeElement;\n        };\n    return MdcSlider;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MdcSliderModule = /** @class */ /*@__PURE__*/ (function () {\n    function MdcSliderModule() {\n    }\n    return MdcSliderModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { MdcSliderModule, MDC_SLIDER_CONTROL_VALUE_ACCESSOR, MdcSliderChange, MdcSlider };\n",null]}