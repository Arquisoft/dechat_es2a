{"remainingRequest":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\@angular-mdc\\web\\esm5\\snackbar.es5.js","dependencies":[{"path":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\@angular-mdc\\web\\esm5\\snackbar.es5.js","mtime":1556004096908},{"path":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556004112812},{"path":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1556004088045}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright (c) 2018 Dominic Carretto\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE\n */\n/** PURE_IMPORTS_START rxjs,tslib,_angular_core,_angular_mdc_web_common,rxjs_operators PURE_IMPORTS_END */\nimport { Subject } from 'rxjs';\nimport { __assign } from 'tslib';\nimport { Component, ElementRef, EventEmitter, HostBinding, Output, Renderer2, ViewChild, ViewEncapsulation, Injectable, NgModule } from '@angular/core';\nimport { isBrowser, EventRegistry, MdcPortalService } from '@angular-mdc/web/common';\nimport { takeUntil } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Reference to a snackbar dispatched from the snackbar service.\n * @template T\n */\nvar /**\n * Reference to a snackbar dispatched from the snackbar service.\n * @template T\n */ MdcSnackbarRef = /** @class */ /*@__PURE__*/ (function () {\n    function MdcSnackbarRef(component) {\n        /**\n         * Subject for notifying the user that the snackbar has been dismissed.\n         */\n        this._afterDismiss = new Subject();\n        /**\n         * Subject for notifying the user that the snackbar has opened and appeared.\n         */\n        this._afterOpen = new Subject();\n        this.componentInstance = component;\n    }\n    /** Gets an observable that is notified when the snackbar is finished closing. */\n    /**\n     * Gets an observable that is notified when the snackbar is finished closing.\n     * @return {?}\n     */\n    MdcSnackbarRef.prototype.afterDismiss = /**\n     * Gets an observable that is notified when the snackbar is finished closing.\n     * @return {?}\n     */\n        function () {\n            return this._afterDismiss.asObservable();\n        };\n    /** Gets an observable that is notified when the snackbar has opened and appeared. */\n    /**\n     * Gets an observable that is notified when the snackbar has opened and appeared.\n     * @return {?}\n     */\n    MdcSnackbarRef.prototype.afterOpen = /**\n     * Gets an observable that is notified when the snackbar has opened and appeared.\n     * @return {?}\n     */\n        function () {\n            return this._afterOpen.asObservable();\n        };\n    /**\n     * @return {?}\n     */\n    MdcSnackbarRef.prototype.open = /**\n     * @return {?}\n     */\n        function () {\n            this.componentInstance.show();\n            this._afterOpen.next();\n            this._afterOpen.complete();\n        };\n    /**\n     * @return {?}\n     */\n    MdcSnackbarRef.prototype.dismiss = /**\n     * @return {?}\n     */\n        function () {\n            this._afterDismiss.next();\n            this._afterDismiss.complete();\n        };\n    return MdcSnackbarRef;\n}());\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor)\n            descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps)\n        _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps)\n        _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass)\n        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @template A\n */\nvar MDCFoundation = \n/*#__PURE__*/\n/*@__PURE__*/ function () {\n    _createClass(MDCFoundation, null, [{\n            key: \"cssClasses\",\n            /** @return enum{cssClasses} */\n            get: function get() {\n                // Classes extending MDCFoundation should implement this method to return an object which exports every\n                // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}\n                return {};\n            }\n            /** @return enum{strings} */\n        }, {\n            key: \"strings\",\n            get: function get() {\n                // Classes extending MDCFoundation should implement this method to return an object which exports all\n                // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}\n                return {};\n            }\n            /** @return enum{numbers} */\n        }, {\n            key: \"numbers\",\n            get: function get() {\n                // Classes extending MDCFoundation should implement this method to return an object which exports all\n                // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}\n                return {};\n            }\n            /** @return {!Object} */\n        }, {\n            key: \"defaultAdapter\",\n            get: function get() {\n                // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient\n                // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter\n                // validation.\n                return {};\n            }\n            /**\n             * @param {A=} adapter\n             */\n        }]);\n    function MDCFoundation() {\n        var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _classCallCheck(this, MDCFoundation);\n        /** @protected {!A} */\n        this.adapter_ = adapter;\n    }\n    _createClass(MDCFoundation, [{\n            key: \"init\",\n            value: function init() {\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n            }\n        }]);\n    return MDCFoundation;\n}();\n/**\n * @template F\n */\nvar MDCComponent = \n/*#__PURE__*/\n/*@__PURE__*/ function () {\n    _createClass(MDCComponent, null, [{\n            key: \"attachTo\",\n            /**\n             * @param {!Element} root\n             * @return {!MDCComponent}\n             */\n            value: function attachTo(root) {\n                // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and\n                // returns an instantiated component with its root set to that element. Also note that in the cases of\n                // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized\n                // from getDefaultFoundation().\n                return new MDCComponent(root, new MDCFoundation());\n            }\n            /**\n             * @param {!Element} root\n             * @param {F=} foundation\n             * @param {...?} args\n             */\n        }]);\n    function MDCComponent(root) {\n        var foundation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n        _classCallCheck(this, MDCComponent);\n        /** @protected {!Element} */\n        this.root_ = root;\n        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n            args[_key - 2] = arguments[_key];\n        }\n        this.initialize.apply(this, args); // Note that we initialize foundation here and not within the constructor's default param so that\n        // this.root_ is defined and can be used within the foundation class.\n        /** @protected {!F} */\n        this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;\n        this.foundation_.init();\n        this.initialSyncWithDOM();\n    }\n    _createClass(MDCComponent, [{\n            key: \"initialize\",\n            value: function initialize() { } // Subclasses can override this to do any additional setup work that would be considered part of a\n            // \"constructor\". Essentially, it is a hook into the parent constructor before the foundation is\n            // initialized. Any additional arguments besides root and foundation will be passed in here.\n            /**\n             * @return {!F} foundation\n             */\n        }, {\n            key: \"getDefaultFoundation\",\n            value: function getDefaultFoundation() {\n                // Subclasses must override this method to return a properly configured foundation class for the\n                // component.\n                throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' + 'foundation class');\n            }\n        }, {\n            key: \"initialSyncWithDOM\",\n            value: function initialSyncWithDOM() {\n                // object. An example of this would be a form control wrapper that needs to synchronize its internal state\n                // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM\n                // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n                // Subclasses may implement this method to release any resources / deregister any listeners they have\n                // attached. An example of this might be deregistering a resize event from the window object.\n                this.foundation_.destroy();\n            }\n            /**\n             * Wrapper method to add an event listener to the component's root element. This is most useful when\n             * listening for custom events.\n             * @param {string} evtType\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"listen\",\n            value: function listen(evtType, handler) {\n                this.root_.addEventListener(evtType, handler);\n            }\n            /**\n             * Wrapper method to remove an event listener to the component's root element. This is most useful when\n             * unlistening for custom events.\n             * @param {string} evtType\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"unlisten\",\n            value: function unlisten(evtType, handler) {\n                this.root_.removeEventListener(evtType, handler);\n            }\n            /**\n             * Fires a cross-browser-compatible custom event from the component root of the given type,\n             * with the given data.\n             * @param {string} evtType\n             * @param {!Object} evtData\n             * @param {boolean=} shouldBubble\n             */\n        }, {\n            key: \"emit\",\n            value: function emit(evtType, evtData) {\n                var shouldBubble = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                var evt;\n                if (typeof CustomEvent === 'function') {\n                    evt = new CustomEvent(evtType, {\n                        detail: evtData,\n                        bubbles: shouldBubble\n                    });\n                }\n                else {\n                    evt = document.createEvent('CustomEvent');\n                    evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n                }\n                this.root_.dispatchEvent(evt);\n            }\n        }]);\n    return MDCComponent;\n}();\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar cssClasses = {\n    ROOT: 'mdc-snackbar',\n    TEXT: 'mdc-snackbar__text',\n    ACTION_WRAPPER: 'mdc-snackbar__action-wrapper',\n    ACTION_BUTTON: 'mdc-snackbar__action-button',\n    ACTIVE: 'mdc-snackbar--active',\n    MULTILINE: 'mdc-snackbar--multiline',\n    ACTION_ON_BOTTOM: 'mdc-snackbar--action-on-bottom'\n};\nvar strings = {\n    TEXT_SELECTOR: '.mdc-snackbar__text',\n    ACTION_WRAPPER_SELECTOR: '.mdc-snackbar__action-wrapper',\n    ACTION_BUTTON_SELECTOR: '.mdc-snackbar__action-button',\n    SHOW_EVENT: 'MDCSnackbar:show',\n    HIDE_EVENT: 'MDCSnackbar:hide'\n};\nvar numbers = {\n    MESSAGE_TIMEOUT: 2750\n};\nvar MDCSnackbarFoundation = \n/*#__PURE__*/\nfunction (_MDCFoundation) {\n    _inherits(MDCSnackbarFoundation, _MDCFoundation);\n    _createClass(MDCSnackbarFoundation, [{\n            key: \"active\",\n            get: function get() {\n                return this.active_;\n            }\n        }], [{\n            key: \"cssClasses\",\n            get: function get() {\n                return cssClasses;\n            }\n        }, {\n            key: \"strings\",\n            get: function get() {\n                return strings;\n            }\n        }, {\n            key: \"defaultAdapter\",\n            get: function get() {\n                return {\n                    addClass: function addClass() { },\n                    removeClass: function removeClass() { },\n                    setAriaHidden: function setAriaHidden() { },\n                    unsetAriaHidden: function unsetAriaHidden() { },\n                    setActionAriaHidden: function setActionAriaHidden() { },\n                    unsetActionAriaHidden: function unsetActionAriaHidden() { },\n                    setActionText: function setActionText() { },\n                    setMessageText: function setMessageText() { },\n                    setFocus: function setFocus() { },\n                    visibilityIsHidden: function visibilityIsHidden() {\n                        return (\n                        /* boolean */\n                        false);\n                    },\n                    registerCapturedBlurHandler: function registerCapturedBlurHandler() { },\n                    deregisterCapturedBlurHandler: function deregisterCapturedBlurHandler() { },\n                    registerVisibilityChangeHandler: function registerVisibilityChangeHandler() { },\n                    deregisterVisibilityChangeHandler: function deregisterVisibilityChangeHandler() { },\n                    registerCapturedInteractionHandler: function registerCapturedInteractionHandler() { },\n                    deregisterCapturedInteractionHandler: function deregisterCapturedInteractionHandler() { },\n                    registerActionClickHandler: function registerActionClickHandler() { },\n                    deregisterActionClickHandler: function deregisterActionClickHandler() { },\n                    registerTransitionEndHandler: function registerTransitionEndHandler() { },\n                    deregisterTransitionEndHandler: function deregisterTransitionEndHandler() { },\n                    notifyShow: function notifyShow() { },\n                    notifyHide: function notifyHide() { }\n                };\n            }\n        }]);\n    function MDCSnackbarFoundation(adapter) {\n        var _this;\n        _classCallCheck(this, MDCSnackbarFoundation);\n        _this = _possibleConstructorReturn(this, (MDCSnackbarFoundation.__proto__ || Object.getPrototypeOf(MDCSnackbarFoundation)).call(this, Object.assign(MDCSnackbarFoundation.defaultAdapter, adapter)));\n        _this.active_ = false;\n        _this.actionWasClicked_ = false;\n        _this.dismissOnAction_ = true;\n        _this.firstFocus_ = true;\n        _this.pointerDownRecognized_ = false;\n        _this.snackbarHasFocus_ = false;\n        _this.snackbarData_ = null;\n        _this.queue_ = [];\n        _this.actionClickHandler_ = function () {\n            _this.actionWasClicked_ = true;\n            _this.invokeAction_();\n        };\n        _this.visibilitychangeHandler_ = function () {\n            clearTimeout(_this.timeoutId_);\n            _this.snackbarHasFocus_ = true;\n            if (!_this.adapter_.visibilityIsHidden()) {\n                setTimeout(_this.cleanup_.bind(_assertThisInitialized(_this)), _this.snackbarData_.timeout || numbers.MESSAGE_TIMEOUT);\n            }\n        };\n        _this.interactionHandler_ = function (evt) {\n            if (evt.type == 'touchstart' || evt.type == 'mousedown') {\n                _this.pointerDownRecognized_ = true;\n            }\n            _this.handlePossibleTabKeyboardFocus_(evt);\n            if (evt.type == 'focus') {\n                _this.pointerDownRecognized_ = false;\n            }\n        };\n        _this.blurHandler_ = function () {\n            clearTimeout(_this.timeoutId_);\n            _this.snackbarHasFocus_ = false;\n            _this.timeoutId_ = setTimeout(_this.cleanup_.bind(_assertThisInitialized(_this)), _this.snackbarData_.timeout || numbers.MESSAGE_TIMEOUT);\n        };\n        return _this;\n    }\n    _createClass(MDCSnackbarFoundation, [{\n            key: \"init\",\n            value: function init() {\n                this.adapter_.registerActionClickHandler(this.actionClickHandler_);\n                this.adapter_.setAriaHidden();\n                this.adapter_.setActionAriaHidden();\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n                var _this2 = this;\n                this.adapter_.deregisterActionClickHandler(this.actionClickHandler_);\n                this.adapter_.deregisterCapturedBlurHandler(this.blurHandler_);\n                this.adapter_.deregisterVisibilityChangeHandler(this.visibilitychangeHandler_);\n                ['touchstart', 'mousedown', 'focus'].forEach(function (evtType) {\n                    _this2.adapter_.deregisterCapturedInteractionHandler(evtType, _this2.interactionHandler_);\n                });\n            }\n        }, {\n            key: \"dismissesOnAction\",\n            value: function dismissesOnAction() {\n                return this.dismissOnAction_;\n            }\n        }, {\n            key: \"setDismissOnAction\",\n            value: function setDismissOnAction(dismissOnAction) {\n                this.dismissOnAction_ = !!dismissOnAction;\n            }\n        }, {\n            key: \"show\",\n            value: function show(data) {\n                var _this3 = this;\n                if (!data) {\n                    throw new Error('Please provide a data object with at least a message to display.');\n                }\n                if (!data.message) {\n                    throw new Error('Please provide a message to be displayed.');\n                }\n                if (data.actionHandler && !data.actionText) {\n                    throw new Error('Please provide action text with the handler.');\n                }\n                if (this.active) {\n                    this.queue_.push(data);\n                    return;\n                }\n                clearTimeout(this.timeoutId_);\n                this.snackbarData_ = data;\n                this.firstFocus_ = true;\n                this.adapter_.registerVisibilityChangeHandler(this.visibilitychangeHandler_);\n                this.adapter_.registerCapturedBlurHandler(this.blurHandler_);\n                ['touchstart', 'mousedown', 'focus'].forEach(function (evtType) {\n                    _this3.adapter_.registerCapturedInteractionHandler(evtType, _this3.interactionHandler_);\n                });\n                var ACTIVE = cssClasses.ACTIVE, MULTILINE = cssClasses.MULTILINE, ACTION_ON_BOTTOM = cssClasses.ACTION_ON_BOTTOM;\n                this.adapter_.setMessageText(this.snackbarData_.message);\n                if (this.snackbarData_.multiline) {\n                    this.adapter_.addClass(MULTILINE);\n                    if (this.snackbarData_.actionOnBottom) {\n                        this.adapter_.addClass(ACTION_ON_BOTTOM);\n                    }\n                }\n                if (this.snackbarData_.actionHandler) {\n                    this.adapter_.setActionText(this.snackbarData_.actionText);\n                    this.actionHandler_ = this.snackbarData_.actionHandler;\n                    this.setActionHidden_(false);\n                }\n                else {\n                    this.setActionHidden_(true);\n                    this.actionHandler_ = null;\n                    this.adapter_.setActionText(null);\n                }\n                this.active_ = true;\n                this.adapter_.addClass(ACTIVE);\n                this.adapter_.unsetAriaHidden();\n                this.adapter_.notifyShow();\n                this.timeoutId_ = setTimeout(this.cleanup_.bind(this), this.snackbarData_.timeout || numbers.MESSAGE_TIMEOUT);\n            }\n        }, {\n            key: \"handlePossibleTabKeyboardFocus_\",\n            value: function handlePossibleTabKeyboardFocus_() {\n                var hijackFocus = this.firstFocus_ && !this.pointerDownRecognized_;\n                if (hijackFocus) {\n                    this.setFocusOnAction_();\n                }\n                this.firstFocus_ = false;\n            }\n        }, {\n            key: \"setFocusOnAction_\",\n            value: function setFocusOnAction_() {\n                this.adapter_.setFocus();\n                this.snackbarHasFocus_ = true;\n                this.firstFocus_ = false;\n            }\n        }, {\n            key: \"invokeAction_\",\n            value: function invokeAction_() {\n                try {\n                    if (!this.actionHandler_) {\n                        return;\n                    }\n                    this.actionHandler_();\n                }\n                finally {\n                    if (this.dismissOnAction_) {\n                        this.cleanup_();\n                    }\n                }\n            }\n        }, {\n            key: \"cleanup_\",\n            value: function cleanup_() {\n                var _this4 = this;\n                var allowDismissal = !this.snackbarHasFocus_ || this.actionWasClicked_;\n                if (allowDismissal) {\n                    var ACTIVE = cssClasses.ACTIVE, MULTILINE = cssClasses.MULTILINE, ACTION_ON_BOTTOM = cssClasses.ACTION_ON_BOTTOM;\n                    this.adapter_.removeClass(ACTIVE);\n                    var handler = function handler() {\n                        clearTimeout(_this4.timeoutId_);\n                        _this4.adapter_.deregisterTransitionEndHandler(handler);\n                        _this4.adapter_.removeClass(MULTILINE);\n                        _this4.adapter_.removeClass(ACTION_ON_BOTTOM);\n                        _this4.setActionHidden_(true);\n                        _this4.adapter_.setAriaHidden();\n                        _this4.active_ = false;\n                        _this4.snackbarHasFocus_ = false;\n                        _this4.adapter_.notifyHide();\n                        _this4.showNext_();\n                    };\n                    this.adapter_.registerTransitionEndHandler(handler);\n                }\n            }\n        }, {\n            key: \"showNext_\",\n            value: function showNext_() {\n                if (!this.queue_.length) {\n                    return;\n                }\n                this.show(this.queue_.shift());\n            }\n        }, {\n            key: \"setActionHidden_\",\n            value: function setActionHidden_(isHidden) {\n                if (isHidden) {\n                    this.adapter_.setActionAriaHidden();\n                }\n                else {\n                    this.adapter_.unsetActionAriaHidden();\n                }\n            }\n        }]);\n    return MDCSnackbarFoundation;\n}(MDCFoundation);\n/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** @const {Object<string, !VendorPropertyMapType>} */\nvar eventTypeMap = {\n    'animationstart': {\n        noPrefix: 'animationstart',\n        webkitPrefix: 'webkitAnimationStart',\n        styleProperty: 'animation'\n    },\n    'animationend': {\n        noPrefix: 'animationend',\n        webkitPrefix: 'webkitAnimationEnd',\n        styleProperty: 'animation'\n    },\n    'animationiteration': {\n        noPrefix: 'animationiteration',\n        webkitPrefix: 'webkitAnimationIteration',\n        styleProperty: 'animation'\n    },\n    'transitionend': {\n        noPrefix: 'transitionend',\n        webkitPrefix: 'webkitTransitionEnd',\n        styleProperty: 'transition'\n    }\n};\n/** @const {Object<string, !VendorPropertyMapType>} */\nvar cssPropertyMap = {\n    'animation': {\n        noPrefix: 'animation',\n        webkitPrefix: '-webkit-animation'\n    },\n    'transform': {\n        noPrefix: 'transform',\n        webkitPrefix: '-webkit-transform'\n    },\n    'transition': {\n        noPrefix: 'transition',\n        webkitPrefix: '-webkit-transition'\n    }\n};\n/**\n * @param {!Object} windowObj\n * @return {boolean}\n */\nfunction hasProperShape(windowObj) {\n    return windowObj['document'] !== undefined && typeof windowObj['document']['createElement'] === 'function';\n}\n/**\n * @param {string} eventType\n * @return {boolean}\n */\nfunction eventFoundInMaps(eventType) {\n    return eventType in eventTypeMap || eventType in cssPropertyMap;\n}\n/**\n * @param {string} eventType\n * @param {!Object<string, !VendorPropertyMapType>} map\n * @param {!Element} el\n * @return {string}\n */\nfunction getJavaScriptEventName(eventType, map, el) {\n    return map[eventType].styleProperty in el.style ? map[eventType].noPrefix : map[eventType].webkitPrefix;\n}\n/**\n * Helper function to determine browser prefix for CSS3 animation events\n * and property names.\n * @param {!Object} windowObj\n * @param {string} eventType\n * @return {string}\n */\nfunction getAnimationName(windowObj, eventType) {\n    if (!hasProperShape(windowObj) || !eventFoundInMaps(eventType)) {\n        return eventType;\n    }\n    var map = \n    /** @type {!Object<string, !VendorPropertyMapType>} */\n    eventType in eventTypeMap ? eventTypeMap : cssPropertyMap;\n    var el = windowObj['document']['createElement']('div');\n    var eventName = '';\n    if (map === eventTypeMap) {\n        eventName = getJavaScriptEventName(eventType, map, el);\n    }\n    else {\n        eventName = map[eventType].noPrefix in el.style ? map[eventType].noPrefix : map[eventType].webkitPrefix;\n    }\n    return eventName;\n} // Public functions to access getAnimationName() for JavaScript events or CSS\n/**\n * @param {!Object} windowObj\n * @param {string} eventType\n * @return {string}\n */\nfunction getCorrectEventName(windowObj, eventType) {\n    return getAnimationName(windowObj, eventType);\n}\nvar MDCSnackbar = \n/*#__PURE__*/\nfunction (_MDCComponent) {\n    _inherits(MDCSnackbar, _MDCComponent);\n    function MDCSnackbar() {\n        _classCallCheck(this, MDCSnackbar);\n        return _possibleConstructorReturn(this, (MDCSnackbar.__proto__ || Object.getPrototypeOf(MDCSnackbar)).apply(this, arguments));\n    }\n    _createClass(MDCSnackbar, [{\n            key: \"show\",\n            value: function show(data) {\n                this.foundation_.show(data);\n            }\n        }, {\n            key: \"getDefaultFoundation\",\n            value: function getDefaultFoundation() {\n                var _this = this;\n                var _MDCSnackbarFoundatio = MDCSnackbarFoundation.strings, TEXT_SELECTOR = _MDCSnackbarFoundatio.TEXT_SELECTOR, ACTION_BUTTON_SELECTOR = _MDCSnackbarFoundatio.ACTION_BUTTON_SELECTOR;\n                var getText = function getText() {\n                    return _this.root_.querySelector(TEXT_SELECTOR);\n                };\n                var getActionButton = function getActionButton() {\n                    return _this.root_.querySelector(ACTION_BUTTON_SELECTOR);\n                };\n                /* eslint brace-style: \"off\" */\n                return new MDCSnackbarFoundation({\n                    addClass: function addClass(className) {\n                        return _this.root_.classList.add(className);\n                    },\n                    removeClass: function removeClass(className) {\n                        return _this.root_.classList.remove(className);\n                    },\n                    setAriaHidden: function setAriaHidden() {\n                        return _this.root_.setAttribute('aria-hidden', 'true');\n                    },\n                    unsetAriaHidden: function unsetAriaHidden() {\n                        return _this.root_.removeAttribute('aria-hidden');\n                    },\n                    setActionAriaHidden: function setActionAriaHidden() {\n                        return getActionButton().setAttribute('aria-hidden', 'true');\n                    },\n                    unsetActionAriaHidden: function unsetActionAriaHidden() {\n                        return getActionButton().removeAttribute('aria-hidden');\n                    },\n                    setActionText: function setActionText(text) {\n                        getActionButton().textContent = text;\n                    },\n                    setMessageText: function setMessageText(text) {\n                        getText().textContent = text;\n                    },\n                    setFocus: function setFocus() {\n                        return getActionButton().focus();\n                    },\n                    visibilityIsHidden: function visibilityIsHidden() {\n                        return document.hidden;\n                    },\n                    registerCapturedBlurHandler: function registerCapturedBlurHandler(handler) {\n                        return getActionButton().addEventListener('blur', handler, true);\n                    },\n                    deregisterCapturedBlurHandler: function deregisterCapturedBlurHandler(handler) {\n                        return getActionButton().removeEventListener('blur', handler, true);\n                    },\n                    registerVisibilityChangeHandler: function registerVisibilityChangeHandler(handler) {\n                        return document.addEventListener('visibilitychange', handler);\n                    },\n                    deregisterVisibilityChangeHandler: function deregisterVisibilityChangeHandler(handler) {\n                        return document.removeEventListener('visibilitychange', handler);\n                    },\n                    registerCapturedInteractionHandler: function registerCapturedInteractionHandler(evt, handler) {\n                        return document.body.addEventListener(evt, handler, true);\n                    },\n                    deregisterCapturedInteractionHandler: function deregisterCapturedInteractionHandler(evt, handler) {\n                        return document.body.removeEventListener(evt, handler, true);\n                    },\n                    registerActionClickHandler: function registerActionClickHandler(handler) {\n                        return getActionButton().addEventListener('click', handler);\n                    },\n                    deregisterActionClickHandler: function deregisterActionClickHandler(handler) {\n                        return getActionButton().removeEventListener('click', handler);\n                    },\n                    registerTransitionEndHandler: function registerTransitionEndHandler(handler) {\n                        return _this.root_.addEventListener(getCorrectEventName(window, 'transitionend'), handler);\n                    },\n                    deregisterTransitionEndHandler: function deregisterTransitionEndHandler(handler) {\n                        return _this.root_.removeEventListener(getCorrectEventName(window, 'transitionend'), handler);\n                    },\n                    notifyShow: function notifyShow() {\n                        return _this.emit(MDCSnackbarFoundation.strings.SHOW_EVENT);\n                    },\n                    notifyHide: function notifyHide() {\n                        return _this.emit(MDCSnackbarFoundation.strings.HIDE_EVENT);\n                    }\n                });\n            }\n        }, {\n            key: \"dismissesOnAction\",\n            get: function get() {\n                return this.foundation_.dismissesOnAction();\n            },\n            set: function set(dismissesOnAction) {\n                this.foundation_.setDismissOnAction(dismissesOnAction);\n            }\n        }], [{\n            key: \"attachTo\",\n            value: function attachTo(root) {\n                return new MDCSnackbar(root);\n            }\n        }]);\n    return MDCSnackbar;\n}(MDCComponent);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MdcSnackbarComponent = /** @class */ /*@__PURE__*/ (function () {\n    function MdcSnackbarComponent(_renderer, elementRef, _registry) {\n        var _this = this;\n        this._renderer = _renderer;\n        this.elementRef = elementRef;\n        this._registry = _registry;\n        this.isHostClass = true;\n        this.ariaLive = 'assertive';\n        this.ariaAtomic = 'true';\n        this.ariaHidden = 'true';\n        /**\n         * Event emitted when the snackbar is shown.\n         */\n        this.shown = new EventEmitter();\n        /**\n         * Event emitted when the snackbar is dismissed.\n         */\n        this.dismissed = new EventEmitter();\n        this._mdcAdapter = {\n            addClass: function (className) { return _this._renderer.addClass(_this._getHostElement(), className); },\n            removeClass: function (className) { return _this._renderer.removeClass(_this._getHostElement(), className); },\n            setAriaHidden: function () { return _this._renderer.setAttribute(_this._getHostElement(), 'aria-hidden', 'true'); },\n            unsetAriaHidden: function () { return _this._renderer.removeAttribute(_this._getHostElement(), 'aria-hidden'); },\n            setActionAriaHidden: function () {\n                if (_this.actionButton) {\n                    _this._renderer.setAttribute(_this.actionButton.nativeElement, 'aria-hidden', 'true');\n                }\n            },\n            unsetActionAriaHidden: function () {\n                if (_this.actionButton) {\n                    _this._renderer.removeAttribute(_this.actionButton.nativeElement, 'aria-hidden');\n                }\n            },\n            setMessageText: function (message) { return _this.snackText.nativeElement.textContent = message; },\n            setActionText: function (actionText) {\n                if (_this.actionButton) {\n                    _this.actionButton.nativeElement.textContent = actionText;\n                }\n            },\n            setFocus: function () { return _this.actionButton.nativeElement.focus(); },\n            visibilityIsHidden: function () { return isBrowser() ? document.hidden : false; },\n            registerCapturedBlurHandler: function (handler) {\n                if (_this.actionButton) {\n                    _this._registry.listen('blur', handler, _this.actionButton.nativeElement, true);\n                }\n            },\n            deregisterCapturedBlurHandler: function (handler) { return _this._registry.unlisten('blur', handler); },\n            registerVisibilityChangeHandler: function (handler) {\n                if (isBrowser()) {\n                    _this._registry.listen('visibilitychange', handler, document);\n                }\n            },\n            deregisterVisibilityChangeHandler: function (handler) { return _this._registry.unlisten('visibilitychange', handler); },\n            registerCapturedInteractionHandler: function (evtType, handler) {\n                if (isBrowser()) {\n                    _this._registry.listen(evtType, handler, document.body, true);\n                }\n            },\n            deregisterCapturedInteractionHandler: function (evtType, handler) {\n                return _this._registry.unlisten(evtType, handler);\n            },\n            registerActionClickHandler: function (handler) {\n                if (_this.actionButton) {\n                    _this._registry.listen('click', handler, _this.actionButton.nativeElement);\n                }\n            },\n            deregisterActionClickHandler: function (handler) { return _this._registry.unlisten('click', handler); },\n            registerTransitionEndHandler: function (handler) {\n                if (isBrowser()) {\n                    _this._registry.listen(getCorrectEventName(window, 'transitionend'), handler, _this._getHostElement());\n                }\n            },\n            deregisterTransitionEndHandler: function (handler) {\n                if (isBrowser()) {\n                    _this._registry.unlisten(getCorrectEventName(window, 'transitionend'), handler);\n                }\n            },\n            notifyShow: function () { return _this.shown.emit(); },\n            notifyHide: function () { return _this.dismissed.emit(); }\n        };\n        this._foundation = new MDCSnackbarFoundation(this._mdcAdapter);\n    }\n    /**\n     * @return {?}\n     */\n    MdcSnackbarComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this._foundation.init();\n        };\n    /**\n     * @return {?}\n     */\n    MdcSnackbarComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._foundation.destroy();\n        };\n    /**\n     * @param {?} dismissOnAction\n     * @return {?}\n     */\n    MdcSnackbarComponent.prototype.setDismissOnAction = /**\n     * @param {?} dismissOnAction\n     * @return {?}\n     */\n        function (dismissOnAction) {\n            this._foundation.setDismissOnAction(dismissOnAction);\n        };\n    /**\n     * @return {?}\n     */\n    MdcSnackbarComponent.prototype.show = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.setDismissOnAction(this.config.dismissOnAction ? true : false);\n            if (this.config.align === 'start') {\n                this._mdcAdapter.addClass('mdc-snackbar--align-start');\n            }\n            if (!this.config.actionHandler && this.data.actionText) {\n                this.config.actionHandler = function () { };\n            }\n            if (!this.data.actionText) {\n                this.config.actionHandler = undefined;\n            }\n            setTimeout(function () {\n                _this._foundation.show(__assign({}, _this.data, _this.config));\n                if (_this.config.focusAction) {\n                    _this._mdcAdapter.setFocus();\n                }\n            }, 40);\n        };\n    /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n    MdcSnackbarComponent.prototype._getHostElement = /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n        function () {\n            return this.elementRef.nativeElement;\n        };\n    return MdcSnackbarComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MdcSnackbarConfig = /** @class */ /*@__PURE__*/ (function () {\n    function MdcSnackbarConfig() {\n        this.timeout = 2750;\n        this.multiline = false;\n        this.actionOnBottom = false;\n        this.align = 'center';\n        this.dismissOnAction = true;\n        this.focusAction = false;\n    }\n    return MdcSnackbarConfig;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MdcSnackbar = /** @class */ /*@__PURE__*/ (function () {\n    function MdcSnackbar(_portalService) {\n        this._portalService = _portalService;\n        /**\n         * Emits whenever the component is destroyed.\n         */\n        this._destroy = new Subject();\n        this._openedSnackbarRef = null;\n    }\n    /**\n     * @return {?}\n     */\n    MdcSnackbar.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._destroy.next();\n            this._destroy.complete();\n            this.dismiss();\n        };\n    /**\n       * Shows a snackbar with a message and an optional action.\n       * @param message The message to show in the snackbar.\n       * @param actionText The label for the snackbar action.\n       * @param config Additional configuration options for the snackbar.\n       */\n    /**\n     * Shows a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} actionText The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    MdcSnackbar.prototype.show = /**\n     * Shows a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} actionText The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n        function (message, actionText, config) {\n            var _this = this;\n            if (actionText === void 0) {\n                actionText = '';\n            }\n            if (this.isShowing()) {\n                this.dismiss();\n            }\n            this._openedSnackbarRef\n                = new MdcSnackbarRef(this._portalService.createComponentRef(MdcSnackbarComponent).instance);\n            this._openedSnackbarRef.componentInstance.data = { message: message, actionText: actionText };\n            this._openedSnackbarRef.componentInstance.config = _applyConfigDefaults(config);\n            this._snackbarSubscription = this._openedSnackbarRef.componentInstance.dismissed\n                .pipe(takeUntil(this._destroy))\n                .subscribe(function () {\n                _this.dismiss();\n            });\n            this._openedSnackbarRef.open();\n            return this._openedSnackbarRef;\n        };\n    /**\n     * @return {?}\n     */\n    MdcSnackbar.prototype.isShowing = /**\n     * @return {?}\n     */\n        function () {\n            return !!this._openedSnackbarRef;\n        };\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    MdcSnackbar.prototype.dismiss = /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n        function () {\n            if (this._openedSnackbarRef) {\n                this._openedSnackbarRef.dismiss();\n                this._portalService.dispose();\n                this._openedSnackbarRef = null;\n            }\n        };\n    return MdcSnackbar;\n}());\n/**\n * Applies default options to the snackbar config.\n * @param {?=} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config) {\n    return __assign({}, new MdcSnackbarConfig(), config);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MdcSnackbarModule = /** @class */ /*@__PURE__*/ (function () {\n    function MdcSnackbarModule() {\n    }\n    return MdcSnackbarModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { MdcSnackbarModule, MdcSnackbarConfig, MdcSnackbarRef, MdcSnackbarComponent, MdcSnackbar };\n",null]}