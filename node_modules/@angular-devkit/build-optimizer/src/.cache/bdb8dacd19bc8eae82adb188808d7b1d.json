{"remainingRequest":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\@angular-mdc\\web\\esm5\\icon.es5.js","dependencies":[{"path":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\@angular-mdc\\web\\esm5\\icon.es5.js","mtime":1556004096892},{"path":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556004112812},{"path":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1556004088045}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright (c) 2018 Dominic Carretto\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE\n */\n/** PURE_IMPORTS_START _angular_core,_angular_mdc_web_common PURE_IMPORTS_END */\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, Renderer2, ViewEncapsulation, NgModule } from '@angular/core';\nimport { toBoolean } from '@angular-mdc/web/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MdcIcon = /** @class */ /*@__PURE__*/ (function () {\n    function MdcIcon(_changeDetectorRef, _renderer, elementRef, ariaHidden) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._renderer = _renderer;\n        this.elementRef = elementRef;\n        this.ariaHidden = ariaHidden;\n        this._defaultFontSetClass = 'material-icons';\n        if (!ariaHidden) {\n            _renderer.setAttribute(elementRef.nativeElement, 'aria-hidden', 'true');\n        }\n    }\n    Object.defineProperty(MdcIcon.prototype, \"fontSet\", {\n        /** Font set that the icon is a part of. */\n        get: /**\n         * Font set that the icon is a part of.\n         * @return {?}\n         */ function () { return this._fontSet; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._fontSet = this._cleanupFontValue(value);\n            this._updateFontIconClasses();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcIcon.prototype, \"fontIcon\", {\n        /** Name of an icon within a font set. */\n        get: /**\n         * Name of an icon within a font set.\n         * @return {?}\n         */ function () { return this._fontIcon; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._fontIcon = value;\n            this._updateFontIconClasses();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcIcon.prototype, \"fontSize\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._fontSize; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.setFontSize(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcIcon.prototype, \"leading\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._leading; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._leading = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcIcon.prototype, \"trailing\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._trailing; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._trailing = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcIcon.prototype, \"clickable\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._clickable; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.setClickable(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdcIcon.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this._updateFontIconClasses();\n        };\n    /**\n     * @return {?}\n     */\n    MdcIcon.prototype._updateFontIconClasses = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ el = this._getHostElement();\n            var /** @type {?} */ fontSetClass = this.fontSet ? this.fontSet : this._getDefaultFontSetClass();\n            if (fontSetClass !== this._previousFontSetClass) {\n                if (this._previousFontSetClass) {\n                    this._renderer.removeClass(el, this._previousFontSetClass);\n                }\n                if (fontSetClass) {\n                    this._renderer.addClass(el, fontSetClass);\n                }\n                this._previousFontSetClass = fontSetClass;\n            }\n            if (this.fontIcon !== this._previousFontIconClass) {\n                if (this._previousFontIconClass) {\n                    this._renderer.removeClass(el, this._previousFontIconClass);\n                }\n                if (this.fontIcon) {\n                    for (var _i = 0, _a = this.fontIcon.split(' '); _i < _a.length; _i++) {\n                        var iconClass = _a[_i];\n                        this._renderer.addClass(el, iconClass);\n                    }\n                }\n                this._previousFontIconClass = this.fontIcon;\n            }\n            if (this.fontSize !== this._previousFontSize) {\n                if (this._previousFontSize) {\n                    this._renderer.removeStyle(el, \"font-size: \" + this.fontSize + \"px\");\n                }\n                if (this.fontSize) {\n                    this._renderer.setStyle(el, 'font-size', this.fontSize + \"px\");\n                }\n                this._previousFontSize = this.fontSize;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    MdcIcon.prototype._getDefaultFontSetClass = /**\n     * @return {?}\n     */\n        function () {\n            return this._defaultFontSetClass;\n        };\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     * @param {?} value\n     * @return {?}\n     */\n    MdcIcon.prototype._cleanupFontValue = /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n        };\n    /** Retrieves the DOM element of the component host. */\n    /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n    MdcIcon.prototype._getHostElement = /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n        function () {\n            return this.elementRef.nativeElement;\n        };\n    /**\n     * @return {?}\n     */\n    MdcIcon.prototype.isLeading = /**\n     * @return {?}\n     */\n        function () {\n            return this.leading;\n        };\n    /**\n     * @return {?}\n     */\n    MdcIcon.prototype.isTrailing = /**\n     * @return {?}\n     */\n        function () {\n            return this.trailing;\n        };\n    /**\n     * @param {?} content\n     * @return {?}\n     */\n    MdcIcon.prototype.setIcon = /**\n     * @param {?} content\n     * @return {?}\n     */\n        function (content) {\n            this.fontIcon ? this.fontIcon = content : this._getHostElement().textContent = content;\n            this._changeDetectorRef.markForCheck();\n        };\n    /**\n     * @return {?}\n     */\n    MdcIcon.prototype.getIcon = /**\n     * @return {?}\n     */\n        function () {\n            return this.fontIcon ? this.fontIcon : this._getHostElement().textContent;\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MdcIcon.prototype.setFontSize = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this._fontSize = value;\n            this._updateFontIconClasses();\n            this._changeDetectorRef.markForCheck();\n        };\n    /**\n     * @param {?} clickable\n     * @return {?}\n     */\n    MdcIcon.prototype.setClickable = /**\n     * @param {?} clickable\n     * @return {?}\n     */\n        function (clickable) {\n            this._clickable = toBoolean(clickable);\n            if (this.clickable) {\n                this._renderer.setAttribute(this._getHostElement(), 'tabindex', '0');\n                this._renderer.addClass(this._getHostElement(), 'ng-mdc-icon--clickable');\n                this._renderer.setAttribute(this._getHostElement(), 'role', 'button');\n            }\n            else {\n                this._renderer.setAttribute(this._getHostElement(), 'tabindex', '-1');\n                this._renderer.removeClass(this._getHostElement(), 'ng-mdc-icon--clickable');\n                this._renderer.removeAttribute(this._getHostElement(), 'role');\n            }\n        };\n    return MdcIcon;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MdcIconModule = /** @class */ /*@__PURE__*/ (function () {\n    function MdcIconModule() {\n    }\n    return MdcIconModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { MdcIconModule, MdcIcon };\n",null]}