{"remainingRequest":"C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\@angular-mdc\\web\\esm5\\line-ripple.es5.js","dependencies":[{"path":"C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\@angular-mdc\\web\\esm5\\line-ripple.es5.js","mtime":1554924123942},{"path":"C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1554924186691},{"path":"C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1554924110461}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright (c) 2018 Dominic Carretto\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE\n */\n/** PURE_IMPORTS_START _angular_core,_angular_mdc_web_common PURE_IMPORTS_END */\nimport { Directive, ElementRef, HostBinding, Renderer2, NgModule } from '@angular/core';\nimport { EventRegistry } from '@angular-mdc/web/common';\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor)\n            descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps)\n        _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps)\n        _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass)\n        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @template A\n */\nvar MDCFoundation = \n/*#__PURE__*/\n/*@__PURE__*/ function () {\n    _createClass(MDCFoundation, null, [{\n            key: \"cssClasses\",\n            /** @return enum{cssClasses} */\n            get: function get() {\n                // Classes extending MDCFoundation should implement this method to return an object which exports every\n                // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}\n                return {};\n            }\n            /** @return enum{strings} */\n        }, {\n            key: \"strings\",\n            get: function get() {\n                // Classes extending MDCFoundation should implement this method to return an object which exports all\n                // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}\n                return {};\n            }\n            /** @return enum{numbers} */\n        }, {\n            key: \"numbers\",\n            get: function get() {\n                // Classes extending MDCFoundation should implement this method to return an object which exports all\n                // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}\n                return {};\n            }\n            /** @return {!Object} */\n        }, {\n            key: \"defaultAdapter\",\n            get: function get() {\n                // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient\n                // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter\n                // validation.\n                return {};\n            }\n            /**\n             * @param {A=} adapter\n             */\n        }]);\n    function MDCFoundation() {\n        var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _classCallCheck(this, MDCFoundation);\n        /** @protected {!A} */\n        this.adapter_ = adapter;\n    }\n    _createClass(MDCFoundation, [{\n            key: \"init\",\n            value: function init() {\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n            }\n        }]);\n    return MDCFoundation;\n}();\n/**\n * @template F\n */\nvar MDCComponent = \n/*#__PURE__*/\n/*@__PURE__*/ function () {\n    _createClass(MDCComponent, null, [{\n            key: \"attachTo\",\n            /**\n             * @param {!Element} root\n             * @return {!MDCComponent}\n             */\n            value: function attachTo(root) {\n                // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and\n                // returns an instantiated component with its root set to that element. Also note that in the cases of\n                // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized\n                // from getDefaultFoundation().\n                return new MDCComponent(root, new MDCFoundation());\n            }\n            /**\n             * @param {!Element} root\n             * @param {F=} foundation\n             * @param {...?} args\n             */\n        }]);\n    function MDCComponent(root) {\n        var foundation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n        _classCallCheck(this, MDCComponent);\n        /** @protected {!Element} */\n        this.root_ = root;\n        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n            args[_key - 2] = arguments[_key];\n        }\n        this.initialize.apply(this, args); // Note that we initialize foundation here and not within the constructor's default param so that\n        // this.root_ is defined and can be used within the foundation class.\n        /** @protected {!F} */\n        this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;\n        this.foundation_.init();\n        this.initialSyncWithDOM();\n    }\n    _createClass(MDCComponent, [{\n            key: \"initialize\",\n            value: function initialize() { } // Subclasses can override this to do any additional setup work that would be considered part of a\n            // \"constructor\". Essentially, it is a hook into the parent constructor before the foundation is\n            // initialized. Any additional arguments besides root and foundation will be passed in here.\n            /**\n             * @return {!F} foundation\n             */\n        }, {\n            key: \"getDefaultFoundation\",\n            value: function getDefaultFoundation() {\n                // Subclasses must override this method to return a properly configured foundation class for the\n                // component.\n                throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' + 'foundation class');\n            }\n        }, {\n            key: \"initialSyncWithDOM\",\n            value: function initialSyncWithDOM() {\n                // object. An example of this would be a form control wrapper that needs to synchronize its internal state\n                // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM\n                // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n                // Subclasses may implement this method to release any resources / deregister any listeners they have\n                // attached. An example of this might be deregistering a resize event from the window object.\n                this.foundation_.destroy();\n            }\n            /**\n             * Wrapper method to add an event listener to the component's root element. This is most useful when\n             * listening for custom events.\n             * @param {string} evtType\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"listen\",\n            value: function listen(evtType, handler) {\n                this.root_.addEventListener(evtType, handler);\n            }\n            /**\n             * Wrapper method to remove an event listener to the component's root element. This is most useful when\n             * unlistening for custom events.\n             * @param {string} evtType\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"unlisten\",\n            value: function unlisten(evtType, handler) {\n                this.root_.removeEventListener(evtType, handler);\n            }\n            /**\n             * Fires a cross-browser-compatible custom event from the component root of the given type,\n             * with the given data.\n             * @param {string} evtType\n             * @param {!Object} evtData\n             * @param {boolean=} shouldBubble\n             */\n        }, {\n            key: \"emit\",\n            value: function emit(evtType, evtData) {\n                var shouldBubble = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                var evt;\n                if (typeof CustomEvent === 'function') {\n                    evt = new CustomEvent(evtType, {\n                        detail: evtData,\n                        bubbles: shouldBubble\n                    });\n                }\n                else {\n                    evt = document.createEvent('CustomEvent');\n                    evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n                }\n                this.root_.dispatchEvent(evt);\n            }\n        }]);\n    return MDCComponent;\n}();\n/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n/**\n * Adapter for MDC TextField Line Ripple.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the line ripple into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nvar MDCLineRippleAdapter = \n/*#__PURE__*/\n/*@__PURE__*/ function () {\n    function MDCLineRippleAdapter() {\n        _classCallCheck(this, MDCLineRippleAdapter);\n    }\n    _createClass(MDCLineRippleAdapter, [{\n            key: \"addClass\",\n            /**\n             * Adds a class to the line ripple element.\n             * @param {string} className\n             */\n            value: function addClass(className) { }\n            /**\n             * Removes a class from the line ripple element.\n             * @param {string} className\n             */\n        }, {\n            key: \"removeClass\",\n            value: function removeClass(className) { }\n            /**\n             * @param {string} className\n             * @return {boolean}\n             */\n        }, {\n            key: \"hasClass\",\n            value: function hasClass(className) { }\n            /**\n             * Sets the style property with propertyName to value on the root element.\n             * @param {string} propertyName\n             * @param {string} value\n             */\n        }, {\n            key: \"setStyle\",\n            value: function setStyle(propertyName, value) { }\n            /**\n             * Registers an event listener on the line ripple element for a given event.\n             * @param {string} evtType\n             * @param {function(!Event): undefined} handler\n             */\n        }, {\n            key: \"registerEventHandler\",\n            value: function registerEventHandler(evtType, handler) { }\n            /**\n             * Deregisters an event listener on the line ripple element for a given event.\n             * @param {string} evtType\n             * @param {function(!Event): undefined} handler\n             */\n        }, {\n            key: \"deregisterEventHandler\",\n            value: function deregisterEventHandler(evtType, handler) { }\n        }]);\n    return MDCLineRippleAdapter;\n}();\n/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** @enum {string} */\nvar cssClasses = {\n    LINE_RIPPLE_ACTIVE: 'mdc-line-ripple--active',\n    LINE_RIPPLE_DEACTIVATING: 'mdc-line-ripple--deactivating'\n};\n/**\n * @extends {MDCFoundation<!MDCLineRippleAdapter>}\n * @final\n */\nvar MDCLineRippleFoundation = \n/*#__PURE__*/\nfunction (_MDCFoundation) {\n    _inherits(MDCLineRippleFoundation, _MDCFoundation);\n    _createClass(MDCLineRippleFoundation, null, [{\n            key: \"cssClasses\",\n            /** @return enum {string} */\n            get: function get() {\n                return cssClasses;\n            }\n            /**\n             * {@see MDCLineRippleAdapter} for typing information on parameters and return\n             * types.\n             * @return {!MDCLineRippleAdapter}\n             */\n        }, {\n            key: \"defaultAdapter\",\n            get: function get() {\n                return (\n                /** @type {!MDCLineRippleAdapter} */\n                {\n                    addClass: function addClass() { },\n                    removeClass: function removeClass() { },\n                    hasClass: function hasClass() { },\n                    setStyle: function setStyle() { },\n                    registerEventHandler: function registerEventHandler() { },\n                    deregisterEventHandler: function deregisterEventHandler() { }\n                });\n            }\n            /**\n             * @param {!MDCLineRippleAdapter=} adapter\n             */\n        }]);\n    function MDCLineRippleFoundation() {\n        var _this;\n        var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] :\n            /** @type {!MDCLineRippleAdapter} */\n            {};\n        _classCallCheck(this, MDCLineRippleFoundation);\n        _this = _possibleConstructorReturn(this, (MDCLineRippleFoundation.__proto__ || Object.getPrototypeOf(MDCLineRippleFoundation)).call(this, Object.assign(MDCLineRippleFoundation.defaultAdapter, adapter)));\n        /** @private {function(!Event): undefined} */\n        _this.transitionEndHandler_ = function (evt) {\n            return _this.handleTransitionEnd(evt);\n        };\n        return _this;\n    }\n    _createClass(MDCLineRippleFoundation, [{\n            key: \"init\",\n            value: function init() {\n                this.adapter_.registerEventHandler('transitionend', this.transitionEndHandler_);\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n                this.adapter_.deregisterEventHandler('transitionend', this.transitionEndHandler_);\n            }\n            /**\n             * Activates the line ripple\n             */\n        }, {\n            key: \"activate\",\n            value: function activate() {\n                this.adapter_.removeClass(cssClasses.LINE_RIPPLE_DEACTIVATING);\n                this.adapter_.addClass(cssClasses.LINE_RIPPLE_ACTIVE);\n            }\n            /**\n             * Sets the center of the ripple animation to the given X coordinate.\n             * @param {number} xCoordinate\n             */\n        }, {\n            key: \"setRippleCenter\",\n            value: function setRippleCenter(xCoordinate) {\n                this.adapter_.setStyle('transform-origin', \"\".concat(xCoordinate, \"px center\"));\n            }\n            /**\n             * Deactivates the line ripple\n             */\n        }, {\n            key: \"deactivate\",\n            value: function deactivate() {\n                this.adapter_.addClass(cssClasses.LINE_RIPPLE_DEACTIVATING);\n            }\n            /**\n             * Handles a transition end event\n             * @param {!Event} evt\n             */\n        }, {\n            key: \"handleTransitionEnd\",\n            value: function handleTransitionEnd(evt) {\n                // Wait for the line ripple to be either transparent or opaque\n                // before emitting the animation end event\n                var isDeactivating = this.adapter_.hasClass(cssClasses.LINE_RIPPLE_DEACTIVATING);\n                if (evt.propertyName === 'opacity') {\n                    if (isDeactivating) {\n                        this.adapter_.removeClass(cssClasses.LINE_RIPPLE_ACTIVE);\n                        this.adapter_.removeClass(cssClasses.LINE_RIPPLE_DEACTIVATING);\n                    }\n                }\n            }\n        }]);\n    return MDCLineRippleFoundation;\n}(MDCFoundation);\n/**\n * @extends {MDCComponent<!MDCLineRippleFoundation>}\n * @final\n */\nvar MDCLineRipple = \n/*#__PURE__*/\nfunction (_MDCComponent) {\n    _inherits(MDCLineRipple, _MDCComponent);\n    function MDCLineRipple() {\n        _classCallCheck(this, MDCLineRipple);\n        return _possibleConstructorReturn(this, (MDCLineRipple.__proto__ || Object.getPrototypeOf(MDCLineRipple)).apply(this, arguments));\n    }\n    _createClass(MDCLineRipple, [{\n            key: \"activate\",\n            /**\n             * Activates the line ripple\n             */\n            value: function activate() {\n                this.foundation_.activate();\n            }\n            /**\n             * Deactivates the line ripple\n             */\n        }, {\n            key: \"deactivate\",\n            value: function deactivate() {\n                this.foundation_.deactivate();\n            }\n            /**\n             * Sets the transform origin given a user's click location. The `rippleCenter` is the\n             * x-coordinate of the middle of the ripple.\n             * @param {number} xCoordinate\n             */\n        }, {\n            key: \"setRippleCenter\",\n            value: function setRippleCenter(xCoordinate) {\n                this.foundation_.setRippleCenter(xCoordinate);\n            }\n            /**\n             * @return {!MDCLineRippleFoundation}\n             */\n        }, {\n            key: \"getDefaultFoundation\",\n            value: function getDefaultFoundation() {\n                var _this = this;\n                return new MDCLineRippleFoundation(\n                /** @type {!MDCLineRippleAdapter} */\n                Object.assign({\n                    addClass: function addClass(className) {\n                        return _this.root_.classList.add(className);\n                    },\n                    removeClass: function removeClass(className) {\n                        return _this.root_.classList.remove(className);\n                    },\n                    hasClass: function hasClass(className) {\n                        return _this.root_.classList.contains(className);\n                    },\n                    setStyle: function setStyle(propertyName, value) {\n                        return _this.root_.style[propertyName] = value;\n                    },\n                    registerEventHandler: function registerEventHandler(evtType, handler) {\n                        return _this.root_.addEventListener(evtType, handler);\n                    },\n                    deregisterEventHandler: function deregisterEventHandler(evtType, handler) {\n                        return _this.root_.removeEventListener(evtType, handler);\n                    }\n                }));\n            }\n        }], [{\n            key: \"attachTo\",\n            /**\n             * @param {!Element} root\n             * @return {!MDCLineRipple}\n             */\n            value: function attachTo(root) {\n                return new MDCLineRipple(root);\n            }\n        }]);\n    return MDCLineRipple;\n}(MDCComponent);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MdcLineRipple = /** @class */ /*@__PURE__*/ (function () {\n    function MdcLineRipple(_renderer, elementRef, _registry) {\n        var _this = this;\n        this._renderer = _renderer;\n        this.elementRef = elementRef;\n        this._registry = _registry;\n        this.isHostClass = true;\n        this._mdcAdapter = {\n            addClass: function (className) { return _this._renderer.addClass(_this._getHostElement(), className); },\n            removeClass: function (className) { return _this._renderer.removeClass(_this._getHostElement(), className); },\n            hasClass: function (className) { return _this._getHostElement().classList.contains(className); },\n            setStyle: function (propertyName, value) { return _this._renderer.setAttribute(_this._getHostElement(), propertyName, value); },\n            registerEventHandler: function (evtType, handler) {\n                return _this._registry.listen(evtType, handler, _this._getHostElement());\n            },\n            deregisterEventHandler: function (evtType, handler) { return _this._registry.unlisten(evtType, handler); },\n        };\n        this.foundation = new MDCLineRippleFoundation(this._mdcAdapter);\n    }\n    /**\n     * @return {?}\n     */\n    MdcLineRipple.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.foundation.init();\n        };\n    /**\n     * @return {?}\n     */\n    MdcLineRipple.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.foundation.destroy();\n        };\n    /**\n     * @return {?}\n     */\n    MdcLineRipple.prototype.destroy = /**\n     * @return {?}\n     */\n        function () {\n            this.foundation.destroy();\n        };\n    /** Activates the line ripple */\n    /**\n     * Activates the line ripple\n     * @return {?}\n     */\n    MdcLineRipple.prototype.activate = /**\n     * Activates the line ripple\n     * @return {?}\n     */\n        function () {\n            this.foundation.activate();\n        };\n    /** Deactivates the line ripple */\n    /**\n     * Deactivates the line ripple\n     * @return {?}\n     */\n    MdcLineRipple.prototype.deactivate = /**\n     * Deactivates the line ripple\n     * @return {?}\n     */\n        function () {\n            this.foundation.deactivate();\n        };\n    /**\n     * Sets the transform origin given a user's click location.\n     * The `rippleCenter` is the x-coordinate of the middle of the ripple.\n    */\n    /**\n     * Sets the transform origin given a user's click location.\n     * The `rippleCenter` is the x-coordinate of the middle of the ripple.\n     * @param {?} xCoordinate\n     * @return {?}\n     */\n    MdcLineRipple.prototype.setRippleCenter = /**\n     * Sets the transform origin given a user's click location.\n     * The `rippleCenter` is the x-coordinate of the middle of the ripple.\n     * @param {?} xCoordinate\n     * @return {?}\n     */\n        function (xCoordinate) {\n            this.foundation.setRippleCenter(xCoordinate);\n        };\n    /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n    MdcLineRipple.prototype._getHostElement = /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n        function () {\n            return this.elementRef.nativeElement;\n        };\n    return MdcLineRipple;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MdcLineRippleModule = /** @class */ /*@__PURE__*/ (function () {\n    function MdcLineRippleModule() {\n    }\n    return MdcLineRippleModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { MdcLineRippleModule, MdcLineRipple };\n",null]}