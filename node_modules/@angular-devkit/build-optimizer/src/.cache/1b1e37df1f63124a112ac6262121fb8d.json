{"remainingRequest":"C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\@angular-mdc\\web\\esm5\\select.es5.js","dependencies":[{"path":"C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\@angular-mdc\\web\\esm5\\select.es5.js","mtime":1554924123942},{"path":"C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1554924186691},{"path":"C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1554924110461}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright (c) 2018 Dominic Carretto\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE\n */\n/** PURE_IMPORTS_START _angular_core,_angular_forms,rxjs_operators,rxjs,_angular_mdc_web_common,_angular_mdc_web_ripple,_angular_mdc_web_floating_label,_angular_mdc_web_line_ripple,_angular_common PURE_IMPORTS_END */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, Input, Output, Renderer2, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { startWith, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { EventRegistry, toBoolean } from '@angular-mdc/web/common';\nimport { MdcRipple } from '@angular-mdc/web/ripple';\nimport { MdcFloatingLabel, MdcFloatingLabelModule } from '@angular-mdc/web/floating-label';\nimport { MdcLineRipple, MdcLineRippleModule } from '@angular-mdc/web/line-ripple';\nimport { CommonModule } from '@angular/common';\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor)\n            descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps)\n        _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps)\n        _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _get(object, property, receiver) {\n    if (object === null)\n        object = Function.prototype;\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n    if (desc === undefined) {\n        var parent = Object.getPrototypeOf(object);\n        if (parent === null) {\n            return undefined;\n        }\n        else {\n            return _get(parent, property, receiver);\n        }\n    }\n    else if (\"value\" in desc) {\n        return desc.value;\n    }\n    else {\n        var getter = desc.get;\n        if (getter === undefined) {\n            return undefined;\n        }\n        return getter.call(receiver);\n    }\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass)\n        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @template A\n */\nvar MDCFoundation = \n/*#__PURE__*/\n/*@__PURE__*/ function () {\n    _createClass(MDCFoundation, null, [{\n            key: \"cssClasses\",\n            /** @return enum{cssClasses} */\n            get: function get() {\n                // Classes extending MDCFoundation should implement this method to return an object which exports every\n                // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}\n                return {};\n            }\n            /** @return enum{strings} */\n        }, {\n            key: \"strings\",\n            get: function get() {\n                // Classes extending MDCFoundation should implement this method to return an object which exports all\n                // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}\n                return {};\n            }\n            /** @return enum{numbers} */\n        }, {\n            key: \"numbers\",\n            get: function get() {\n                // Classes extending MDCFoundation should implement this method to return an object which exports all\n                // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}\n                return {};\n            }\n            /** @return {!Object} */\n        }, {\n            key: \"defaultAdapter\",\n            get: function get() {\n                // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient\n                // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter\n                // validation.\n                return {};\n            }\n            /**\n             * @param {A=} adapter\n             */\n        }]);\n    function MDCFoundation() {\n        var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _classCallCheck(this, MDCFoundation);\n        /** @protected {!A} */\n        this.adapter_ = adapter;\n    }\n    _createClass(MDCFoundation, [{\n            key: \"init\",\n            value: function init() {\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n            }\n        }]);\n    return MDCFoundation;\n}();\n/**\n * @template F\n */\nvar MDCComponent = \n/*#__PURE__*/\n/*@__PURE__*/ function () {\n    _createClass(MDCComponent, null, [{\n            key: \"attachTo\",\n            /**\n             * @param {!Element} root\n             * @return {!MDCComponent}\n             */\n            value: function attachTo(root) {\n                // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and\n                // returns an instantiated component with its root set to that element. Also note that in the cases of\n                // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized\n                // from getDefaultFoundation().\n                return new MDCComponent(root, new MDCFoundation());\n            }\n            /**\n             * @param {!Element} root\n             * @param {F=} foundation\n             * @param {...?} args\n             */\n        }]);\n    function MDCComponent(root) {\n        var foundation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n        _classCallCheck(this, MDCComponent);\n        /** @protected {!Element} */\n        this.root_ = root;\n        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n            args[_key - 2] = arguments[_key];\n        }\n        this.initialize.apply(this, args); // Note that we initialize foundation here and not within the constructor's default param so that\n        // this.root_ is defined and can be used within the foundation class.\n        /** @protected {!F} */\n        this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;\n        this.foundation_.init();\n        this.initialSyncWithDOM();\n    }\n    _createClass(MDCComponent, [{\n            key: \"initialize\",\n            value: function initialize() { } // Subclasses can override this to do any additional setup work that would be considered part of a\n            // \"constructor\". Essentially, it is a hook into the parent constructor before the foundation is\n            // initialized. Any additional arguments besides root and foundation will be passed in here.\n            /**\n             * @return {!F} foundation\n             */\n        }, {\n            key: \"getDefaultFoundation\",\n            value: function getDefaultFoundation() {\n                // Subclasses must override this method to return a properly configured foundation class for the\n                // component.\n                throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' + 'foundation class');\n            }\n        }, {\n            key: \"initialSyncWithDOM\",\n            value: function initialSyncWithDOM() {\n                // object. An example of this would be a form control wrapper that needs to synchronize its internal state\n                // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM\n                // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n                // Subclasses may implement this method to release any resources / deregister any listeners they have\n                // attached. An example of this might be deregistering a resize event from the window object.\n                this.foundation_.destroy();\n            }\n            /**\n             * Wrapper method to add an event listener to the component's root element. This is most useful when\n             * listening for custom events.\n             * @param {string} evtType\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"listen\",\n            value: function listen(evtType, handler) {\n                this.root_.addEventListener(evtType, handler);\n            }\n            /**\n             * Wrapper method to remove an event listener to the component's root element. This is most useful when\n             * unlistening for custom events.\n             * @param {string} evtType\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"unlisten\",\n            value: function unlisten(evtType, handler) {\n                this.root_.removeEventListener(evtType, handler);\n            }\n            /**\n             * Fires a cross-browser-compatible custom event from the component root of the given type,\n             * with the given data.\n             * @param {string} evtType\n             * @param {!Object} evtData\n             * @param {boolean=} shouldBubble\n             */\n        }, {\n            key: \"emit\",\n            value: function emit(evtType, evtData) {\n                var shouldBubble = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                var evt;\n                if (typeof CustomEvent === 'function') {\n                    evt = new CustomEvent(evtType, {\n                        detail: evtData,\n                        bubbles: shouldBubble\n                    });\n                }\n                else {\n                    evt = document.createEvent('CustomEvent');\n                    evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n                }\n                this.root_.dispatchEvent(evt);\n            }\n        }]);\n    return MDCComponent;\n}();\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n/**\n * Adapter for MDC Floating Label.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the floating label into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nvar MDCFloatingLabelAdapter = \n/*#__PURE__*/\n/*@__PURE__*/ function () {\n    function MDCFloatingLabelAdapter() {\n        _classCallCheck(this, MDCFloatingLabelAdapter);\n    }\n    _createClass(MDCFloatingLabelAdapter, [{\n            key: \"addClass\",\n            /**\n             * Adds a class to the label element.\n             * @param {string} className\n             */\n            value: function addClass(className) { }\n            /**\n             * Removes a class from the label element.\n             * @param {string} className\n             */\n        }, {\n            key: \"removeClass\",\n            value: function removeClass(className) { }\n            /**\n             * Returns the width of the label element.\n             * @return {number}\n             */\n        }, {\n            key: \"getWidth\",\n            value: function getWidth() { }\n            /**\n             * Registers an event listener on the root element for a given event.\n             * @param {string} evtType\n             * @param {function(!Event): undefined} handler\n             */\n        }, {\n            key: \"registerInteractionHandler\",\n            value: function registerInteractionHandler(evtType, handler) { }\n            /**\n             * Deregisters an event listener on the root element for a given event.\n             * @param {string} evtType\n             * @param {function(!Event): undefined} handler\n             */\n        }, {\n            key: \"deregisterInteractionHandler\",\n            value: function deregisterInteractionHandler(evtType, handler) { }\n        }]);\n    return MDCFloatingLabelAdapter;\n}();\n/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** @enum {string} */\nvar cssClasses = {\n    LABEL_FLOAT_ABOVE: 'mdc-floating-label--float-above',\n    LABEL_SHAKE: 'mdc-floating-label--shake'\n};\n/**\n * @extends {MDCFoundation<!MDCFloatingLabelAdapter>}\n * @final\n */\nvar MDCFloatingLabelFoundation = \n/*#__PURE__*/\nfunction (_MDCFoundation) {\n    _inherits(MDCFloatingLabelFoundation, _MDCFoundation);\n    _createClass(MDCFloatingLabelFoundation, null, [{\n            key: \"cssClasses\",\n            /** @return enum {string} */\n            get: function get() {\n                return cssClasses;\n            }\n            /**\n             * {@see MDCFloatingLabelAdapter} for typing information on parameters and return\n             * types.\n             * @return {!MDCFloatingLabelAdapter}\n             */\n        }, {\n            key: \"defaultAdapter\",\n            get: function get() {\n                return (\n                /** @type {!MDCFloatingLabelAdapter} */\n                {\n                    addClass: function addClass() { },\n                    removeClass: function removeClass() { },\n                    getWidth: function getWidth() { },\n                    registerInteractionHandler: function registerInteractionHandler() { },\n                    deregisterInteractionHandler: function deregisterInteractionHandler() { }\n                });\n            }\n            /**\n             * @param {!MDCFloatingLabelAdapter} adapter\n             */\n        }]);\n    function MDCFloatingLabelFoundation(adapter) {\n        var _this;\n        _classCallCheck(this, MDCFloatingLabelFoundation);\n        _this = _possibleConstructorReturn(this, (MDCFloatingLabelFoundation.__proto__ || Object.getPrototypeOf(MDCFloatingLabelFoundation)).call(this, Object.assign(MDCFloatingLabelFoundation.defaultAdapter, adapter)));\n        /** @private {function(!Event): undefined} */\n        _this.shakeAnimationEndHandler_ = function () {\n            return _this.handleShakeAnimationEnd_();\n        };\n        return _this;\n    }\n    _createClass(MDCFloatingLabelFoundation, [{\n            key: \"init\",\n            value: function init() {\n                this.adapter_.registerInteractionHandler('animationend', this.shakeAnimationEndHandler_);\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n                this.adapter_.deregisterInteractionHandler('animationend', this.shakeAnimationEndHandler_);\n            }\n            /**\n             * Returns the width of the label element.\n             * @return {number}\n             */\n        }, {\n            key: \"getWidth\",\n            value: function getWidth() {\n                return this.adapter_.getWidth();\n            }\n            /**\n             * Styles the label to produce the label shake for errors.\n             * @param {boolean} shouldShake adds shake class if true,\n             * otherwise removes shake class.\n             */\n        }, {\n            key: \"shake\",\n            value: function shake(shouldShake) {\n                var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;\n                if (shouldShake) {\n                    this.adapter_.addClass(LABEL_SHAKE);\n                }\n                else {\n                    this.adapter_.removeClass(LABEL_SHAKE);\n                }\n            }\n            /**\n             * Styles the label to float or dock.\n             * @param {boolean} shouldFloat adds float class if true, otherwise remove\n             * float and shake class to dock label.\n             */\n        }, {\n            key: \"float\",\n            value: function float(shouldFloat) {\n                var _MDCFloatingLabelFoun = MDCFloatingLabelFoundation.cssClasses, LABEL_FLOAT_ABOVE = _MDCFloatingLabelFoun.LABEL_FLOAT_ABOVE, LABEL_SHAKE = _MDCFloatingLabelFoun.LABEL_SHAKE;\n                if (shouldFloat) {\n                    this.adapter_.addClass(LABEL_FLOAT_ABOVE);\n                }\n                else {\n                    this.adapter_.removeClass(LABEL_FLOAT_ABOVE);\n                    this.adapter_.removeClass(LABEL_SHAKE);\n                }\n            }\n            /**\n             * Handles an interaction event on the root element.\n             */\n        }, {\n            key: \"handleShakeAnimationEnd_\",\n            value: function handleShakeAnimationEnd_() {\n                var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;\n                this.adapter_.removeClass(LABEL_SHAKE);\n            }\n        }]);\n    return MDCFloatingLabelFoundation;\n}(MDCFoundation);\n/**\n * @extends {MDCComponent<!MDCFloatingLabelFoundation>}\n * @final\n */\nvar MDCFloatingLabel = \n/*#__PURE__*/\nfunction (_MDCComponent) {\n    _inherits(MDCFloatingLabel, _MDCComponent);\n    function MDCFloatingLabel() {\n        _classCallCheck(this, MDCFloatingLabel);\n        return _possibleConstructorReturn(this, (MDCFloatingLabel.__proto__ || Object.getPrototypeOf(MDCFloatingLabel)).apply(this, arguments));\n    }\n    _createClass(MDCFloatingLabel, [{\n            key: \"shake\",\n            /**\n             * Styles the label to produce the label shake for errors.\n             * @param {boolean} shouldShake styles the label to shake by adding shake class\n             * if true, otherwise will stop shaking by removing shake class.\n             */\n            value: function shake(shouldShake) {\n                this.foundation_.shake(shouldShake);\n            }\n            /**\n             * Styles label to float/dock.\n             * @param {boolean} shouldFloat styles the label to float by adding float class\n             * if true, otherwise docks the label by removing the float class.\n             */\n        }, {\n            key: \"float\",\n            value: function float(shouldFloat) {\n                this.foundation_.float(shouldFloat);\n            }\n            /**\n             * @return {number}\n             */\n        }, {\n            key: \"getWidth\",\n            value: function getWidth() {\n                return this.foundation_.getWidth();\n            }\n            /**\n             * @return {!MDCFloatingLabelFoundation}\n             */\n        }, {\n            key: \"getDefaultFoundation\",\n            value: function getDefaultFoundation() {\n                var _this = this;\n                return new MDCFloatingLabelFoundation({\n                    addClass: function addClass(className) {\n                        return _this.root_.classList.add(className);\n                    },\n                    removeClass: function removeClass(className) {\n                        return _this.root_.classList.remove(className);\n                    },\n                    getWidth: function getWidth() {\n                        return _this.root_.offsetWidth;\n                    },\n                    registerInteractionHandler: function registerInteractionHandler(evtType, handler) {\n                        return _this.root_.addEventListener(evtType, handler);\n                    },\n                    deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {\n                        return _this.root_.removeEventListener(evtType, handler);\n                    }\n                });\n            }\n        }], [{\n            key: \"attachTo\",\n            /**\n             * @param {!Element} root\n             * @return {!MDCFloatingLabel}\n             */\n            value: function attachTo(root) {\n                return new MDCFloatingLabel(root);\n            }\n        }]);\n    return MDCFloatingLabel;\n}(MDCComponent);\n/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n/**\n * Adapter for MDC TextField Line Ripple.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the line ripple into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nvar MDCLineRippleAdapter = \n/*#__PURE__*/\n/*@__PURE__*/ function () {\n    function MDCLineRippleAdapter() {\n        _classCallCheck(this, MDCLineRippleAdapter);\n    }\n    _createClass(MDCLineRippleAdapter, [{\n            key: \"addClass\",\n            /**\n             * Adds a class to the line ripple element.\n             * @param {string} className\n             */\n            value: function addClass(className) { }\n            /**\n             * Removes a class from the line ripple element.\n             * @param {string} className\n             */\n        }, {\n            key: \"removeClass\",\n            value: function removeClass(className) { }\n            /**\n             * @param {string} className\n             * @return {boolean}\n             */\n        }, {\n            key: \"hasClass\",\n            value: function hasClass(className) { }\n            /**\n             * Sets the style property with propertyName to value on the root element.\n             * @param {string} propertyName\n             * @param {string} value\n             */\n        }, {\n            key: \"setStyle\",\n            value: function setStyle(propertyName, value) { }\n            /**\n             * Registers an event listener on the line ripple element for a given event.\n             * @param {string} evtType\n             * @param {function(!Event): undefined} handler\n             */\n        }, {\n            key: \"registerEventHandler\",\n            value: function registerEventHandler(evtType, handler) { }\n            /**\n             * Deregisters an event listener on the line ripple element for a given event.\n             * @param {string} evtType\n             * @param {function(!Event): undefined} handler\n             */\n        }, {\n            key: \"deregisterEventHandler\",\n            value: function deregisterEventHandler(evtType, handler) { }\n        }]);\n    return MDCLineRippleAdapter;\n}();\n/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** @enum {string} */\nvar cssClasses$1 = {\n    LINE_RIPPLE_ACTIVE: 'mdc-line-ripple--active',\n    LINE_RIPPLE_DEACTIVATING: 'mdc-line-ripple--deactivating'\n};\n/**\n * @extends {MDCFoundation<!MDCLineRippleAdapter>}\n * @final\n */\nvar MDCLineRippleFoundation = \n/*#__PURE__*/\nfunction (_MDCFoundation) {\n    _inherits(MDCLineRippleFoundation, _MDCFoundation);\n    _createClass(MDCLineRippleFoundation, null, [{\n            key: \"cssClasses\",\n            /** @return enum {string} */\n            get: function get() {\n                return cssClasses$1;\n            }\n            /**\n             * {@see MDCLineRippleAdapter} for typing information on parameters and return\n             * types.\n             * @return {!MDCLineRippleAdapter}\n             */\n        }, {\n            key: \"defaultAdapter\",\n            get: function get() {\n                return (\n                /** @type {!MDCLineRippleAdapter} */\n                {\n                    addClass: function addClass() { },\n                    removeClass: function removeClass() { },\n                    hasClass: function hasClass() { },\n                    setStyle: function setStyle() { },\n                    registerEventHandler: function registerEventHandler() { },\n                    deregisterEventHandler: function deregisterEventHandler() { }\n                });\n            }\n            /**\n             * @param {!MDCLineRippleAdapter=} adapter\n             */\n        }]);\n    function MDCLineRippleFoundation() {\n        var _this;\n        var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] :\n            /** @type {!MDCLineRippleAdapter} */\n            {};\n        _classCallCheck(this, MDCLineRippleFoundation);\n        _this = _possibleConstructorReturn(this, (MDCLineRippleFoundation.__proto__ || Object.getPrototypeOf(MDCLineRippleFoundation)).call(this, Object.assign(MDCLineRippleFoundation.defaultAdapter, adapter)));\n        /** @private {function(!Event): undefined} */\n        _this.transitionEndHandler_ = function (evt) {\n            return _this.handleTransitionEnd(evt);\n        };\n        return _this;\n    }\n    _createClass(MDCLineRippleFoundation, [{\n            key: \"init\",\n            value: function init() {\n                this.adapter_.registerEventHandler('transitionend', this.transitionEndHandler_);\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n                this.adapter_.deregisterEventHandler('transitionend', this.transitionEndHandler_);\n            }\n            /**\n             * Activates the line ripple\n             */\n        }, {\n            key: \"activate\",\n            value: function activate() {\n                this.adapter_.removeClass(cssClasses$1.LINE_RIPPLE_DEACTIVATING);\n                this.adapter_.addClass(cssClasses$1.LINE_RIPPLE_ACTIVE);\n            }\n            /**\n             * Sets the center of the ripple animation to the given X coordinate.\n             * @param {number} xCoordinate\n             */\n        }, {\n            key: \"setRippleCenter\",\n            value: function setRippleCenter(xCoordinate) {\n                this.adapter_.setStyle('transform-origin', \"\".concat(xCoordinate, \"px center\"));\n            }\n            /**\n             * Deactivates the line ripple\n             */\n        }, {\n            key: \"deactivate\",\n            value: function deactivate() {\n                this.adapter_.addClass(cssClasses$1.LINE_RIPPLE_DEACTIVATING);\n            }\n            /**\n             * Handles a transition end event\n             * @param {!Event} evt\n             */\n        }, {\n            key: \"handleTransitionEnd\",\n            value: function handleTransitionEnd(evt) {\n                // Wait for the line ripple to be either transparent or opaque\n                // before emitting the animation end event\n                var isDeactivating = this.adapter_.hasClass(cssClasses$1.LINE_RIPPLE_DEACTIVATING);\n                if (evt.propertyName === 'opacity') {\n                    if (isDeactivating) {\n                        this.adapter_.removeClass(cssClasses$1.LINE_RIPPLE_ACTIVE);\n                        this.adapter_.removeClass(cssClasses$1.LINE_RIPPLE_DEACTIVATING);\n                    }\n                }\n            }\n        }]);\n    return MDCLineRippleFoundation;\n}(MDCFoundation);\n/**\n * @extends {MDCComponent<!MDCLineRippleFoundation>}\n * @final\n */\nvar MDCLineRipple = \n/*#__PURE__*/\nfunction (_MDCComponent) {\n    _inherits(MDCLineRipple, _MDCComponent);\n    function MDCLineRipple() {\n        _classCallCheck(this, MDCLineRipple);\n        return _possibleConstructorReturn(this, (MDCLineRipple.__proto__ || Object.getPrototypeOf(MDCLineRipple)).apply(this, arguments));\n    }\n    _createClass(MDCLineRipple, [{\n            key: \"activate\",\n            /**\n             * Activates the line ripple\n             */\n            value: function activate() {\n                this.foundation_.activate();\n            }\n            /**\n             * Deactivates the line ripple\n             */\n        }, {\n            key: \"deactivate\",\n            value: function deactivate() {\n                this.foundation_.deactivate();\n            }\n            /**\n             * Sets the transform origin given a user's click location. The `rippleCenter` is the\n             * x-coordinate of the middle of the ripple.\n             * @param {number} xCoordinate\n             */\n        }, {\n            key: \"setRippleCenter\",\n            value: function setRippleCenter(xCoordinate) {\n                this.foundation_.setRippleCenter(xCoordinate);\n            }\n            /**\n             * @return {!MDCLineRippleFoundation}\n             */\n        }, {\n            key: \"getDefaultFoundation\",\n            value: function getDefaultFoundation() {\n                var _this = this;\n                return new MDCLineRippleFoundation(\n                /** @type {!MDCLineRippleAdapter} */\n                Object.assign({\n                    addClass: function addClass(className) {\n                        return _this.root_.classList.add(className);\n                    },\n                    removeClass: function removeClass(className) {\n                        return _this.root_.classList.remove(className);\n                    },\n                    hasClass: function hasClass(className) {\n                        return _this.root_.classList.contains(className);\n                    },\n                    setStyle: function setStyle(propertyName, value) {\n                        return _this.root_.style[propertyName] = value;\n                    },\n                    registerEventHandler: function registerEventHandler(evtType, handler) {\n                        return _this.root_.addEventListener(evtType, handler);\n                    },\n                    deregisterEventHandler: function deregisterEventHandler(evtType, handler) {\n                        return _this.root_.removeEventListener(evtType, handler);\n                    }\n                }));\n            }\n        }], [{\n            key: \"attachTo\",\n            /**\n             * @param {!Element} root\n             * @return {!MDCLineRipple}\n             */\n            value: function attachTo(root) {\n                return new MDCLineRipple(root);\n            }\n        }]);\n    return MDCLineRipple;\n}(MDCComponent);\n/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n/**\n * Adapter for MDC Ripple. Provides an interface for managing\n * - classes\n * - dom\n * - CSS variables\n * - position\n * - dimensions\n * - scroll position\n * - event handlers\n * - unbounded, active and disabled states\n *\n * Additionally, provides type information for the adapter to the Closure\n * compiler.\n *\n * Implement this adapter for your framework of choice to delegate updates to\n * the component in your framework of choice. See architecture documentation\n * for more details.\n * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md\n *\n * @record\n */\nvar MDCRippleAdapter = \n/*#__PURE__*/\n/*@__PURE__*/ function () {\n    function MDCRippleAdapter() {\n        _classCallCheck(this, MDCRippleAdapter);\n    }\n    _createClass(MDCRippleAdapter, [{\n            key: \"browserSupportsCssVars\",\n            /** @return {boolean} */\n            value: function browserSupportsCssVars() { }\n            /** @return {boolean} */\n        }, {\n            key: \"isUnbounded\",\n            value: function isUnbounded() { }\n            /** @return {boolean} */\n        }, {\n            key: \"isSurfaceActive\",\n            value: function isSurfaceActive() { }\n            /** @return {boolean} */\n        }, {\n            key: \"isSurfaceDisabled\",\n            value: function isSurfaceDisabled() { }\n            /** @param {string} className */\n        }, {\n            key: \"addClass\",\n            value: function addClass(className) { }\n            /** @param {string} className */\n        }, {\n            key: \"removeClass\",\n            value: function removeClass(className) { }\n            /** @param {!EventTarget} target */\n        }, {\n            key: \"containsEventTarget\",\n            value: function containsEventTarget(target) { }\n            /**\n             * @param {string} evtType\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"registerInteractionHandler\",\n            value: function registerInteractionHandler(evtType, handler) { }\n            /**\n             * @param {string} evtType\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"deregisterInteractionHandler\",\n            value: function deregisterInteractionHandler(evtType, handler) { }\n            /**\n             * @param {string} evtType\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"registerDocumentInteractionHandler\",\n            value: function registerDocumentInteractionHandler(evtType, handler) { }\n            /**\n             * @param {string} evtType\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"deregisterDocumentInteractionHandler\",\n            value: function deregisterDocumentInteractionHandler(evtType, handler) { }\n            /**\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"registerResizeHandler\",\n            value: function registerResizeHandler(handler) { }\n            /**\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"deregisterResizeHandler\",\n            value: function deregisterResizeHandler(handler) { }\n            /**\n             * @param {string} varName\n             * @param {?number|string} value\n             */\n        }, {\n            key: \"updateCssVariable\",\n            value: function updateCssVariable(varName, value) { }\n            /** @return {!ClientRect} */\n        }, {\n            key: \"computeBoundingRect\",\n            value: function computeBoundingRect() { }\n            /** @return {{x: number, y: number}} */\n        }, {\n            key: \"getWindowPageOffset\",\n            value: function getWindowPageOffset() { }\n        }]);\n    return MDCRippleAdapter;\n}();\n/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar cssClasses$2 = {\n    // Ripple is a special case where the \"root\" component is really a \"mixin\" of sorts,\n    // given that it's an 'upgrade' to an existing component. That being said it is the root\n    // CSS class that all other CSS classes derive from.\n    ROOT: 'mdc-ripple-upgraded',\n    UNBOUNDED: 'mdc-ripple-upgraded--unbounded',\n    BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',\n    FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',\n    FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation'\n};\nvar strings = {\n    VAR_LEFT: '--mdc-ripple-left',\n    VAR_TOP: '--mdc-ripple-top',\n    VAR_FG_SIZE: '--mdc-ripple-fg-size',\n    VAR_FG_SCALE: '--mdc-ripple-fg-scale',\n    VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',\n    VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end'\n};\nvar numbers = {\n    PADDING: 10,\n    INITIAL_ORIGIN_SCALE: 0.6,\n    DEACTIVATION_TIMEOUT_MS: 225,\n    // Corresponds to $mdc-ripple-translate-duration (i.e. activation animation duration)\n    FG_DEACTIVATION_MS: 150,\n    // Corresponds to $mdc-ripple-fade-out-duration (i.e. deactivation animation duration)\n    TAP_DELAY_MS: 300 // Delay between touch and simulated mouse events on touch devices\n};\n/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Stores result from supportsCssVariables to avoid redundant processing to detect CSS custom variable support.\n * @private {boolean|undefined}\n */\nvar supportsCssVariables_;\n/**\n * Stores result from applyPassive to avoid redundant processing to detect passive event listener support.\n * @private {boolean|undefined}\n */\nvar supportsPassive_;\n/**\n * @param {!Window} windowObj\n * @return {boolean}\n */\nfunction detectEdgePseudoVarBug(windowObj) {\n    // Detect versions of Edge with buggy var() support\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11495448/\n    var document = windowObj.document;\n    var node = document.createElement('div');\n    node.className = 'mdc-ripple-surface--test-edge-var-bug';\n    document.body.appendChild(node); // The bug exists if ::before style ends up propagating to the parent element.\n    // Additionally, getComputedStyle returns null in iframes with display: \"none\" in Firefox,\n    // but Firefox is known to support CSS custom properties correctly.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    var computedStyle = windowObj.getComputedStyle(node);\n    var hasPseudoVarBug = computedStyle !== null && computedStyle.borderTopStyle === 'solid';\n    node.remove();\n    return hasPseudoVarBug;\n}\n/**\n * @param {!Window} windowObj\n * @param {boolean=} forceRefresh\n * @return {boolean|undefined}\n */\nfunction supportsCssVariables(windowObj) {\n    var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var supportsCssVariables = supportsCssVariables_;\n    if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {\n        return supportsCssVariables;\n    }\n    var supportsFunctionPresent = windowObj.CSS && typeof windowObj.CSS.supports === 'function';\n    if (!supportsFunctionPresent) {\n        return;\n    }\n    var explicitlySupportsCssVars = windowObj.CSS.supports('--css-vars', 'yes'); // See: https://bugs.webkit.org/show_bug.cgi?id=154669\n    // See: README section on Safari\n    var weAreFeatureDetectingSafari10plus = windowObj.CSS.supports('(--css-vars: yes)') && windowObj.CSS.supports('color', '#00000000');\n    if (explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus) {\n        supportsCssVariables = !detectEdgePseudoVarBug(windowObj);\n    }\n    else {\n        supportsCssVariables = false;\n    }\n    if (!forceRefresh) {\n        supportsCssVariables_ = supportsCssVariables;\n    }\n    return supportsCssVariables;\n} //\n/**\n * Determine whether the current browser supports passive event listeners, and if so, use them.\n * @param {!Window=} globalObj\n * @param {boolean=} forceRefresh\n * @return {boolean|{passive: boolean}}\n */\nfunction applyPassive() {\n    var globalObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;\n    var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (supportsPassive_ === undefined || forceRefresh) {\n        var isSupported = false;\n        try {\n            globalObj.document.addEventListener('test', null, {\n                get passive() {\n                    isSupported = true;\n                }\n            });\n        }\n        catch (e) { }\n        supportsPassive_ = isSupported;\n    }\n    return supportsPassive_ ? {\n        passive: true\n    } : false;\n}\n/**\n * @param {!Object} HTMLElementPrototype\n * @return {!Array<string>}\n */\nfunction getMatchesProperty(HTMLElementPrototype) {\n    return ['webkitMatchesSelector', 'msMatchesSelector', 'matches'].filter(function (p) {\n        return p in HTMLElementPrototype;\n    }).pop();\n}\n/**\n * @param {!Event} ev\n * @param {{x: number, y: number}} pageOffset\n * @param {!ClientRect} clientRect\n * @return {{x: number, y: number}}\n */\nfunction getNormalizedEventCoords(ev, pageOffset, clientRect) {\n    var x = pageOffset.x, y = pageOffset.y;\n    var documentX = x + clientRect.left;\n    var documentY = y + clientRect.top;\n    var normalizedX;\n    var normalizedY; // Determine touch point relative to the ripple container.\n    if (ev.type === 'touchstart') {\n        normalizedX = ev.changedTouches[0].pageX - documentX;\n        normalizedY = ev.changedTouches[0].pageY - documentY;\n    }\n    else {\n        normalizedX = ev.pageX - documentX;\n        normalizedY = ev.pageY - documentY;\n    }\n    return {\n        x: normalizedX,\n        y: normalizedY\n    };\n}\nvar ACTIVATION_EVENT_TYPES = ['touchstart', 'pointerdown', 'mousedown', 'keydown']; // Deactivation events registered on documentElement when a pointer-related down event occurs\nvar POINTER_DEACTIVATION_EVENT_TYPES = ['touchend', 'pointerup', 'mouseup']; // Tracks activations that have occurred on the current frame, to avoid simultaneous nested activations\n/** @type {!Array<!EventTarget>} */\nvar activatedTargets = [];\n/**\n * @extends {MDCFoundation<!MDCRippleAdapter>}\n */\nvar MDCRippleFoundation = \n/*#__PURE__*/\nfunction (_MDCFoundation) {\n    _inherits(MDCRippleFoundation, _MDCFoundation);\n    _createClass(MDCRippleFoundation, null, [{\n            key: \"cssClasses\",\n            get: function get() {\n                return cssClasses$2;\n            }\n        }, {\n            key: \"strings\",\n            get: function get() {\n                return strings;\n            }\n        }, {\n            key: \"numbers\",\n            get: function get() {\n                return numbers;\n            }\n        }, {\n            key: \"defaultAdapter\",\n            get: function get() {\n                return {\n                    browserSupportsCssVars: function browserSupportsCssVars() { },\n                    isUnbounded: function isUnbounded() { },\n                    isSurfaceActive: function isSurfaceActive() { },\n                    isSurfaceDisabled: function isSurfaceDisabled() { },\n                    addClass: function addClass() { },\n                    removeClass: function removeClass() { },\n                    containsEventTarget: function containsEventTarget() { },\n                    registerInteractionHandler: function registerInteractionHandler() { },\n                    deregisterInteractionHandler: function deregisterInteractionHandler() { },\n                    registerDocumentInteractionHandler: function registerDocumentInteractionHandler() { },\n                    deregisterDocumentInteractionHandler: function deregisterDocumentInteractionHandler() { },\n                    registerResizeHandler: function registerResizeHandler() { },\n                    deregisterResizeHandler: function deregisterResizeHandler() { },\n                    updateCssVariable: function updateCssVariable() { },\n                    computeBoundingRect: function computeBoundingRect() { },\n                    getWindowPageOffset: function getWindowPageOffset() { }\n                };\n            }\n        }]);\n    function MDCRippleFoundation(adapter) {\n        var _this;\n        _classCallCheck(this, MDCRippleFoundation);\n        _this = _possibleConstructorReturn(this, (MDCRippleFoundation.__proto__ || Object.getPrototypeOf(MDCRippleFoundation)).call(this, Object.assign(MDCRippleFoundation.defaultAdapter, adapter)));\n        /** @private {number} */\n        _this.layoutFrame_ = 0;\n        /** @private {!ClientRect} */\n        _this.frame_ =\n            /** @type {!ClientRect} */\n            {\n                width: 0,\n                height: 0\n            };\n        /** @private {!ActivationStateType} */\n        _this.activationState_ = _this.defaultActivationState_();\n        /** @private {number} */\n        _this.initialSize_ = 0;\n        /** @private {number} */\n        _this.maxRadius_ = 0;\n        /** @private {function(!Event)} */\n        _this.activateHandler_ = function (e) {\n            return _this.activate_(e);\n        };\n        /** @private {function(!Event)} */\n        _this.deactivateHandler_ = function (e) {\n            return _this.deactivate_(e);\n        };\n        /** @private {function(?Event=)} */\n        _this.focusHandler_ = function () {\n            return requestAnimationFrame(function () {\n                return _this.adapter_.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);\n            });\n        };\n        /** @private {function(?Event=)} */\n        _this.blurHandler_ = function () {\n            return requestAnimationFrame(function () {\n                return _this.adapter_.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);\n            });\n        };\n        /** @private {!Function} */\n        _this.resizeHandler_ = function () {\n            return _this.layout();\n        };\n        /** @private {{left: number, top:number}} */\n        _this.unboundedCoords_ = {\n            left: 0,\n            top: 0\n        };\n        /** @private {number} */\n        _this.fgScale_ = 0;\n        /** @private {number} */\n        _this.activationTimer_ = 0;\n        /** @private {number} */\n        _this.fgDeactivationRemovalTimer_ = 0;\n        /** @private {boolean} */\n        _this.activationAnimationHasEnded_ = false;\n        /** @private {!Function} */\n        _this.activationTimerCallback_ = function () {\n            _this.activationAnimationHasEnded_ = true;\n            _this.runDeactivationUXLogicIfReady_();\n        };\n        /** @private {?Event} */\n        _this.previousActivationEvent_ = null;\n        return _this;\n    }\n    /**\n     * We compute this property so that we are not querying information about the client\n     * until the point in time where the foundation requests it. This prevents scenarios where\n     * client-side feature-detection may happen too early, such as when components are rendered on the server\n     * and then initialized at mount time on the client.\n     * @return {boolean}\n     * @private\n     */\n    _createClass(MDCRippleFoundation, [{\n            key: \"isSupported_\",\n            value: function isSupported_() {\n                return this.adapter_.browserSupportsCssVars();\n            }\n            /**\n             * @return {!ActivationStateType}\n             */\n        }, {\n            key: \"defaultActivationState_\",\n            value: function defaultActivationState_() {\n                return {\n                    isActivated: false,\n                    hasDeactivationUXRun: false,\n                    wasActivatedByPointer: false,\n                    wasElementMadeActive: false,\n                    activationEvent: null,\n                    isProgrammatic: false\n                };\n            }\n        }, {\n            key: \"init\",\n            value: function init() {\n                var _this2 = this;\n                if (!this.isSupported_()) {\n                    return;\n                }\n                this.registerRootHandlers_();\n                var _MDCRippleFoundation$ = MDCRippleFoundation.cssClasses, ROOT = _MDCRippleFoundation$.ROOT, UNBOUNDED = _MDCRippleFoundation$.UNBOUNDED;\n                requestAnimationFrame(function () {\n                    _this2.adapter_.addClass(ROOT);\n                    if (_this2.adapter_.isUnbounded()) {\n                        _this2.adapter_.addClass(UNBOUNDED); // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple\n                        _this2.layoutInternal_();\n                    }\n                });\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n                var _this3 = this;\n                if (!this.isSupported_()) {\n                    return;\n                }\n                if (this.activationTimer_) {\n                    clearTimeout(this.activationTimer_);\n                    this.activationTimer_ = 0;\n                    var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;\n                    this.adapter_.removeClass(FG_ACTIVATION);\n                }\n                this.deregisterRootHandlers_();\n                this.deregisterDeactivationHandlers_();\n                var _MDCRippleFoundation$2 = MDCRippleFoundation.cssClasses, ROOT = _MDCRippleFoundation$2.ROOT, UNBOUNDED = _MDCRippleFoundation$2.UNBOUNDED;\n                requestAnimationFrame(function () {\n                    _this3.adapter_.removeClass(ROOT);\n                    _this3.adapter_.removeClass(UNBOUNDED);\n                    _this3.removeCssVars_();\n                });\n            }\n            /** @private */\n        }, {\n            key: \"registerRootHandlers_\",\n            value: function registerRootHandlers_() {\n                var _this4 = this;\n                ACTIVATION_EVENT_TYPES.forEach(function (type) {\n                    _this4.adapter_.registerInteractionHandler(type, _this4.activateHandler_);\n                });\n                this.adapter_.registerInteractionHandler('focus', this.focusHandler_);\n                this.adapter_.registerInteractionHandler('blur', this.blurHandler_);\n                if (this.adapter_.isUnbounded()) {\n                    this.adapter_.registerResizeHandler(this.resizeHandler_);\n                }\n            }\n            /**\n             * @param {!Event} e\n             * @private\n             */\n        }, {\n            key: \"registerDeactivationHandlers_\",\n            value: function registerDeactivationHandlers_(e) {\n                var _this5 = this;\n                if (e.type === 'keydown') {\n                    this.adapter_.registerInteractionHandler('keyup', this.deactivateHandler_);\n                }\n                else {\n                    POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (type) {\n                        _this5.adapter_.registerDocumentInteractionHandler(type, _this5.deactivateHandler_);\n                    });\n                }\n            }\n            /** @private */\n        }, {\n            key: \"deregisterRootHandlers_\",\n            value: function deregisterRootHandlers_() {\n                var _this6 = this;\n                ACTIVATION_EVENT_TYPES.forEach(function (type) {\n                    _this6.adapter_.deregisterInteractionHandler(type, _this6.activateHandler_);\n                });\n                this.adapter_.deregisterInteractionHandler('focus', this.focusHandler_);\n                this.adapter_.deregisterInteractionHandler('blur', this.blurHandler_);\n                if (this.adapter_.isUnbounded()) {\n                    this.adapter_.deregisterResizeHandler(this.resizeHandler_);\n                }\n            }\n            /** @private */\n        }, {\n            key: \"deregisterDeactivationHandlers_\",\n            value: function deregisterDeactivationHandlers_() {\n                var _this7 = this;\n                this.adapter_.deregisterInteractionHandler('keyup', this.deactivateHandler_);\n                POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (type) {\n                    _this7.adapter_.deregisterDocumentInteractionHandler(type, _this7.deactivateHandler_);\n                });\n            }\n            /** @private */\n        }, {\n            key: \"removeCssVars_\",\n            value: function removeCssVars_() {\n                var _this8 = this;\n                var strings$$1 = MDCRippleFoundation.strings;\n                Object.keys(strings$$1).forEach(function (k) {\n                    if (k.indexOf('VAR_') === 0) {\n                        _this8.adapter_.updateCssVariable(strings$$1[k], null);\n                    }\n                });\n            }\n            /**\n             * @param {?Event} e\n             * @private\n             */\n        }, {\n            key: \"activate_\",\n            value: function activate_(e) {\n                var _this9 = this;\n                if (this.adapter_.isSurfaceDisabled()) {\n                    return;\n                }\n                var activationState = this.activationState_;\n                if (activationState.isActivated) {\n                    return;\n                } // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction\n                var previousActivationEvent = this.previousActivationEvent_;\n                var isSameInteraction = previousActivationEvent && e && previousActivationEvent.type !== e.type;\n                if (isSameInteraction) {\n                    return;\n                }\n                activationState.isActivated = true;\n                activationState.isProgrammatic = e === null;\n                activationState.activationEvent = e;\n                activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : e.type === 'mousedown' || e.type === 'touchstart' || e.type === 'pointerdown';\n                var hasActivatedChild = e && activatedTargets.length > 0 && activatedTargets.some(function (target) {\n                    return _this9.adapter_.containsEventTarget(target);\n                });\n                if (hasActivatedChild) {\n                    // Immediately reset activation state, while preserving logic that prevents touch follow-on events\n                    this.resetActivationState_();\n                    return;\n                }\n                if (e) {\n                    activatedTargets.push(\n                    /** @type {!EventTarget} */\n                    e.target);\n                    this.registerDeactivationHandlers_(e);\n                }\n                activationState.wasElementMadeActive = this.checkElementMadeActive_(e);\n                if (activationState.wasElementMadeActive) {\n                    this.animateActivation_();\n                }\n                requestAnimationFrame(function () {\n                    // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples\n                    activatedTargets = [];\n                    if (!activationState.wasElementMadeActive && (e.key === ' ' || e.keyCode === 32)) {\n                        // If space was pressed, try again within an rAF call to detect :active, because different UAs report\n                        // active states inconsistently when they're called within event handling code:\n                        // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971\n                        // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741\n                        // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS\n                        // variable is set within a rAF callback for a submit button interaction (#2241).\n                        activationState.wasElementMadeActive = _this9.checkElementMadeActive_(e);\n                        if (activationState.wasElementMadeActive) {\n                            _this9.animateActivation_();\n                        }\n                    }\n                    if (!activationState.wasElementMadeActive) {\n                        // Reset activation state immediately if element was not made active.\n                        _this9.activationState_ = _this9.defaultActivationState_();\n                    }\n                });\n            }\n            /**\n             * @param {?Event} e\n             * @private\n             */\n        }, {\n            key: \"checkElementMadeActive_\",\n            value: function checkElementMadeActive_(e) {\n                return e && e.type === 'keydown' ? this.adapter_.isSurfaceActive() : true;\n            }\n            /**\n             * @param {?Event=} event Optional event containing position information.\n             */\n        }, {\n            key: \"activate\",\n            value: function activate() {\n                var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n                this.activate_(event);\n            }\n            /** @private */\n        }, {\n            key: \"animateActivation_\",\n            value: function animateActivation_() {\n                var _this10 = this;\n                var _MDCRippleFoundation$3 = MDCRippleFoundation.strings, VAR_FG_TRANSLATE_START = _MDCRippleFoundation$3.VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END = _MDCRippleFoundation$3.VAR_FG_TRANSLATE_END;\n                var _MDCRippleFoundation$4 = MDCRippleFoundation.cssClasses, FG_DEACTIVATION = _MDCRippleFoundation$4.FG_DEACTIVATION, FG_ACTIVATION = _MDCRippleFoundation$4.FG_ACTIVATION;\n                var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;\n                this.layoutInternal_();\n                var translateStart = '';\n                var translateEnd = '';\n                if (!this.adapter_.isUnbounded()) {\n                    var _getFgTranslationCoor = this.getFgTranslationCoordinates_(), startPoint = _getFgTranslationCoor.startPoint, endPoint = _getFgTranslationCoor.endPoint;\n                    translateStart = \"\".concat(startPoint.x, \"px, \").concat(startPoint.y, \"px\");\n                    translateEnd = \"\".concat(endPoint.x, \"px, \").concat(endPoint.y, \"px\");\n                }\n                this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);\n                this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd); // Cancel any ongoing activation/deactivation animations\n                clearTimeout(this.activationTimer_);\n                clearTimeout(this.fgDeactivationRemovalTimer_);\n                this.rmBoundedActivationClasses_();\n                this.adapter_.removeClass(FG_DEACTIVATION); // Force layout in order to re-trigger the animation.\n                this.adapter_.computeBoundingRect();\n                this.adapter_.addClass(FG_ACTIVATION);\n                this.activationTimer_ = setTimeout(function () {\n                    return _this10.activationTimerCallback_();\n                }, DEACTIVATION_TIMEOUT_MS);\n            }\n            /**\n             * @private\n             * @return {{startPoint: PointType, endPoint: PointType}}\n             */\n        }, {\n            key: \"getFgTranslationCoordinates_\",\n            value: function getFgTranslationCoordinates_() {\n                var _activationState_ = this.activationState_, activationEvent = _activationState_.activationEvent, wasActivatedByPointer = _activationState_.wasActivatedByPointer;\n                var startPoint;\n                if (wasActivatedByPointer) {\n                    startPoint = getNormalizedEventCoords(\n                    /** @type {!Event} */\n                    activationEvent, this.adapter_.getWindowPageOffset(), this.adapter_.computeBoundingRect());\n                }\n                else {\n                    startPoint = {\n                        x: this.frame_.width / 2,\n                        y: this.frame_.height / 2\n                    };\n                } // Center the element around the start point.\n                startPoint = {\n                    x: startPoint.x - this.initialSize_ / 2,\n                    y: startPoint.y - this.initialSize_ / 2\n                };\n                var endPoint = {\n                    x: this.frame_.width / 2 - this.initialSize_ / 2,\n                    y: this.frame_.height / 2 - this.initialSize_ / 2\n                };\n                return {\n                    startPoint: startPoint,\n                    endPoint: endPoint\n                };\n            }\n            /** @private */\n        }, {\n            key: \"runDeactivationUXLogicIfReady_\",\n            value: function runDeactivationUXLogicIfReady_() {\n                var _this11 = this;\n                // This method is called both when a pointing device is released, and when the activation animation ends.\n                // The deactivation animation should only run after both of those occur.\n                var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;\n                var _activationState_2 = this.activationState_, hasDeactivationUXRun = _activationState_2.hasDeactivationUXRun, isActivated = _activationState_2.isActivated;\n                var activationHasEnded = hasDeactivationUXRun || !isActivated;\n                if (activationHasEnded && this.activationAnimationHasEnded_) {\n                    this.rmBoundedActivationClasses_();\n                    this.adapter_.addClass(FG_DEACTIVATION);\n                    this.fgDeactivationRemovalTimer_ = setTimeout(function () {\n                        _this11.adapter_.removeClass(FG_DEACTIVATION);\n                    }, numbers.FG_DEACTIVATION_MS);\n                }\n            }\n            /** @private */\n        }, {\n            key: \"rmBoundedActivationClasses_\",\n            value: function rmBoundedActivationClasses_() {\n                var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;\n                this.adapter_.removeClass(FG_ACTIVATION);\n                this.activationAnimationHasEnded_ = false;\n                this.adapter_.computeBoundingRect();\n            }\n        }, {\n            key: \"resetActivationState_\",\n            value: function resetActivationState_() {\n                var _this12 = this;\n                this.previousActivationEvent_ = this.activationState_.activationEvent;\n                this.activationState_ = this.defaultActivationState_(); // Touch devices may fire additional events for the same interaction within a short time.\n                // Store the previous event until it's safe to assume that subsequent events are for new interactions.\n                setTimeout(function () {\n                    return _this12.previousActivationEvent_ = null;\n                }, MDCRippleFoundation.numbers.TAP_DELAY_MS);\n            }\n            /**\n             * @param {?Event} e\n             * @private\n             */\n        }, {\n            key: \"deactivate_\",\n            value: function deactivate_(e) {\n                var _this13 = this;\n                var activationState = this.activationState_; // This can happen in scenarios such as when you have a keyup event that blurs the element.\n                if (!activationState.isActivated) {\n                    return;\n                }\n                var state = \n                /** @type {!ActivationStateType} */\n                Object.assign({}, activationState);\n                if (activationState.isProgrammatic) {\n                    var evtObject = null;\n                    requestAnimationFrame(function () {\n                        return _this13.animateDeactivation_(evtObject, state);\n                    });\n                    this.resetActivationState_();\n                }\n                else {\n                    this.deregisterDeactivationHandlers_();\n                    requestAnimationFrame(function () {\n                        _this13.activationState_.hasDeactivationUXRun = true;\n                        _this13.animateDeactivation_(e, state);\n                        _this13.resetActivationState_();\n                    });\n                }\n            }\n            /**\n             * @param {?Event=} event Optional event containing position information.\n             */\n        }, {\n            key: \"deactivate\",\n            value: function deactivate() {\n                var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n                this.deactivate_(event);\n            }\n            /**\n             * @param {Event} e\n             * @param {!ActivationStateType} options\n             * @private\n             */\n        }, {\n            key: \"animateDeactivation_\",\n            value: function animateDeactivation_(e, _ref) {\n                var wasActivatedByPointer = _ref.wasActivatedByPointer, wasElementMadeActive = _ref.wasElementMadeActive;\n                if (wasActivatedByPointer || wasElementMadeActive) {\n                    this.runDeactivationUXLogicIfReady_();\n                }\n            }\n        }, {\n            key: \"layout\",\n            value: function layout() {\n                var _this14 = this;\n                if (this.layoutFrame_) {\n                    cancelAnimationFrame(this.layoutFrame_);\n                }\n                this.layoutFrame_ = requestAnimationFrame(function () {\n                    _this14.layoutInternal_();\n                    _this14.layoutFrame_ = 0;\n                });\n            }\n            /** @private */\n        }, {\n            key: \"layoutInternal_\",\n            value: function layoutInternal_() {\n                var _this15 = this;\n                this.frame_ = this.adapter_.computeBoundingRect();\n                var maxDim = Math.max(this.frame_.height, this.frame_.width); // Surface diameter is treated differently for unbounded vs. bounded ripples.\n                // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately\n                // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically\n                // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter\n                // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via\n                // `overflow: hidden`.\n                var getBoundedRadius = function getBoundedRadius() {\n                    var hypotenuse = Math.sqrt(Math.pow(_this15.frame_.width, 2) + Math.pow(_this15.frame_.height, 2));\n                    return hypotenuse + MDCRippleFoundation.numbers.PADDING;\n                };\n                this.maxRadius_ = this.adapter_.isUnbounded() ? maxDim : getBoundedRadius(); // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform\n                this.initialSize_ = maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE;\n                this.fgScale_ = this.maxRadius_ / this.initialSize_;\n                this.updateLayoutCssVars_();\n            }\n            /** @private */\n        }, {\n            key: \"updateLayoutCssVars_\",\n            value: function updateLayoutCssVars_() {\n                var _MDCRippleFoundation$5 = MDCRippleFoundation.strings, VAR_FG_SIZE = _MDCRippleFoundation$5.VAR_FG_SIZE, VAR_LEFT = _MDCRippleFoundation$5.VAR_LEFT, VAR_TOP = _MDCRippleFoundation$5.VAR_TOP, VAR_FG_SCALE = _MDCRippleFoundation$5.VAR_FG_SCALE;\n                this.adapter_.updateCssVariable(VAR_FG_SIZE, \"\".concat(this.initialSize_, \"px\"));\n                this.adapter_.updateCssVariable(VAR_FG_SCALE, this.fgScale_);\n                if (this.adapter_.isUnbounded()) {\n                    this.unboundedCoords_ = {\n                        left: Math.round(this.frame_.width / 2 - this.initialSize_ / 2),\n                        top: Math.round(this.frame_.height / 2 - this.initialSize_ / 2)\n                    };\n                    this.adapter_.updateCssVariable(VAR_LEFT, \"\".concat(this.unboundedCoords_.left, \"px\"));\n                    this.adapter_.updateCssVariable(VAR_TOP, \"\".concat(this.unboundedCoords_.top, \"px\"));\n                }\n            }\n            /** @param {boolean} unbounded */\n        }, {\n            key: \"setUnbounded\",\n            value: function setUnbounded(unbounded) {\n                var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;\n                if (unbounded) {\n                    this.adapter_.addClass(UNBOUNDED);\n                }\n                else {\n                    this.adapter_.removeClass(UNBOUNDED);\n                }\n            }\n        }]);\n    return MDCRippleFoundation;\n}(MDCFoundation);\n/**\n * @extends MDCComponent<!MDCRippleFoundation>\n */\nvar MDCRipple = \n/*#__PURE__*/\nfunction (_MDCComponent) {\n    _inherits(MDCRipple, _MDCComponent);\n    /** @param {...?} args */\n    function MDCRipple() {\n        var _ref;\n        var _this;\n        _classCallCheck(this, MDCRipple);\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n        _this = _possibleConstructorReturn(this, (_ref = MDCRipple.__proto__ || Object.getPrototypeOf(MDCRipple)).call.apply(_ref, [this].concat(args)));\n        /** @type {boolean} */\n        _this.disabled = false;\n        /** @private {boolean} */\n        _this.unbounded_;\n        return _this;\n    }\n    /**\n     * @param {!Element} root\n     * @param {{isUnbounded: (boolean|undefined)}=} options\n     * @return {!MDCRipple}\n     */\n    _createClass(MDCRipple, [{\n            key: \"setUnbounded_\",\n            /**\n             * Closure Compiler throws an access control error when directly accessing a\n             * protected or private property inside a getter/setter, like unbounded above.\n             * By accessing the protected property inside a method, we solve that problem.\n             * That's why this function exists.\n             * @private\n             */\n            value: function setUnbounded_() {\n                this.foundation_.setUnbounded(this.unbounded_);\n            }\n        }, {\n            key: \"activate\",\n            value: function activate() {\n                this.foundation_.activate();\n            }\n        }, {\n            key: \"deactivate\",\n            value: function deactivate() {\n                this.foundation_.deactivate();\n            }\n        }, {\n            key: \"layout\",\n            value: function layout() {\n                this.foundation_.layout();\n            }\n            /** @return {!MDCRippleFoundation} */\n        }, {\n            key: \"getDefaultFoundation\",\n            value: function getDefaultFoundation() {\n                return new MDCRippleFoundation(MDCRipple.createAdapter(this));\n            }\n        }, {\n            key: \"initialSyncWithDOM\",\n            value: function initialSyncWithDOM() {\n                this.unbounded = 'mdcRippleIsUnbounded' in this.root_.dataset;\n            }\n        }, {\n            key: \"unbounded\",\n            /** @return {boolean} */\n            get: function get() {\n                return this.unbounded_;\n            }\n            /** @param {boolean} unbounded */\n            ,\n            set: function set(unbounded) {\n                this.unbounded_ = Boolean(unbounded);\n                this.setUnbounded_();\n            }\n        }], [{\n            key: \"attachTo\",\n            value: function attachTo(root) {\n                var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref2$isUnbounded = _ref2.isUnbounded, isUnbounded = _ref2$isUnbounded === void 0 ? undefined : _ref2$isUnbounded;\n                var ripple = new MDCRipple(root); // Only override unbounded behavior if option is explicitly specified\n                if (isUnbounded !== undefined) {\n                    ripple.unbounded =\n                        /** @type {boolean} */\n                        isUnbounded;\n                }\n                return ripple;\n            }\n            /**\n             * @param {!RippleCapableSurface} instance\n             * @return {!MDCRippleAdapter}\n             */\n        }, {\n            key: \"createAdapter\",\n            value: function createAdapter(instance) {\n                var MATCHES = getMatchesProperty(HTMLElement.prototype);\n                return {\n                    browserSupportsCssVars: function browserSupportsCssVars() {\n                        return supportsCssVariables(window);\n                    },\n                    isUnbounded: function isUnbounded() {\n                        return instance.unbounded;\n                    },\n                    isSurfaceActive: function isSurfaceActive() {\n                        return instance.root_[MATCHES](':active');\n                    },\n                    isSurfaceDisabled: function isSurfaceDisabled() {\n                        return instance.disabled;\n                    },\n                    addClass: function addClass(className) {\n                        return instance.root_.classList.add(className);\n                    },\n                    removeClass: function removeClass(className) {\n                        return instance.root_.classList.remove(className);\n                    },\n                    containsEventTarget: function containsEventTarget(target) {\n                        return instance.root_.contains(target);\n                    },\n                    registerInteractionHandler: function registerInteractionHandler(evtType, handler) {\n                        return instance.root_.addEventListener(evtType, handler, applyPassive());\n                    },\n                    deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {\n                        return instance.root_.removeEventListener(evtType, handler, applyPassive());\n                    },\n                    registerDocumentInteractionHandler: function registerDocumentInteractionHandler(evtType, handler) {\n                        return document.documentElement.addEventListener(evtType, handler, applyPassive());\n                    },\n                    deregisterDocumentInteractionHandler: function deregisterDocumentInteractionHandler(evtType, handler) {\n                        return document.documentElement.removeEventListener(evtType, handler, applyPassive());\n                    },\n                    registerResizeHandler: function registerResizeHandler(handler) {\n                        return window.addEventListener('resize', handler);\n                    },\n                    deregisterResizeHandler: function deregisterResizeHandler(handler) {\n                        return window.removeEventListener('resize', handler);\n                    },\n                    updateCssVariable: function updateCssVariable(varName, value) {\n                        return instance.root_.style.setProperty(varName, value);\n                    },\n                    computeBoundingRect: function computeBoundingRect() {\n                        return instance.root_.getBoundingClientRect();\n                    },\n                    getWindowPageOffset: function getWindowPageOffset() {\n                        return {\n                            x: window.pageXOffset,\n                            y: window.pageYOffset\n                        };\n                    }\n                };\n            }\n        }]);\n    return MDCRipple;\n}(MDCComponent);\n/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar cssClasses$3 = {\n    BOX: 'mdc-select--box',\n    DISABLED: 'mdc-select--disabled',\n    ROOT: 'mdc-select'\n};\nvar strings$1 = {\n    CHANGE_EVENT: 'MDCSelect:change',\n    LINE_RIPPLE_SELECTOR: '.mdc-line-ripple',\n    LABEL_SELECTOR: '.mdc-floating-label',\n    NATIVE_CONTROL_SELECTOR: '.mdc-select__native-control'\n};\nvar MDCSelectFoundation = \n/*#__PURE__*/\nfunction (_MDCFoundation) {\n    _inherits(MDCSelectFoundation, _MDCFoundation);\n    _createClass(MDCSelectFoundation, null, [{\n            key: \"cssClasses\",\n            get: function get() {\n                return cssClasses$3;\n            }\n        }, {\n            key: \"strings\",\n            get: function get() {\n                return strings$1;\n            }\n        }, {\n            key: \"defaultAdapter\",\n            get: function get() {\n                return {\n                    addClass: function addClass() { },\n                    removeClass: function removeClass() { },\n                    floatLabel: function floatLabel() { },\n                    activateBottomLine: function activateBottomLine() { },\n                    deactivateBottomLine: function deactivateBottomLine() { },\n                    registerInteractionHandler: function registerInteractionHandler() { },\n                    deregisterInteractionHandler: function deregisterInteractionHandler() { },\n                    getSelectedIndex: function getSelectedIndex() {\n                        return (\n                        /* number */\n                        -1);\n                    },\n                    setSelectedIndex: function setSelectedIndex() { },\n                    setDisabled: function setDisabled() { },\n                    getValue: function getValue() {\n                        return (\n                        /* string */\n                        '');\n                    },\n                    setValue: function setValue() { }\n                };\n            }\n        }]);\n    function MDCSelectFoundation(adapter) {\n        var _this;\n        _classCallCheck(this, MDCSelectFoundation);\n        _this = _possibleConstructorReturn(this, (MDCSelectFoundation.__proto__ || Object.getPrototypeOf(MDCSelectFoundation)).call(this, Object.assign(MDCSelectFoundation.defaultAdapter, adapter)));\n        _this.focusHandler_ = function (evt) {\n            return _this.handleFocus_(evt);\n        };\n        _this.blurHandler_ = function (evt) {\n            return _this.handleBlur_(evt);\n        };\n        _this.selectionHandler_ = function (evt) {\n            return _this.handleSelect_(evt);\n        };\n        return _this;\n    }\n    _createClass(MDCSelectFoundation, [{\n            key: \"init\",\n            value: function init() {\n                this.adapter_.registerInteractionHandler('focus', this.focusHandler_);\n                this.adapter_.registerInteractionHandler('blur', this.blurHandler_);\n                this.adapter_.registerInteractionHandler('change', this.selectionHandler_);\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n                this.adapter_.deregisterInteractionHandler('focus', this.focusHandler_);\n                this.adapter_.deregisterInteractionHandler('blur', this.blurHandler_);\n                this.adapter_.deregisterInteractionHandler('change', this.selectionHandler_);\n            }\n        }, {\n            key: \"setSelectedIndex\",\n            value: function setSelectedIndex(index) {\n                this.adapter_.setSelectedIndex(index);\n                this.floatLabelWithValue_();\n            }\n        }, {\n            key: \"setValue\",\n            value: function setValue(value) {\n                this.adapter_.setValue(value);\n                this.setSelectedIndex(this.adapter_.getSelectedIndex());\n            }\n        }, {\n            key: \"setDisabled\",\n            value: function setDisabled(disabled) {\n                var DISABLED = MDCSelectFoundation.cssClasses.DISABLED;\n                this.adapter_.setDisabled(disabled);\n                if (disabled) {\n                    this.adapter_.addClass(DISABLED);\n                }\n                else {\n                    this.adapter_.removeClass(DISABLED);\n                }\n            }\n        }, {\n            key: \"floatLabelWithValue_\",\n            value: function floatLabelWithValue_() {\n                var optionHasValue = this.adapter_.getValue().length > 0;\n                this.adapter_.floatLabel(optionHasValue);\n            }\n        }, {\n            key: \"handleFocus_\",\n            value: function handleFocus_() {\n                this.adapter_.floatLabel(true);\n                this.adapter_.activateBottomLine();\n            }\n        }, {\n            key: \"handleBlur_\",\n            value: function handleBlur_() {\n                this.floatLabelWithValue_();\n                this.adapter_.deactivateBottomLine();\n            }\n        }, {\n            key: \"handleSelect_\",\n            value: function handleSelect_() {\n                this.setSelectedIndex(this.adapter_.getSelectedIndex());\n            }\n        }]);\n    return MDCSelectFoundation;\n}(MDCFoundation);\nvar MDCSelect = \n/*#__PURE__*/\nfunction (_MDCComponent) {\n    _inherits(MDCSelect, _MDCComponent);\n    function MDCSelect() {\n        _classCallCheck(this, MDCSelect);\n        return _possibleConstructorReturn(this, (MDCSelect.__proto__ || Object.getPrototypeOf(MDCSelect)).apply(this, arguments));\n    }\n    _createClass(MDCSelect, [{\n            key: \"initialize\",\n            value: function initialize() {\n                var labelFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (el) {\n                    return new MDCFloatingLabel(el);\n                };\n                var lineRippleFactory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (el) {\n                    return new MDCLineRipple(el);\n                };\n                this.nativeControl_ = this.root_.querySelector(strings$1.NATIVE_CONTROL_SELECTOR);\n                var labelElement = this.root_.querySelector(strings$1.LABEL_SELECTOR);\n                if (labelElement) {\n                    this.label_ = labelFactory(labelElement);\n                }\n                var lineRippleElement = this.root_.querySelector(strings$1.LINE_RIPPLE_SELECTOR);\n                if (lineRippleElement) {\n                    this.lineRipple_ = lineRippleFactory(lineRippleElement);\n                }\n                if (this.root_.classList.contains(cssClasses$3.BOX)) {\n                    this.ripple = this.initRipple_();\n                }\n            }\n        }, {\n            key: \"initRipple_\",\n            value: function initRipple_() {\n                var _this = this;\n                var adapter = Object.assign(MDCRipple.createAdapter(this), {\n                    registerInteractionHandler: function registerInteractionHandler(type, handler) {\n                        return _this.nativeControl_.addEventListener(type, handler);\n                    },\n                    deregisterInteractionHandler: function deregisterInteractionHandler(type, handler) {\n                        return _this.nativeControl_.removeEventListener(type, handler);\n                    }\n                });\n                var foundation = new MDCRippleFoundation(adapter);\n                return new MDCRipple(this.root_, foundation);\n            }\n        }, {\n            key: \"getDefaultFoundation\",\n            value: function getDefaultFoundation() {\n                var _this2 = this;\n                return new MDCSelectFoundation({\n                    addClass: function addClass(className) {\n                        return _this2.root_.classList.add(className);\n                    },\n                    removeClass: function removeClass(className) {\n                        return _this2.root_.classList.remove(className);\n                    },\n                    floatLabel: function floatLabel(value) {\n                        if (_this2.label_) {\n                            _this2.label_.float(value);\n                        }\n                    },\n                    activateBottomLine: function activateBottomLine() {\n                        if (_this2.lineRipple_) {\n                            _this2.lineRipple_.activate();\n                        }\n                    },\n                    deactivateBottomLine: function deactivateBottomLine() {\n                        if (_this2.lineRipple_) {\n                            _this2.lineRipple_.deactivate();\n                        }\n                    },\n                    setDisabled: function setDisabled(disabled) {\n                        return _this2.nativeControl_.disabled = disabled;\n                    },\n                    registerInteractionHandler: function registerInteractionHandler(type, handler) {\n                        return _this2.nativeControl_.addEventListener(type, handler);\n                    },\n                    deregisterInteractionHandler: function deregisterInteractionHandler(type, handler) {\n                        return _this2.nativeControl_.removeEventListener(type, handler);\n                    },\n                    getSelectedIndex: function getSelectedIndex() {\n                        return _this2.nativeControl_.selectedIndex;\n                    },\n                    setSelectedIndex: function setSelectedIndex(index) {\n                        return _this2.nativeControl_.selectedIndex = index;\n                    },\n                    getValue: function getValue() {\n                        return _this2.nativeControl_.value;\n                    },\n                    setValue: function setValue(value) {\n                        return _this2.nativeControl_.value = value;\n                    }\n                });\n            }\n        }, {\n            key: \"initialSyncWithDOM\",\n            value: function initialSyncWithDOM() {\n                // needed to sync floating label\n                this.selectedIndex = this.nativeControl_.selectedIndex;\n                if (this.nativeControl_.disabled) {\n                    this.disabled = true;\n                }\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n                if (this.ripple) {\n                    this.ripple.destroy();\n                }\n                _get(MDCSelect.prototype.__proto__ || Object.getPrototypeOf(MDCSelect.prototype), \"destroy\", this).call(this);\n            }\n        }, {\n            key: \"value\",\n            get: function get$$1() {\n                return this.nativeControl_.value;\n            },\n            set: function set(value) {\n                this.foundation_.setValue(value);\n            }\n        }, {\n            key: \"selectedIndex\",\n            get: function get$$1() {\n                return this.nativeControl_.selectedIndex;\n            },\n            set: function set(selectedIndex) {\n                this.foundation_.setSelectedIndex(selectedIndex);\n            }\n        }, {\n            key: \"disabled\",\n            get: function get$$1() {\n                return this.nativeControl_.disabled;\n            },\n            set: function set(disabled) {\n                this.foundation_.setDisabled(disabled);\n            }\n        }], [{\n            key: \"attachTo\",\n            value: function attachTo(root) {\n                return new MDCSelect(root);\n            }\n        }]);\n    return MDCSelect;\n}(MDCComponent);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ MDC_SELECT_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: /*@__PURE__*/ forwardRef(function () { return MdcSelect; }),\n    multi: true\n};\nvar MdcSelectChange = /** @class */ /*@__PURE__*/ (function () {\n    function MdcSelectChange(index, value) {\n        this.index = index;\n        this.value = value;\n    }\n    return MdcSelectChange;\n}());\nvar /** @type {?} */ nextUniqueId = 0;\nvar MdcSelect = /** @class */ /*@__PURE__*/ (function () {\n    function MdcSelect(_changeDetectorRef, _renderer, elementRef, _ripple, _registry) {\n        var _this = this;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._renderer = _renderer;\n        this.elementRef = elementRef;\n        this._ripple = _ripple;\n        this._registry = _registry;\n        /**\n         * Emits whenever the component is destroyed.\n         */\n        this._destroy = new Subject();\n        this._uniqueId = \"mdc-select-\" + ++nextUniqueId;\n        this.id = this._uniqueId;\n        this.name = null;\n        this._floatingLabel = true;\n        this._box = false;\n        this._autosize = true;\n        this.change = new EventEmitter();\n        /**\n         * Event emitted when the selected value has been changed by the user.\n         */\n        this.selectionChange = new EventEmitter();\n        this.isHostClass = true;\n        this.tabIndex = 0;\n        /**\n         * View -> model callback called when value changes\n         */\n        this._onChange = function () { };\n        /**\n         * View -> model callback called when select has been touched\n         */\n        this._onTouched = function () { };\n        this._mdcAdapter = {\n            addClass: function (className) { return _this._renderer.addClass(_this._getHostElement(), className); },\n            removeClass: function (className) { return _this._renderer.removeClass(_this._getHostElement(), className); },\n            floatLabel: function (value) { return _this._selectLabel.float(value); },\n            activateBottomLine: function () { return _this._lineRipple.activate(); },\n            deactivateBottomLine: function () { return _this._lineRipple.deactivate(); },\n            setDisabled: function (disabled) { return _this._getInputElement().disabled = disabled; },\n            registerInteractionHandler: function (type, handler) { return _this._registry.listen(type, handler, _this._getInputElement()); },\n            deregisterInteractionHandler: function (type, handler) { return _this._registry.unlisten(type, handler); },\n            getSelectedIndex: function () { return _this._getInputElement().selectedIndex; },\n            setSelectedIndex: function (index) { return _this._getInputElement().selectedIndex = index; },\n            getValue: function () { return _this._getInputElement().value; },\n            setValue: function (value) { return _this._getInputElement().value = value; }\n        };\n        this._foundation = new MDCSelectFoundation(this._mdcAdapter);\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    Object.defineProperty(MdcSelect.prototype, \"placeholder\", {\n        /** Placeholder to be shown if no value has been selected. */\n        get: /**\n         * Placeholder to be shown if no value has been selected.\n         * @return {?}\n         */ function () { return this._placeholder; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._placeholder = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcSelect.prototype, \"disabled\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.setDisabled(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcSelect.prototype, \"floatingLabel\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._floatingLabel; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.setFloatingLabel(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcSelect.prototype, \"box\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._box; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.setBox(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcSelect.prototype, \"autosize\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._autosize; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._autosize = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcSelect.prototype, \"classBorder\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.box ? 'mdc-select--box' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdcSelect.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._foundation.init();\n            this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(function () {\n                Promise.resolve().then(function () {\n                    _this._selectLabel.float(_this.getValue());\n                    if (_this.autosize) {\n                        _this._setWidth();\n                    }\n                });\n            });\n        };\n    /**\n     * @return {?}\n     */\n    MdcSelect.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._destroy.next();\n            this._destroy.complete();\n            this._ripple.destroy();\n            this._foundation.destroy();\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MdcSelect.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (value !== this._getInputElement().value) {\n                this.setValue(value, false);\n            }\n            this.change.emit(new MdcSelectChange(this._getInputElement().selectedIndex, value));\n            this._initializeSelection(value);\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MdcSelect.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this._onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MdcSelect.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this._onTouched = fn;\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdcSelect.prototype.onChange = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.setValue(( /** @type {?} */(event.target)).value, true);\n            this.selectionChange.emit(new MdcSelectChange(this._getInputElement().selectedIndex, this.getValue()));\n            event.stopPropagation();\n        };\n    /**\n     * @return {?}\n     */\n    MdcSelect.prototype.onBlur = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.disabled) {\n                this._onTouched();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    MdcSelect.prototype.onFocus = /**\n     * @return {?}\n     */\n        function () {\n            this._onTouched();\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MdcSelect.prototype._initializeSelection = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            var _this = this;\n            // Defer setting the value in order to avoid the \"Expression\n            // has changed after it was checked\" errors from Angular.\n            Promise.resolve().then(function () {\n                _this.setValue(value, false);\n            });\n        };\n    /**\n     * @param {?} newValue\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    MdcSelect.prototype.setValue = /**\n     * @param {?} newValue\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n        function (newValue, isUserInput) {\n            if (isUserInput === void 0) {\n                isUserInput = true;\n            }\n            if (this.disabled) {\n                return;\n            }\n            this._foundation.setValue(newValue);\n            if (isUserInput) {\n                this._onChange(newValue);\n            }\n            this._selectLabel.float(newValue);\n            this._changeDetectorRef.markForCheck();\n        };\n    /**\n     * @return {?}\n     */\n    MdcSelect.prototype.getValue = /**\n     * @return {?}\n     */\n        function () {\n            return this._getInputElement().value;\n        };\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    MdcSelect.prototype.setPlaceholder = /**\n     * @param {?} text\n     * @return {?}\n     */\n        function (text) {\n            this._placeholder = text;\n        };\n    /**\n     * @return {?}\n     */\n    MdcSelect.prototype.getSelectedIndex = /**\n     * @return {?}\n     */\n        function () {\n            return this._getInputElement().selectedIndex;\n        };\n    /**\n     * @return {?}\n     */\n    MdcSelect.prototype.isDisabled = /**\n     * @return {?}\n     */\n        function () {\n            return this.disabled;\n        };\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    MdcSelect.prototype.setDisabled = /**\n     * @param {?} disabled\n     * @return {?}\n     */\n        function (disabled) {\n            this.setDisabledState(disabled);\n        };\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    MdcSelect.prototype.setDisabledState = /**\n     * @param {?} disabled\n     * @return {?}\n     */\n        function (disabled) {\n            this._disabled = disabled;\n            this._foundation.setDisabled(disabled);\n            this._changeDetectorRef.markForCheck();\n        };\n    /** Styles the select as a box. */\n    /**\n     * Styles the select as a box.\n     * @param {?} box\n     * @return {?}\n     */\n    MdcSelect.prototype.setBox = /**\n     * Styles the select as a box.\n     * @param {?} box\n     * @return {?}\n     */\n        function (box) {\n            this._box = toBoolean(box);\n            this._box ? this._ripple.attachTo(this._getHostElement(), false, this._getInputElement()) : this._ripple.destroy();\n            this._changeDetectorRef.markForCheck();\n        };\n    /**\n     * @param {?} floatingLabel\n     * @return {?}\n     */\n    MdcSelect.prototype.setFloatingLabel = /**\n     * @param {?} floatingLabel\n     * @return {?}\n     */\n        function (floatingLabel) {\n            this._floatingLabel = toBoolean(floatingLabel);\n            this._changeDetectorRef.markForCheck();\n        };\n    /**\n     * @return {?}\n     */\n    MdcSelect.prototype.focus = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.disabled) {\n                this._getInputElement().focus();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    MdcSelect.prototype.hasFloatingLabel = /**\n     * @return {?}\n     */\n        function () {\n            return this._floatingLabel || !this.getValue();\n        };\n    /**\n     * @return {?}\n     */\n    MdcSelect.prototype._setWidth = /**\n     * @return {?}\n     */\n        function () {\n            if (this.options && this.placeholder) {\n                var /** @type {?} */ labelLength = this._selectLabel.elementRef.nativeElement.textContent.length;\n                this._renderer.setStyle(this._getHostElement(), 'width', labelLength + \"rem\");\n            }\n        };\n    /**\n     * Retrieves the select input element.\n     * @return {?}\n     */\n    MdcSelect.prototype._getInputElement = /**\n     * Retrieves the select input element.\n     * @return {?}\n     */\n        function () {\n            return this.inputEl.nativeElement;\n        };\n    /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n    MdcSelect.prototype._getHostElement = /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n        function () {\n            return this.elementRef.nativeElement;\n        };\n    return MdcSelect;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MdcSelectModule = /** @class */ /*@__PURE__*/ (function () {\n    function MdcSelectModule() {\n    }\n    return MdcSelectModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { MdcSelectModule, MDC_SELECT_CONTROL_VALUE_ACCESSOR, MdcSelectChange, MdcSelect };\n",null]}