{"remainingRequest":"C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\@angular-mdc\\web\\esm5\\list.es5.js","dependencies":[{"path":"C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\@angular-mdc\\web\\esm5\\list.es5.js","mtime":1554924123942},{"path":"C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1554924186691},{"path":"C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1554924110461}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright (c) 2018 Dominic Carretto\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE\n */\n/** PURE_IMPORTS_START _angular_core,_angular_mdc_web_common,_angular_mdc_web_ripple,rxjs,rxjs_operators PURE_IMPORTS_END */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, Renderer2, ViewEncapsulation, ContentChildren, NgZone, ViewChild, NgModule } from '@angular/core';\nimport { EventRegistry, toBoolean } from '@angular-mdc/web/common';\nimport { MdcRipple } from '@angular-mdc/web/ripple';\nimport { defer, merge, Subject } from 'rxjs';\nimport { startWith, switchMap, take, takeUntil } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Change event that is fired whenever the selected state of an option changes.\n */\nvar /**\n * Change event that is fired whenever the selected state of an option changes.\n */ MdcListSelectionChange = /** @class */ /*@__PURE__*/ (function () {\n    function MdcListSelectionChange(source) {\n        this.source = source;\n    }\n    return MdcListSelectionChange;\n}());\nvar /** @type {?} */ uniqueIdCounter = 0;\nvar MdcListItemGraphic = /** @class */ /*@__PURE__*/ (function () {\n    function MdcListItemGraphic(elementRef) {\n        this.elementRef = elementRef;\n        this.isHostClass = true;\n        this.ariaHidden = 'true';\n    }\n    return MdcListItemGraphic;\n}());\nvar MdcListItemMeta = /** @class */ /*@__PURE__*/ (function () {\n    function MdcListItemMeta(elementRef) {\n        this.elementRef = elementRef;\n        this.isHostClass = true;\n    }\n    return MdcListItemMeta;\n}());\nvar MdcListItemText = /** @class */ /*@__PURE__*/ (function () {\n    function MdcListItemText(elementRef) {\n        this.elementRef = elementRef;\n        this.isHostClass = true;\n    }\n    return MdcListItemText;\n}());\nvar MdcListItemSecondary = /** @class */ /*@__PURE__*/ (function () {\n    function MdcListItemSecondary(elementRef) {\n        this.elementRef = elementRef;\n        this.isHostClass = true;\n    }\n    return MdcListItemSecondary;\n}());\nvar MdcListItem = /** @class */ /*@__PURE__*/ (function () {\n    function MdcListItem(ripple, _changeDetector, _renderer, elementRef) {\n        this.ripple = ripple;\n        this._changeDetector = _changeDetector;\n        this._renderer = _renderer;\n        this.elementRef = elementRef;\n        this._id = \"mdc-list-item-\" + uniqueIdCounter++;\n        this.isHostClass = true;\n        this.role = 'listitem';\n        this.selectionChange = new EventEmitter();\n    }\n    Object.defineProperty(MdcListItem.prototype, \"id\", {\n        /** The unique ID of the option. */\n        get: /**\n         * The unique ID of the option.\n         * @return {?}\n         */ function () { return this._id; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcListItem.prototype, \"classSelected\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.selected ? 'mdc-list-item--selected' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdcListItem.prototype.onclick = /**\n     * @return {?}\n     */\n        function () {\n            this.setSelected(!this.selected);\n            this._emitChangeEvent();\n        };\n    Object.defineProperty(MdcListItem.prototype, \"selected\", {\n        /** Whether the option is selected. */\n        get: /**\n         * Whether the option is selected.\n         * @return {?}\n         */ function () { return this._selected; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.setSelected(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Sets the selected state of the option. */\n    /**\n     * Sets the selected state of the option.\n     * @param {?} selected\n     * @return {?}\n     */\n    MdcListItem.prototype.setSelected = /**\n     * Sets the selected state of the option.\n     * @param {?} selected\n     * @return {?}\n     */\n        function (selected) {\n            this._selected = selected;\n            this._changeDetector.markForCheck();\n        };\n    /**\n     * @return {?}\n     */\n    MdcListItem.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.ripple.destroy();\n        };\n    /**\n     * @return {?}\n     */\n    MdcListItem.prototype._getHostElement = /**\n     * @return {?}\n     */\n        function () {\n            return this.elementRef.nativeElement;\n        };\n    /**\n     * Emits a change event if the selected state of an option changed.\n     * @return {?}\n     */\n    MdcListItem.prototype._emitChangeEvent = /**\n     * Emits a change event if the selected state of an option changed.\n     * @return {?}\n     */\n        function () {\n            this.selectionChange.emit(new MdcListSelectionChange(this));\n        };\n    return MdcListItem;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Change event that is being fired whenever the selected state of an option changes.\n */\nvar /**\n * Change event that is being fired whenever the selected state of an option changes.\n */ MdcListItemChange = /** @class */ /*@__PURE__*/ (function () {\n    function MdcListItemChange(source, option) {\n        this.source = source;\n        this.option = option;\n    }\n    return MdcListItemChange;\n}());\nvar MdcListGroup = /** @class */ /*@__PURE__*/ (function () {\n    function MdcListGroup(elementRef) {\n        this.elementRef = elementRef;\n        this.isHostClass = true;\n    }\n    return MdcListGroup;\n}());\nvar MdcListGroupSubheader = /** @class */ /*@__PURE__*/ (function () {\n    function MdcListGroupSubheader(elementRef) {\n        this.elementRef = elementRef;\n        this.isHostClass = true;\n    }\n    return MdcListGroupSubheader;\n}());\nvar MdcListDivider = /** @class */ /*@__PURE__*/ (function () {\n    function MdcListDivider(_renderer) {\n        this._renderer = _renderer;\n        this._inset = false;\n        this._padded = false;\n    }\n    Object.defineProperty(MdcListDivider.prototype, \"inset\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._inset; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._inset = toBoolean(value);\n            this._inset ? this._renderer.addClass(this.nativeEl.nativeElement, 'mdc-list-divider--inset')\n                : this._renderer.removeClass(this.nativeEl.nativeElement, 'mdc-list-divider--inset');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcListDivider.prototype, \"padded\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._padded; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._padded = toBoolean(value);\n            this._padded ? this._renderer.addClass(this.nativeEl.nativeElement, 'mdc-list-divider--padded')\n                : this._renderer.removeClass(this.nativeEl.nativeElement, 'mdc-list-divider--padded');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MdcListDivider;\n}());\nvar MdcList = /** @class */ /*@__PURE__*/ (function () {\n    function MdcList(_changeDetectorRef, _ngZone, elementRef) {\n        var _this = this;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this.elementRef = elementRef;\n        /**\n         * Emits whenever the component is destroyed.\n         */\n        this._destroy = new Subject();\n        this.dense = false;\n        this.lines = 1;\n        this.border = false;\n        this._interactive = true;\n        this.isHostClass = true;\n        this.role = 'list';\n        /**\n         * Emits a change event whenever the selected state of an option changes.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Combined stream of all of the child options' change events.\n         */\n        this.optionSelectionChanges = defer(function () {\n            if (_this.options) {\n                return merge.apply(void 0, _this.options.map(function (option) { return option.selectionChange; }));\n            }\n            return _this._ngZone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap(function () { return _this.optionSelectionChanges; }));\n        });\n    }\n    Object.defineProperty(MdcList.prototype, \"avatar\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._avatar; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._avatar = toBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcList.prototype, \"interactive\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._interactive; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value !== this._interactive) {\n                this.setInteractive(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcList.prototype, \"multiple\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._multiple; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.setMultiple(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcList.prototype, \"classDense\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.dense ? 'mdc-list--dense' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcList.prototype, \"classLines\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.lines === 2 ? 'mdc-list--two-line' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcList.prototype, \"classAvatar\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.avatar ? 'mdc-list--avatar-list' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcList.prototype, \"classBorder\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.border ? 'ng-mdc-list--border' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcList.prototype, \"classInteractive\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return !this.interactive ? 'mdc-list--non-interactive' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MdcList.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.optionSelectionChanges.pipe(takeUntil(merge(this._destroy, this.options.changes))).subscribe(function (event) {\n                _this.selectionChange.emit(new MdcListItemChange(_this, event.source));\n            });\n            this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(function () {\n                Promise.resolve().then(function () {\n                    _this.setInteractive(_this.interactive);\n                    if (!_this.multiple) {\n                        _this._resetOptions();\n                    }\n                });\n            });\n        };\n    /**\n     * @return {?}\n     */\n    MdcList.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._destroy.next();\n            this._destroy.complete();\n        };\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @return {?}\n     */\n    MdcList.prototype._resetOptions = /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var /** @type {?} */ changedOrDestroyed = merge(this.options.changes, this._destroy);\n            this.optionSelectionChanges\n                .pipe(takeUntil(changedOrDestroyed)).subscribe(function (event) {\n                if (!_this.multiple) {\n                    _this.clearSelected(event.source);\n                }\n            });\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MdcList.prototype.setInteractive = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this._interactive = toBoolean(value);\n            if (!this.options) {\n                return;\n            }\n            this.options.forEach(function (option) {\n                if (value) {\n                    option.ripple.attachTo(option._getHostElement());\n                }\n                else {\n                    option.ripple.destroy();\n                }\n            });\n        };\n    /**\n     * @param {?} multiple\n     * @return {?}\n     */\n    MdcList.prototype.setMultiple = /**\n     * @param {?} multiple\n     * @return {?}\n     */\n        function (multiple) {\n            this._multiple = multiple;\n            this.clearSelected();\n            this._changeDetectorRef.markForCheck();\n        };\n    /**\n     * @param {?=} skip\n     * @return {?}\n     */\n    MdcList.prototype.clearSelected = /**\n     * @param {?=} skip\n     * @return {?}\n     */\n        function (skip) {\n            if (!this.options) {\n                return;\n            }\n            this.options.forEach(function (option) {\n                if (option !== skip) {\n                    option.setSelected(false);\n                }\n            });\n        };\n    return MdcList;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ LIST_DECLARATIONS = [\n    MdcList,\n    MdcListDivider,\n    MdcListGroup,\n    MdcListGroupSubheader,\n    MdcListItem,\n    MdcListItemGraphic,\n    MdcListItemMeta,\n    MdcListItemSecondary,\n    MdcListItemText,\n];\nvar MdcListModule = /** @class */ /*@__PURE__*/ (function () {\n    function MdcListModule() {\n    }\n    return MdcListModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { MdcListModule, MdcListSelectionChange, MdcListItemGraphic, MdcListItemMeta, MdcListItemText, MdcListItemSecondary, MdcListItem, MdcListItemChange, MdcListGroup, MdcListGroupSubheader, MdcListDivider, MdcList };\n",null]}