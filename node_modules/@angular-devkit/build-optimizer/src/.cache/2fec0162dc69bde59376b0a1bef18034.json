{"remainingRequest":"C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\@angular-mdc\\web\\esm5\\dialog.es5.js","dependencies":[{"path":"C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\@angular-mdc\\web\\esm5\\dialog.es5.js","mtime":1554924123802},{"path":"C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1554924186691},{"path":"C:\\Users\\rauls\\OneDrive\\Documentos\\dechat_es2a\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1554924110461}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright (c) 2018 Dominic Carretto\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE\n */\n/** PURE_IMPORTS_START tslib,_angular_core,_angular_mdc_web_ripple,_angular_mdc_web_button,rxjs,_angular_mdc_web_common,_angular_common,_angular_mdc_web_portal,_angular_mdc_web_overlay PURE_IMPORTS_END */\nimport { __assign, __extends } from 'tslib';\nimport { Directive, ElementRef, HostBinding, Input, Renderer2, Component, ContentChild, ContentChildren, EventEmitter, Optional, Output, SkipSelf, ViewChild, ViewEncapsulation, Inject, InjectionToken, Injectable, Injector, TemplateRef, NgModule } from '@angular/core';\nimport { MdcRipple } from '@angular-mdc/web/ripple';\nimport { MdcButton } from '@angular-mdc/web/button';\nimport { Subject } from 'rxjs';\nimport { isBrowser, EventRegistry, ESCAPE } from '@angular-mdc/web/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, PortalInjector, TemplatePortal, PortalModule } from '@angular-mdc/web/portal';\nimport { Overlay, OverlayModule } from '@angular-mdc/web/overlay';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MdcDialogSurface = /** @class */ /*@__PURE__*/ (function () {\n    function MdcDialogSurface(elementRef) {\n        this.elementRef = elementRef;\n        this.isHostClass = true;\n    }\n    return MdcDialogSurface;\n}());\nvar MdcDialogHeader = /** @class */ /*@__PURE__*/ (function () {\n    function MdcDialogHeader(elementRef) {\n        this.elementRef = elementRef;\n        this.isHostClass = true;\n    }\n    return MdcDialogHeader;\n}());\nvar MdcDialogHeaderTitle = /** @class */ /*@__PURE__*/ (function () {\n    function MdcDialogHeaderTitle(elementRef) {\n        this.elementRef = elementRef;\n        this.isHostClass = true;\n    }\n    return MdcDialogHeaderTitle;\n}());\nvar MdcDialogBody = /** @class */ /*@__PURE__*/ (function () {\n    function MdcDialogBody(elementRef) {\n        this.elementRef = elementRef;\n        this.scrollable = false;\n        this.isHostClass = true;\n    }\n    Object.defineProperty(MdcDialogBody.prototype, \"classScrollable\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.scrollable ? 'mdc-dialog__body--scrollable' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MdcDialogBody;\n}());\nvar MdcDialogFooter = /** @class */ /*@__PURE__*/ (function () {\n    function MdcDialogFooter(elementRef) {\n        this.elementRef = elementRef;\n        this.isHostClass = true;\n    }\n    return MdcDialogFooter;\n}());\nvar MdcDialogBackdrop = /** @class */ /*@__PURE__*/ (function () {\n    function MdcDialogBackdrop(elementRef) {\n        this.elementRef = elementRef;\n        this.isHostClass = true;\n    }\n    return MdcDialogBackdrop;\n}());\nvar MdcDialogButton = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MdcDialogButton, _super);\n    function MdcDialogButton(_renderer, _elementRef, _ripple) {\n        var _this = _super.call(this, _renderer, _elementRef, _ripple) || this;\n        _this.accept = false;\n        _this.cancel = false;\n        _this.action = false;\n        _this.focused = false;\n        return _this;\n    }\n    Object.defineProperty(MdcDialogButton.prototype, \"isFooterButton\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._renderer.parentNode(this._elementRef) === MdcDialogFooter ? 'mdc-dialog__footer__button' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcDialogButton.prototype, \"classAction\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.action ? 'mdc-dialog__action' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcDialogButton.prototype, \"classAccept\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.accept ? 'mdc-dialog__footer__button--accept' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcDialogButton.prototype, \"classCancel\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.cancel ? 'mdc-dialog__footer__button--cancel' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MdcDialogButton;\n}(MdcButton));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ uniqueId = 0;\n/**\n * Reference to a dialog dispatched from the MdcDialog service.\n * @template T, R\n */\nvar /**\n * Reference to a dialog dispatched from the MdcDialog service.\n * @template T, R\n */ MdcDialogRef = /** @class */ /*@__PURE__*/ (function () {\n    function MdcDialogRef(_overlayRef, _containerInstance, id) {\n        if (id === void 0) {\n            id = \"mdc-dialog-\" + uniqueId++;\n        }\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /**\n         * Subject for notifying the user that the dialog has finished opening.\n         */\n        this._afterOpen = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has finished closing.\n         */\n        this._afterClosed = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has started closing.\n         */\n        this._beforeClose = new Subject();\n    }\n    /** Closes the dialog. */\n    /**\n     * Closes the dialog.\n     * @param {?=} dialogResult\n     * @return {?}\n     */\n    MdcDialogRef.prototype.close = /**\n     * Closes the dialog.\n     * @param {?=} dialogResult\n     * @return {?}\n     */\n        function (dialogResult) {\n            this._result = dialogResult;\n            this._beforeClose.next(this._result);\n            this._beforeClose.complete();\n            this._overlayRef.dispose();\n        };\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @return {?}\n     */\n    MdcDialogRef.prototype.afterOpen = /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @return {?}\n     */\n        function () {\n            return this._afterOpen.asObservable();\n        };\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     * @return {?}\n     */\n    MdcDialogRef.prototype.afterClosed = /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     * @return {?}\n     */\n        function () {\n            return this._afterClosed.asObservable();\n        };\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @return {?}\n     */\n    MdcDialogRef.prototype.beforeClose = /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @return {?}\n     */\n        function () {\n            return this._beforeClose.asObservable();\n        };\n    return MdcDialogRef;\n}());\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor)\n            descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps)\n        _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps)\n        _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _get(object, property, receiver) {\n    if (object === null)\n        object = Function.prototype;\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n    if (desc === undefined) {\n        var parent = Object.getPrototypeOf(object);\n        if (parent === null) {\n            return undefined;\n        }\n        else {\n            return _get(parent, property, receiver);\n        }\n    }\n    else if (\"value\" in desc) {\n        return desc.value;\n    }\n    else {\n        var getter = desc.get;\n        if (getter === undefined) {\n            return undefined;\n        }\n        return getter.call(receiver);\n    }\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass)\n        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @template A\n */\nvar MDCFoundation = \n/*#__PURE__*/\n/*@__PURE__*/ function () {\n    _createClass(MDCFoundation, null, [{\n            key: \"cssClasses\",\n            /** @return enum{cssClasses} */\n            get: function get() {\n                // Classes extending MDCFoundation should implement this method to return an object which exports every\n                // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}\n                return {};\n            }\n            /** @return enum{strings} */\n        }, {\n            key: \"strings\",\n            get: function get() {\n                // Classes extending MDCFoundation should implement this method to return an object which exports all\n                // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}\n                return {};\n            }\n            /** @return enum{numbers} */\n        }, {\n            key: \"numbers\",\n            get: function get() {\n                // Classes extending MDCFoundation should implement this method to return an object which exports all\n                // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}\n                return {};\n            }\n            /** @return {!Object} */\n        }, {\n            key: \"defaultAdapter\",\n            get: function get() {\n                // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient\n                // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter\n                // validation.\n                return {};\n            }\n            /**\n             * @param {A=} adapter\n             */\n        }]);\n    function MDCFoundation() {\n        var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _classCallCheck(this, MDCFoundation);\n        /** @protected {!A} */\n        this.adapter_ = adapter;\n    }\n    _createClass(MDCFoundation, [{\n            key: \"init\",\n            value: function init() {\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n            }\n        }]);\n    return MDCFoundation;\n}();\n/**\n * @template F\n */\nvar MDCComponent = \n/*#__PURE__*/\n/*@__PURE__*/ function () {\n    _createClass(MDCComponent, null, [{\n            key: \"attachTo\",\n            /**\n             * @param {!Element} root\n             * @return {!MDCComponent}\n             */\n            value: function attachTo(root) {\n                // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and\n                // returns an instantiated component with its root set to that element. Also note that in the cases of\n                // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized\n                // from getDefaultFoundation().\n                return new MDCComponent(root, new MDCFoundation());\n            }\n            /**\n             * @param {!Element} root\n             * @param {F=} foundation\n             * @param {...?} args\n             */\n        }]);\n    function MDCComponent(root) {\n        var foundation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n        _classCallCheck(this, MDCComponent);\n        /** @protected {!Element} */\n        this.root_ = root;\n        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n            args[_key - 2] = arguments[_key];\n        }\n        this.initialize.apply(this, args); // Note that we initialize foundation here and not within the constructor's default param so that\n        // this.root_ is defined and can be used within the foundation class.\n        /** @protected {!F} */\n        this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;\n        this.foundation_.init();\n        this.initialSyncWithDOM();\n    }\n    _createClass(MDCComponent, [{\n            key: \"initialize\",\n            value: function initialize() { } // Subclasses can override this to do any additional setup work that would be considered part of a\n            // \"constructor\". Essentially, it is a hook into the parent constructor before the foundation is\n            // initialized. Any additional arguments besides root and foundation will be passed in here.\n            /**\n             * @return {!F} foundation\n             */\n        }, {\n            key: \"getDefaultFoundation\",\n            value: function getDefaultFoundation() {\n                // Subclasses must override this method to return a properly configured foundation class for the\n                // component.\n                throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' + 'foundation class');\n            }\n        }, {\n            key: \"initialSyncWithDOM\",\n            value: function initialSyncWithDOM() {\n                // object. An example of this would be a form control wrapper that needs to synchronize its internal state\n                // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM\n                // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n                // Subclasses may implement this method to release any resources / deregister any listeners they have\n                // attached. An example of this might be deregistering a resize event from the window object.\n                this.foundation_.destroy();\n            }\n            /**\n             * Wrapper method to add an event listener to the component's root element. This is most useful when\n             * listening for custom events.\n             * @param {string} evtType\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"listen\",\n            value: function listen(evtType, handler) {\n                this.root_.addEventListener(evtType, handler);\n            }\n            /**\n             * Wrapper method to remove an event listener to the component's root element. This is most useful when\n             * unlistening for custom events.\n             * @param {string} evtType\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"unlisten\",\n            value: function unlisten(evtType, handler) {\n                this.root_.removeEventListener(evtType, handler);\n            }\n            /**\n             * Fires a cross-browser-compatible custom event from the component root of the given type,\n             * with the given data.\n             * @param {string} evtType\n             * @param {!Object} evtData\n             * @param {boolean=} shouldBubble\n             */\n        }, {\n            key: \"emit\",\n            value: function emit(evtType, evtData) {\n                var shouldBubble = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                var evt;\n                if (typeof CustomEvent === 'function') {\n                    evt = new CustomEvent(evtType, {\n                        detail: evtData,\n                        bubbles: shouldBubble\n                    });\n                }\n                else {\n                    evt = document.createEvent('CustomEvent');\n                    evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n                }\n                this.root_.dispatchEvent(evt);\n            }\n        }]);\n    return MDCComponent;\n}();\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n/**\n * Adapter for MDC Ripple. Provides an interface for managing\n * - classes\n * - dom\n * - CSS variables\n * - position\n * - dimensions\n * - scroll position\n * - event handlers\n * - unbounded, active and disabled states\n *\n * Additionally, provides type information for the adapter to the Closure\n * compiler.\n *\n * Implement this adapter for your framework of choice to delegate updates to\n * the component in your framework of choice. See architecture documentation\n * for more details.\n * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md\n *\n * @record\n */\nvar MDCRippleAdapter = \n/*#__PURE__*/\n/*@__PURE__*/ function () {\n    function MDCRippleAdapter() {\n        _classCallCheck(this, MDCRippleAdapter);\n    }\n    _createClass(MDCRippleAdapter, [{\n            key: \"browserSupportsCssVars\",\n            /** @return {boolean} */\n            value: function browserSupportsCssVars() { }\n            /** @return {boolean} */\n        }, {\n            key: \"isUnbounded\",\n            value: function isUnbounded() { }\n            /** @return {boolean} */\n        }, {\n            key: \"isSurfaceActive\",\n            value: function isSurfaceActive() { }\n            /** @return {boolean} */\n        }, {\n            key: \"isSurfaceDisabled\",\n            value: function isSurfaceDisabled() { }\n            /** @param {string} className */\n        }, {\n            key: \"addClass\",\n            value: function addClass(className) { }\n            /** @param {string} className */\n        }, {\n            key: \"removeClass\",\n            value: function removeClass(className) { }\n            /** @param {!EventTarget} target */\n        }, {\n            key: \"containsEventTarget\",\n            value: function containsEventTarget(target) { }\n            /**\n             * @param {string} evtType\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"registerInteractionHandler\",\n            value: function registerInteractionHandler(evtType, handler) { }\n            /**\n             * @param {string} evtType\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"deregisterInteractionHandler\",\n            value: function deregisterInteractionHandler(evtType, handler) { }\n            /**\n             * @param {string} evtType\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"registerDocumentInteractionHandler\",\n            value: function registerDocumentInteractionHandler(evtType, handler) { }\n            /**\n             * @param {string} evtType\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"deregisterDocumentInteractionHandler\",\n            value: function deregisterDocumentInteractionHandler(evtType, handler) { }\n            /**\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"registerResizeHandler\",\n            value: function registerResizeHandler(handler) { }\n            /**\n             * @param {!Function} handler\n             */\n        }, {\n            key: \"deregisterResizeHandler\",\n            value: function deregisterResizeHandler(handler) { }\n            /**\n             * @param {string} varName\n             * @param {?number|string} value\n             */\n        }, {\n            key: \"updateCssVariable\",\n            value: function updateCssVariable(varName, value) { }\n            /** @return {!ClientRect} */\n        }, {\n            key: \"computeBoundingRect\",\n            value: function computeBoundingRect() { }\n            /** @return {{x: number, y: number}} */\n        }, {\n            key: \"getWindowPageOffset\",\n            value: function getWindowPageOffset() { }\n        }]);\n    return MDCRippleAdapter;\n}();\n/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar cssClasses = {\n    // Ripple is a special case where the \"root\" component is really a \"mixin\" of sorts,\n    // given that it's an 'upgrade' to an existing component. That being said it is the root\n    // CSS class that all other CSS classes derive from.\n    ROOT: 'mdc-ripple-upgraded',\n    UNBOUNDED: 'mdc-ripple-upgraded--unbounded',\n    BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',\n    FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',\n    FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation'\n};\nvar strings = {\n    VAR_LEFT: '--mdc-ripple-left',\n    VAR_TOP: '--mdc-ripple-top',\n    VAR_FG_SIZE: '--mdc-ripple-fg-size',\n    VAR_FG_SCALE: '--mdc-ripple-fg-scale',\n    VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',\n    VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end'\n};\nvar numbers = {\n    PADDING: 10,\n    INITIAL_ORIGIN_SCALE: 0.6,\n    DEACTIVATION_TIMEOUT_MS: 225,\n    // Corresponds to $mdc-ripple-translate-duration (i.e. activation animation duration)\n    FG_DEACTIVATION_MS: 150,\n    // Corresponds to $mdc-ripple-fade-out-duration (i.e. deactivation animation duration)\n    TAP_DELAY_MS: 300 // Delay between touch and simulated mouse events on touch devices\n};\n/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Stores result from supportsCssVariables to avoid redundant processing to detect CSS custom variable support.\n * @private {boolean|undefined}\n */\nvar supportsCssVariables_;\n/**\n * Stores result from applyPassive to avoid redundant processing to detect passive event listener support.\n * @private {boolean|undefined}\n */\nvar supportsPassive_;\n/**\n * @param {!Window} windowObj\n * @return {boolean}\n */\nfunction detectEdgePseudoVarBug(windowObj) {\n    // Detect versions of Edge with buggy var() support\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11495448/\n    var document = windowObj.document;\n    var node = document.createElement('div');\n    node.className = 'mdc-ripple-surface--test-edge-var-bug';\n    document.body.appendChild(node); // The bug exists if ::before style ends up propagating to the parent element.\n    // Additionally, getComputedStyle returns null in iframes with display: \"none\" in Firefox,\n    // but Firefox is known to support CSS custom properties correctly.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    var computedStyle = windowObj.getComputedStyle(node);\n    var hasPseudoVarBug = computedStyle !== null && computedStyle.borderTopStyle === 'solid';\n    node.remove();\n    return hasPseudoVarBug;\n}\n/**\n * @param {!Window} windowObj\n * @param {boolean=} forceRefresh\n * @return {boolean|undefined}\n */\nfunction supportsCssVariables(windowObj) {\n    var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var supportsCssVariables = supportsCssVariables_;\n    if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {\n        return supportsCssVariables;\n    }\n    var supportsFunctionPresent = windowObj.CSS && typeof windowObj.CSS.supports === 'function';\n    if (!supportsFunctionPresent) {\n        return;\n    }\n    var explicitlySupportsCssVars = windowObj.CSS.supports('--css-vars', 'yes'); // See: https://bugs.webkit.org/show_bug.cgi?id=154669\n    // See: README section on Safari\n    var weAreFeatureDetectingSafari10plus = windowObj.CSS.supports('(--css-vars: yes)') && windowObj.CSS.supports('color', '#00000000');\n    if (explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus) {\n        supportsCssVariables = !detectEdgePseudoVarBug(windowObj);\n    }\n    else {\n        supportsCssVariables = false;\n    }\n    if (!forceRefresh) {\n        supportsCssVariables_ = supportsCssVariables;\n    }\n    return supportsCssVariables;\n} //\n/**\n * Determine whether the current browser supports passive event listeners, and if so, use them.\n * @param {!Window=} globalObj\n * @param {boolean=} forceRefresh\n * @return {boolean|{passive: boolean}}\n */\nfunction applyPassive() {\n    var globalObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;\n    var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (supportsPassive_ === undefined || forceRefresh) {\n        var isSupported = false;\n        try {\n            globalObj.document.addEventListener('test', null, {\n                get passive() {\n                    isSupported = true;\n                }\n            });\n        }\n        catch (e) { }\n        supportsPassive_ = isSupported;\n    }\n    return supportsPassive_ ? {\n        passive: true\n    } : false;\n}\n/**\n * @param {!Object} HTMLElementPrototype\n * @return {!Array<string>}\n */\nfunction getMatchesProperty(HTMLElementPrototype) {\n    return ['webkitMatchesSelector', 'msMatchesSelector', 'matches'].filter(function (p) {\n        return p in HTMLElementPrototype;\n    }).pop();\n}\n/**\n * @param {!Event} ev\n * @param {{x: number, y: number}} pageOffset\n * @param {!ClientRect} clientRect\n * @return {{x: number, y: number}}\n */\nfunction getNormalizedEventCoords(ev, pageOffset, clientRect) {\n    var x = pageOffset.x, y = pageOffset.y;\n    var documentX = x + clientRect.left;\n    var documentY = y + clientRect.top;\n    var normalizedX;\n    var normalizedY; // Determine touch point relative to the ripple container.\n    if (ev.type === 'touchstart') {\n        normalizedX = ev.changedTouches[0].pageX - documentX;\n        normalizedY = ev.changedTouches[0].pageY - documentY;\n    }\n    else {\n        normalizedX = ev.pageX - documentX;\n        normalizedY = ev.pageY - documentY;\n    }\n    return {\n        x: normalizedX,\n        y: normalizedY\n    };\n}\nvar ACTIVATION_EVENT_TYPES = ['touchstart', 'pointerdown', 'mousedown', 'keydown']; // Deactivation events registered on documentElement when a pointer-related down event occurs\nvar POINTER_DEACTIVATION_EVENT_TYPES = ['touchend', 'pointerup', 'mouseup']; // Tracks activations that have occurred on the current frame, to avoid simultaneous nested activations\n/** @type {!Array<!EventTarget>} */\nvar activatedTargets = [];\n/**\n * @extends {MDCFoundation<!MDCRippleAdapter>}\n */\nvar MDCRippleFoundation = \n/*#__PURE__*/\nfunction (_MDCFoundation) {\n    _inherits(MDCRippleFoundation, _MDCFoundation);\n    _createClass(MDCRippleFoundation, null, [{\n            key: \"cssClasses\",\n            get: function get() {\n                return cssClasses;\n            }\n        }, {\n            key: \"strings\",\n            get: function get() {\n                return strings;\n            }\n        }, {\n            key: \"numbers\",\n            get: function get() {\n                return numbers;\n            }\n        }, {\n            key: \"defaultAdapter\",\n            get: function get() {\n                return {\n                    browserSupportsCssVars: function browserSupportsCssVars() { },\n                    isUnbounded: function isUnbounded() { },\n                    isSurfaceActive: function isSurfaceActive() { },\n                    isSurfaceDisabled: function isSurfaceDisabled() { },\n                    addClass: function addClass() { },\n                    removeClass: function removeClass() { },\n                    containsEventTarget: function containsEventTarget() { },\n                    registerInteractionHandler: function registerInteractionHandler() { },\n                    deregisterInteractionHandler: function deregisterInteractionHandler() { },\n                    registerDocumentInteractionHandler: function registerDocumentInteractionHandler() { },\n                    deregisterDocumentInteractionHandler: function deregisterDocumentInteractionHandler() { },\n                    registerResizeHandler: function registerResizeHandler() { },\n                    deregisterResizeHandler: function deregisterResizeHandler() { },\n                    updateCssVariable: function updateCssVariable() { },\n                    computeBoundingRect: function computeBoundingRect() { },\n                    getWindowPageOffset: function getWindowPageOffset() { }\n                };\n            }\n        }]);\n    function MDCRippleFoundation(adapter) {\n        var _this;\n        _classCallCheck(this, MDCRippleFoundation);\n        _this = _possibleConstructorReturn(this, (MDCRippleFoundation.__proto__ || Object.getPrototypeOf(MDCRippleFoundation)).call(this, Object.assign(MDCRippleFoundation.defaultAdapter, adapter)));\n        /** @private {number} */\n        _this.layoutFrame_ = 0;\n        /** @private {!ClientRect} */\n        _this.frame_ =\n            /** @type {!ClientRect} */\n            {\n                width: 0,\n                height: 0\n            };\n        /** @private {!ActivationStateType} */\n        _this.activationState_ = _this.defaultActivationState_();\n        /** @private {number} */\n        _this.initialSize_ = 0;\n        /** @private {number} */\n        _this.maxRadius_ = 0;\n        /** @private {function(!Event)} */\n        _this.activateHandler_ = function (e) {\n            return _this.activate_(e);\n        };\n        /** @private {function(!Event)} */\n        _this.deactivateHandler_ = function (e) {\n            return _this.deactivate_(e);\n        };\n        /** @private {function(?Event=)} */\n        _this.focusHandler_ = function () {\n            return requestAnimationFrame(function () {\n                return _this.adapter_.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);\n            });\n        };\n        /** @private {function(?Event=)} */\n        _this.blurHandler_ = function () {\n            return requestAnimationFrame(function () {\n                return _this.adapter_.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);\n            });\n        };\n        /** @private {!Function} */\n        _this.resizeHandler_ = function () {\n            return _this.layout();\n        };\n        /** @private {{left: number, top:number}} */\n        _this.unboundedCoords_ = {\n            left: 0,\n            top: 0\n        };\n        /** @private {number} */\n        _this.fgScale_ = 0;\n        /** @private {number} */\n        _this.activationTimer_ = 0;\n        /** @private {number} */\n        _this.fgDeactivationRemovalTimer_ = 0;\n        /** @private {boolean} */\n        _this.activationAnimationHasEnded_ = false;\n        /** @private {!Function} */\n        _this.activationTimerCallback_ = function () {\n            _this.activationAnimationHasEnded_ = true;\n            _this.runDeactivationUXLogicIfReady_();\n        };\n        /** @private {?Event} */\n        _this.previousActivationEvent_ = null;\n        return _this;\n    }\n    /**\n     * We compute this property so that we are not querying information about the client\n     * until the point in time where the foundation requests it. This prevents scenarios where\n     * client-side feature-detection may happen too early, such as when components are rendered on the server\n     * and then initialized at mount time on the client.\n     * @return {boolean}\n     * @private\n     */\n    _createClass(MDCRippleFoundation, [{\n            key: \"isSupported_\",\n            value: function isSupported_() {\n                return this.adapter_.browserSupportsCssVars();\n            }\n            /**\n             * @return {!ActivationStateType}\n             */\n        }, {\n            key: \"defaultActivationState_\",\n            value: function defaultActivationState_() {\n                return {\n                    isActivated: false,\n                    hasDeactivationUXRun: false,\n                    wasActivatedByPointer: false,\n                    wasElementMadeActive: false,\n                    activationEvent: null,\n                    isProgrammatic: false\n                };\n            }\n        }, {\n            key: \"init\",\n            value: function init() {\n                var _this2 = this;\n                if (!this.isSupported_()) {\n                    return;\n                }\n                this.registerRootHandlers_();\n                var _MDCRippleFoundation$ = MDCRippleFoundation.cssClasses, ROOT = _MDCRippleFoundation$.ROOT, UNBOUNDED = _MDCRippleFoundation$.UNBOUNDED;\n                requestAnimationFrame(function () {\n                    _this2.adapter_.addClass(ROOT);\n                    if (_this2.adapter_.isUnbounded()) {\n                        _this2.adapter_.addClass(UNBOUNDED); // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple\n                        _this2.layoutInternal_();\n                    }\n                });\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n                var _this3 = this;\n                if (!this.isSupported_()) {\n                    return;\n                }\n                if (this.activationTimer_) {\n                    clearTimeout(this.activationTimer_);\n                    this.activationTimer_ = 0;\n                    var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;\n                    this.adapter_.removeClass(FG_ACTIVATION);\n                }\n                this.deregisterRootHandlers_();\n                this.deregisterDeactivationHandlers_();\n                var _MDCRippleFoundation$2 = MDCRippleFoundation.cssClasses, ROOT = _MDCRippleFoundation$2.ROOT, UNBOUNDED = _MDCRippleFoundation$2.UNBOUNDED;\n                requestAnimationFrame(function () {\n                    _this3.adapter_.removeClass(ROOT);\n                    _this3.adapter_.removeClass(UNBOUNDED);\n                    _this3.removeCssVars_();\n                });\n            }\n            /** @private */\n        }, {\n            key: \"registerRootHandlers_\",\n            value: function registerRootHandlers_() {\n                var _this4 = this;\n                ACTIVATION_EVENT_TYPES.forEach(function (type) {\n                    _this4.adapter_.registerInteractionHandler(type, _this4.activateHandler_);\n                });\n                this.adapter_.registerInteractionHandler('focus', this.focusHandler_);\n                this.adapter_.registerInteractionHandler('blur', this.blurHandler_);\n                if (this.adapter_.isUnbounded()) {\n                    this.adapter_.registerResizeHandler(this.resizeHandler_);\n                }\n            }\n            /**\n             * @param {!Event} e\n             * @private\n             */\n        }, {\n            key: \"registerDeactivationHandlers_\",\n            value: function registerDeactivationHandlers_(e) {\n                var _this5 = this;\n                if (e.type === 'keydown') {\n                    this.adapter_.registerInteractionHandler('keyup', this.deactivateHandler_);\n                }\n                else {\n                    POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (type) {\n                        _this5.adapter_.registerDocumentInteractionHandler(type, _this5.deactivateHandler_);\n                    });\n                }\n            }\n            /** @private */\n        }, {\n            key: \"deregisterRootHandlers_\",\n            value: function deregisterRootHandlers_() {\n                var _this6 = this;\n                ACTIVATION_EVENT_TYPES.forEach(function (type) {\n                    _this6.adapter_.deregisterInteractionHandler(type, _this6.activateHandler_);\n                });\n                this.adapter_.deregisterInteractionHandler('focus', this.focusHandler_);\n                this.adapter_.deregisterInteractionHandler('blur', this.blurHandler_);\n                if (this.adapter_.isUnbounded()) {\n                    this.adapter_.deregisterResizeHandler(this.resizeHandler_);\n                }\n            }\n            /** @private */\n        }, {\n            key: \"deregisterDeactivationHandlers_\",\n            value: function deregisterDeactivationHandlers_() {\n                var _this7 = this;\n                this.adapter_.deregisterInteractionHandler('keyup', this.deactivateHandler_);\n                POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (type) {\n                    _this7.adapter_.deregisterDocumentInteractionHandler(type, _this7.deactivateHandler_);\n                });\n            }\n            /** @private */\n        }, {\n            key: \"removeCssVars_\",\n            value: function removeCssVars_() {\n                var _this8 = this;\n                var strings$$1 = MDCRippleFoundation.strings;\n                Object.keys(strings$$1).forEach(function (k) {\n                    if (k.indexOf('VAR_') === 0) {\n                        _this8.adapter_.updateCssVariable(strings$$1[k], null);\n                    }\n                });\n            }\n            /**\n             * @param {?Event} e\n             * @private\n             */\n        }, {\n            key: \"activate_\",\n            value: function activate_(e) {\n                var _this9 = this;\n                if (this.adapter_.isSurfaceDisabled()) {\n                    return;\n                }\n                var activationState = this.activationState_;\n                if (activationState.isActivated) {\n                    return;\n                } // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction\n                var previousActivationEvent = this.previousActivationEvent_;\n                var isSameInteraction = previousActivationEvent && e && previousActivationEvent.type !== e.type;\n                if (isSameInteraction) {\n                    return;\n                }\n                activationState.isActivated = true;\n                activationState.isProgrammatic = e === null;\n                activationState.activationEvent = e;\n                activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : e.type === 'mousedown' || e.type === 'touchstart' || e.type === 'pointerdown';\n                var hasActivatedChild = e && activatedTargets.length > 0 && activatedTargets.some(function (target) {\n                    return _this9.adapter_.containsEventTarget(target);\n                });\n                if (hasActivatedChild) {\n                    // Immediately reset activation state, while preserving logic that prevents touch follow-on events\n                    this.resetActivationState_();\n                    return;\n                }\n                if (e) {\n                    activatedTargets.push(\n                    /** @type {!EventTarget} */\n                    e.target);\n                    this.registerDeactivationHandlers_(e);\n                }\n                activationState.wasElementMadeActive = this.checkElementMadeActive_(e);\n                if (activationState.wasElementMadeActive) {\n                    this.animateActivation_();\n                }\n                requestAnimationFrame(function () {\n                    // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples\n                    activatedTargets = [];\n                    if (!activationState.wasElementMadeActive && (e.key === ' ' || e.keyCode === 32)) {\n                        // If space was pressed, try again within an rAF call to detect :active, because different UAs report\n                        // active states inconsistently when they're called within event handling code:\n                        // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971\n                        // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741\n                        // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS\n                        // variable is set within a rAF callback for a submit button interaction (#2241).\n                        activationState.wasElementMadeActive = _this9.checkElementMadeActive_(e);\n                        if (activationState.wasElementMadeActive) {\n                            _this9.animateActivation_();\n                        }\n                    }\n                    if (!activationState.wasElementMadeActive) {\n                        // Reset activation state immediately if element was not made active.\n                        _this9.activationState_ = _this9.defaultActivationState_();\n                    }\n                });\n            }\n            /**\n             * @param {?Event} e\n             * @private\n             */\n        }, {\n            key: \"checkElementMadeActive_\",\n            value: function checkElementMadeActive_(e) {\n                return e && e.type === 'keydown' ? this.adapter_.isSurfaceActive() : true;\n            }\n            /**\n             * @param {?Event=} event Optional event containing position information.\n             */\n        }, {\n            key: \"activate\",\n            value: function activate() {\n                var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n                this.activate_(event);\n            }\n            /** @private */\n        }, {\n            key: \"animateActivation_\",\n            value: function animateActivation_() {\n                var _this10 = this;\n                var _MDCRippleFoundation$3 = MDCRippleFoundation.strings, VAR_FG_TRANSLATE_START = _MDCRippleFoundation$3.VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END = _MDCRippleFoundation$3.VAR_FG_TRANSLATE_END;\n                var _MDCRippleFoundation$4 = MDCRippleFoundation.cssClasses, FG_DEACTIVATION = _MDCRippleFoundation$4.FG_DEACTIVATION, FG_ACTIVATION = _MDCRippleFoundation$4.FG_ACTIVATION;\n                var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;\n                this.layoutInternal_();\n                var translateStart = '';\n                var translateEnd = '';\n                if (!this.adapter_.isUnbounded()) {\n                    var _getFgTranslationCoor = this.getFgTranslationCoordinates_(), startPoint = _getFgTranslationCoor.startPoint, endPoint = _getFgTranslationCoor.endPoint;\n                    translateStart = \"\".concat(startPoint.x, \"px, \").concat(startPoint.y, \"px\");\n                    translateEnd = \"\".concat(endPoint.x, \"px, \").concat(endPoint.y, \"px\");\n                }\n                this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);\n                this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd); // Cancel any ongoing activation/deactivation animations\n                clearTimeout(this.activationTimer_);\n                clearTimeout(this.fgDeactivationRemovalTimer_);\n                this.rmBoundedActivationClasses_();\n                this.adapter_.removeClass(FG_DEACTIVATION); // Force layout in order to re-trigger the animation.\n                this.adapter_.computeBoundingRect();\n                this.adapter_.addClass(FG_ACTIVATION);\n                this.activationTimer_ = setTimeout(function () {\n                    return _this10.activationTimerCallback_();\n                }, DEACTIVATION_TIMEOUT_MS);\n            }\n            /**\n             * @private\n             * @return {{startPoint: PointType, endPoint: PointType}}\n             */\n        }, {\n            key: \"getFgTranslationCoordinates_\",\n            value: function getFgTranslationCoordinates_() {\n                var _activationState_ = this.activationState_, activationEvent = _activationState_.activationEvent, wasActivatedByPointer = _activationState_.wasActivatedByPointer;\n                var startPoint;\n                if (wasActivatedByPointer) {\n                    startPoint = getNormalizedEventCoords(\n                    /** @type {!Event} */\n                    activationEvent, this.adapter_.getWindowPageOffset(), this.adapter_.computeBoundingRect());\n                }\n                else {\n                    startPoint = {\n                        x: this.frame_.width / 2,\n                        y: this.frame_.height / 2\n                    };\n                } // Center the element around the start point.\n                startPoint = {\n                    x: startPoint.x - this.initialSize_ / 2,\n                    y: startPoint.y - this.initialSize_ / 2\n                };\n                var endPoint = {\n                    x: this.frame_.width / 2 - this.initialSize_ / 2,\n                    y: this.frame_.height / 2 - this.initialSize_ / 2\n                };\n                return {\n                    startPoint: startPoint,\n                    endPoint: endPoint\n                };\n            }\n            /** @private */\n        }, {\n            key: \"runDeactivationUXLogicIfReady_\",\n            value: function runDeactivationUXLogicIfReady_() {\n                var _this11 = this;\n                // This method is called both when a pointing device is released, and when the activation animation ends.\n                // The deactivation animation should only run after both of those occur.\n                var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;\n                var _activationState_2 = this.activationState_, hasDeactivationUXRun = _activationState_2.hasDeactivationUXRun, isActivated = _activationState_2.isActivated;\n                var activationHasEnded = hasDeactivationUXRun || !isActivated;\n                if (activationHasEnded && this.activationAnimationHasEnded_) {\n                    this.rmBoundedActivationClasses_();\n                    this.adapter_.addClass(FG_DEACTIVATION);\n                    this.fgDeactivationRemovalTimer_ = setTimeout(function () {\n                        _this11.adapter_.removeClass(FG_DEACTIVATION);\n                    }, numbers.FG_DEACTIVATION_MS);\n                }\n            }\n            /** @private */\n        }, {\n            key: \"rmBoundedActivationClasses_\",\n            value: function rmBoundedActivationClasses_() {\n                var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;\n                this.adapter_.removeClass(FG_ACTIVATION);\n                this.activationAnimationHasEnded_ = false;\n                this.adapter_.computeBoundingRect();\n            }\n        }, {\n            key: \"resetActivationState_\",\n            value: function resetActivationState_() {\n                var _this12 = this;\n                this.previousActivationEvent_ = this.activationState_.activationEvent;\n                this.activationState_ = this.defaultActivationState_(); // Touch devices may fire additional events for the same interaction within a short time.\n                // Store the previous event until it's safe to assume that subsequent events are for new interactions.\n                setTimeout(function () {\n                    return _this12.previousActivationEvent_ = null;\n                }, MDCRippleFoundation.numbers.TAP_DELAY_MS);\n            }\n            /**\n             * @param {?Event} e\n             * @private\n             */\n        }, {\n            key: \"deactivate_\",\n            value: function deactivate_(e) {\n                var _this13 = this;\n                var activationState = this.activationState_; // This can happen in scenarios such as when you have a keyup event that blurs the element.\n                if (!activationState.isActivated) {\n                    return;\n                }\n                var state = \n                /** @type {!ActivationStateType} */\n                Object.assign({}, activationState);\n                if (activationState.isProgrammatic) {\n                    var evtObject = null;\n                    requestAnimationFrame(function () {\n                        return _this13.animateDeactivation_(evtObject, state);\n                    });\n                    this.resetActivationState_();\n                }\n                else {\n                    this.deregisterDeactivationHandlers_();\n                    requestAnimationFrame(function () {\n                        _this13.activationState_.hasDeactivationUXRun = true;\n                        _this13.animateDeactivation_(e, state);\n                        _this13.resetActivationState_();\n                    });\n                }\n            }\n            /**\n             * @param {?Event=} event Optional event containing position information.\n             */\n        }, {\n            key: \"deactivate\",\n            value: function deactivate() {\n                var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n                this.deactivate_(event);\n            }\n            /**\n             * @param {Event} e\n             * @param {!ActivationStateType} options\n             * @private\n             */\n        }, {\n            key: \"animateDeactivation_\",\n            value: function animateDeactivation_(e, _ref) {\n                var wasActivatedByPointer = _ref.wasActivatedByPointer, wasElementMadeActive = _ref.wasElementMadeActive;\n                if (wasActivatedByPointer || wasElementMadeActive) {\n                    this.runDeactivationUXLogicIfReady_();\n                }\n            }\n        }, {\n            key: \"layout\",\n            value: function layout() {\n                var _this14 = this;\n                if (this.layoutFrame_) {\n                    cancelAnimationFrame(this.layoutFrame_);\n                }\n                this.layoutFrame_ = requestAnimationFrame(function () {\n                    _this14.layoutInternal_();\n                    _this14.layoutFrame_ = 0;\n                });\n            }\n            /** @private */\n        }, {\n            key: \"layoutInternal_\",\n            value: function layoutInternal_() {\n                var _this15 = this;\n                this.frame_ = this.adapter_.computeBoundingRect();\n                var maxDim = Math.max(this.frame_.height, this.frame_.width); // Surface diameter is treated differently for unbounded vs. bounded ripples.\n                // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately\n                // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically\n                // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter\n                // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via\n                // `overflow: hidden`.\n                var getBoundedRadius = function getBoundedRadius() {\n                    var hypotenuse = Math.sqrt(Math.pow(_this15.frame_.width, 2) + Math.pow(_this15.frame_.height, 2));\n                    return hypotenuse + MDCRippleFoundation.numbers.PADDING;\n                };\n                this.maxRadius_ = this.adapter_.isUnbounded() ? maxDim : getBoundedRadius(); // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform\n                this.initialSize_ = maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE;\n                this.fgScale_ = this.maxRadius_ / this.initialSize_;\n                this.updateLayoutCssVars_();\n            }\n            /** @private */\n        }, {\n            key: \"updateLayoutCssVars_\",\n            value: function updateLayoutCssVars_() {\n                var _MDCRippleFoundation$5 = MDCRippleFoundation.strings, VAR_FG_SIZE = _MDCRippleFoundation$5.VAR_FG_SIZE, VAR_LEFT = _MDCRippleFoundation$5.VAR_LEFT, VAR_TOP = _MDCRippleFoundation$5.VAR_TOP, VAR_FG_SCALE = _MDCRippleFoundation$5.VAR_FG_SCALE;\n                this.adapter_.updateCssVariable(VAR_FG_SIZE, \"\".concat(this.initialSize_, \"px\"));\n                this.adapter_.updateCssVariable(VAR_FG_SCALE, this.fgScale_);\n                if (this.adapter_.isUnbounded()) {\n                    this.unboundedCoords_ = {\n                        left: Math.round(this.frame_.width / 2 - this.initialSize_ / 2),\n                        top: Math.round(this.frame_.height / 2 - this.initialSize_ / 2)\n                    };\n                    this.adapter_.updateCssVariable(VAR_LEFT, \"\".concat(this.unboundedCoords_.left, \"px\"));\n                    this.adapter_.updateCssVariable(VAR_TOP, \"\".concat(this.unboundedCoords_.top, \"px\"));\n                }\n            }\n            /** @param {boolean} unbounded */\n        }, {\n            key: \"setUnbounded\",\n            value: function setUnbounded(unbounded) {\n                var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;\n                if (unbounded) {\n                    this.adapter_.addClass(UNBOUNDED);\n                }\n                else {\n                    this.adapter_.removeClass(UNBOUNDED);\n                }\n            }\n        }]);\n    return MDCRippleFoundation;\n}(MDCFoundation);\n/**\n * @extends MDCComponent<!MDCRippleFoundation>\n */\nvar MDCRipple = \n/*#__PURE__*/\nfunction (_MDCComponent) {\n    _inherits(MDCRipple, _MDCComponent);\n    /** @param {...?} args */\n    function MDCRipple() {\n        var _ref;\n        var _this;\n        _classCallCheck(this, MDCRipple);\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n        _this = _possibleConstructorReturn(this, (_ref = MDCRipple.__proto__ || Object.getPrototypeOf(MDCRipple)).call.apply(_ref, [this].concat(args)));\n        /** @type {boolean} */\n        _this.disabled = false;\n        /** @private {boolean} */\n        _this.unbounded_;\n        return _this;\n    }\n    /**\n     * @param {!Element} root\n     * @param {{isUnbounded: (boolean|undefined)}=} options\n     * @return {!MDCRipple}\n     */\n    _createClass(MDCRipple, [{\n            key: \"setUnbounded_\",\n            /**\n             * Closure Compiler throws an access control error when directly accessing a\n             * protected or private property inside a getter/setter, like unbounded above.\n             * By accessing the protected property inside a method, we solve that problem.\n             * That's why this function exists.\n             * @private\n             */\n            value: function setUnbounded_() {\n                this.foundation_.setUnbounded(this.unbounded_);\n            }\n        }, {\n            key: \"activate\",\n            value: function activate() {\n                this.foundation_.activate();\n            }\n        }, {\n            key: \"deactivate\",\n            value: function deactivate() {\n                this.foundation_.deactivate();\n            }\n        }, {\n            key: \"layout\",\n            value: function layout() {\n                this.foundation_.layout();\n            }\n            /** @return {!MDCRippleFoundation} */\n        }, {\n            key: \"getDefaultFoundation\",\n            value: function getDefaultFoundation() {\n                return new MDCRippleFoundation(MDCRipple.createAdapter(this));\n            }\n        }, {\n            key: \"initialSyncWithDOM\",\n            value: function initialSyncWithDOM() {\n                this.unbounded = 'mdcRippleIsUnbounded' in this.root_.dataset;\n            }\n        }, {\n            key: \"unbounded\",\n            /** @return {boolean} */\n            get: function get() {\n                return this.unbounded_;\n            }\n            /** @param {boolean} unbounded */\n            ,\n            set: function set(unbounded) {\n                this.unbounded_ = Boolean(unbounded);\n                this.setUnbounded_();\n            }\n        }], [{\n            key: \"attachTo\",\n            value: function attachTo(root) {\n                var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref2$isUnbounded = _ref2.isUnbounded, isUnbounded = _ref2$isUnbounded === void 0 ? undefined : _ref2$isUnbounded;\n                var ripple = new MDCRipple(root); // Only override unbounded behavior if option is explicitly specified\n                if (isUnbounded !== undefined) {\n                    ripple.unbounded =\n                        /** @type {boolean} */\n                        isUnbounded;\n                }\n                return ripple;\n            }\n            /**\n             * @param {!RippleCapableSurface} instance\n             * @return {!MDCRippleAdapter}\n             */\n        }, {\n            key: \"createAdapter\",\n            value: function createAdapter(instance) {\n                var MATCHES = getMatchesProperty(HTMLElement.prototype);\n                return {\n                    browserSupportsCssVars: function browserSupportsCssVars() {\n                        return supportsCssVariables(window);\n                    },\n                    isUnbounded: function isUnbounded() {\n                        return instance.unbounded;\n                    },\n                    isSurfaceActive: function isSurfaceActive() {\n                        return instance.root_[MATCHES](':active');\n                    },\n                    isSurfaceDisabled: function isSurfaceDisabled() {\n                        return instance.disabled;\n                    },\n                    addClass: function addClass(className) {\n                        return instance.root_.classList.add(className);\n                    },\n                    removeClass: function removeClass(className) {\n                        return instance.root_.classList.remove(className);\n                    },\n                    containsEventTarget: function containsEventTarget(target) {\n                        return instance.root_.contains(target);\n                    },\n                    registerInteractionHandler: function registerInteractionHandler(evtType, handler) {\n                        return instance.root_.addEventListener(evtType, handler, applyPassive());\n                    },\n                    deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {\n                        return instance.root_.removeEventListener(evtType, handler, applyPassive());\n                    },\n                    registerDocumentInteractionHandler: function registerDocumentInteractionHandler(evtType, handler) {\n                        return document.documentElement.addEventListener(evtType, handler, applyPassive());\n                    },\n                    deregisterDocumentInteractionHandler: function deregisterDocumentInteractionHandler(evtType, handler) {\n                        return document.documentElement.removeEventListener(evtType, handler, applyPassive());\n                    },\n                    registerResizeHandler: function registerResizeHandler(handler) {\n                        return window.addEventListener('resize', handler);\n                    },\n                    deregisterResizeHandler: function deregisterResizeHandler(handler) {\n                        return window.removeEventListener('resize', handler);\n                    },\n                    updateCssVariable: function updateCssVariable(varName, value) {\n                        return instance.root_.style.setProperty(varName, value);\n                    },\n                    computeBoundingRect: function computeBoundingRect() {\n                        return instance.root_.getBoundingClientRect();\n                    },\n                    getWindowPageOffset: function getWindowPageOffset() {\n                        return {\n                            x: window.pageXOffset,\n                            y: window.pageYOffset\n                        };\n                    }\n                };\n            }\n        }]);\n    return MDCRipple;\n}(MDCComponent);\n/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar cssClasses$1 = {\n    ROOT: 'mdc-dialog',\n    OPEN: 'mdc-dialog--open',\n    ANIMATING: 'mdc-dialog--animating',\n    BACKDROP: 'mdc-dialog__backdrop',\n    SCROLL_LOCK: 'mdc-dialog-scroll-lock',\n    ACCEPT_BTN: 'mdc-dialog__footer__button--accept',\n    CANCEL_BTN: 'mdc-dialog__footer__button--cancel'\n};\nvar strings$1 = {\n    OPEN_DIALOG_SELECTOR: '.mdc-dialog--open',\n    DIALOG_SURFACE_SELECTOR: '.mdc-dialog__surface',\n    ACCEPT_SELECTOR: '.mdc-dialog__footer__button--accept',\n    ACCEPT_EVENT: 'MDCDialog:accept',\n    CANCEL_EVENT: 'MDCDialog:cancel'\n};\nvar MDCDialogFoundation = \n/*#__PURE__*/\nfunction (_MDCFoundation) {\n    _inherits(MDCDialogFoundation, _MDCFoundation);\n    _createClass(MDCDialogFoundation, null, [{\n            key: \"cssClasses\",\n            get: function get() {\n                return cssClasses$1;\n            }\n        }, {\n            key: \"strings\",\n            get: function get() {\n                return strings$1;\n            }\n        }, {\n            key: \"defaultAdapter\",\n            get: function get() {\n                return {\n                    addClass: function addClass() { },\n                    removeClass: function removeClass() { },\n                    addBodyClass: function addBodyClass() { },\n                    removeBodyClass: function removeBodyClass() { },\n                    eventTargetHasClass: function eventTargetHasClass() {\n                        return (\n                        /* target: EventTarget, className: string */\n                        /* boolean */\n                        false);\n                    },\n                    registerInteractionHandler: function registerInteractionHandler() { },\n                    deregisterInteractionHandler: function deregisterInteractionHandler() { },\n                    registerSurfaceInteractionHandler: function registerSurfaceInteractionHandler() { },\n                    deregisterSurfaceInteractionHandler: function deregisterSurfaceInteractionHandler() { },\n                    registerDocumentKeydownHandler: function registerDocumentKeydownHandler() { },\n                    deregisterDocumentKeydownHandler: function deregisterDocumentKeydownHandler() { },\n                    registerTransitionEndHandler: function registerTransitionEndHandler() { },\n                    deregisterTransitionEndHandler: function deregisterTransitionEndHandler() { },\n                    notifyAccept: function notifyAccept() { },\n                    notifyCancel: function notifyCancel() { },\n                    trapFocusOnSurface: function trapFocusOnSurface() { },\n                    untrapFocusOnSurface: function untrapFocusOnSurface() { },\n                    isDialog: function isDialog() {\n                        return (\n                        /* el: Element */\n                        /* boolean */\n                        false);\n                    }\n                };\n            }\n        }]);\n    function MDCDialogFoundation(adapter) {\n        var _this;\n        _classCallCheck(this, MDCDialogFoundation);\n        _this = _possibleConstructorReturn(this, (MDCDialogFoundation.__proto__ || Object.getPrototypeOf(MDCDialogFoundation)).call(this, Object.assign(MDCDialogFoundation.defaultAdapter, adapter)));\n        _this.isOpen_ = false;\n        _this.componentClickHandler_ = function (evt) {\n            if (_this.adapter_.eventTargetHasClass(evt.target, cssClasses$1.BACKDROP)) {\n                _this.cancel(true);\n            }\n        };\n        _this.dialogClickHandler_ = function (evt) {\n            return _this.handleDialogClick_(evt);\n        };\n        _this.documentKeydownHandler_ = function (evt) {\n            if (evt.key && evt.key === 'Escape' || evt.keyCode === 27) {\n                _this.cancel(true);\n            }\n        };\n        _this.transitionEndHandler_ = function (evt) {\n            return _this.handleTransitionEnd_(evt);\n        };\n        return _this;\n    }\n    _createClass(MDCDialogFoundation, [{\n            key: \"destroy\",\n            value: function destroy() {\n                // Ensure that dialog is cleaned up when destroyed\n                if (this.isOpen_) {\n                    this.adapter_.deregisterSurfaceInteractionHandler('click', this.dialogClickHandler_);\n                    this.adapter_.deregisterDocumentKeydownHandler(this.documentKeydownHandler_);\n                    this.adapter_.deregisterInteractionHandler('click', this.componentClickHandler_);\n                    this.adapter_.untrapFocusOnSurface();\n                    this.adapter_.deregisterTransitionEndHandler(this.transitionEndHandler_);\n                    this.adapter_.removeClass(MDCDialogFoundation.cssClasses.ANIMATING);\n                    this.adapter_.removeClass(MDCDialogFoundation.cssClasses.OPEN);\n                    this.enableScroll_();\n                }\n            }\n        }, {\n            key: \"open\",\n            value: function open() {\n                this.isOpen_ = true;\n                this.disableScroll_();\n                this.adapter_.registerDocumentKeydownHandler(this.documentKeydownHandler_);\n                this.adapter_.registerSurfaceInteractionHandler('click', this.dialogClickHandler_);\n                this.adapter_.registerInteractionHandler('click', this.componentClickHandler_);\n                this.adapter_.registerTransitionEndHandler(this.transitionEndHandler_);\n                this.adapter_.addClass(MDCDialogFoundation.cssClasses.ANIMATING);\n                this.adapter_.addClass(MDCDialogFoundation.cssClasses.OPEN);\n            }\n        }, {\n            key: \"close\",\n            value: function close() {\n                this.isOpen_ = false;\n                this.enableScroll_();\n                this.adapter_.deregisterSurfaceInteractionHandler('click', this.dialogClickHandler_);\n                this.adapter_.deregisterDocumentKeydownHandler(this.documentKeydownHandler_);\n                this.adapter_.deregisterInteractionHandler('click', this.componentClickHandler_);\n                this.adapter_.untrapFocusOnSurface();\n                this.adapter_.registerTransitionEndHandler(this.transitionEndHandler_);\n                this.adapter_.addClass(MDCDialogFoundation.cssClasses.ANIMATING);\n                this.adapter_.removeClass(MDCDialogFoundation.cssClasses.OPEN);\n            }\n        }, {\n            key: \"isOpen\",\n            value: function isOpen() {\n                return this.isOpen_;\n            }\n        }, {\n            key: \"accept\",\n            value: function accept(shouldNotify) {\n                if (shouldNotify) {\n                    this.adapter_.notifyAccept();\n                }\n                this.close();\n            }\n        }, {\n            key: \"cancel\",\n            value: function cancel(shouldNotify) {\n                if (shouldNotify) {\n                    this.adapter_.notifyCancel();\n                }\n                this.close();\n            }\n        }, {\n            key: \"handleDialogClick_\",\n            value: function handleDialogClick_(evt) {\n                var target = evt.target;\n                if (this.adapter_.eventTargetHasClass(target, cssClasses$1.ACCEPT_BTN)) {\n                    this.accept(true);\n                }\n                else if (this.adapter_.eventTargetHasClass(target, cssClasses$1.CANCEL_BTN)) {\n                    this.cancel(true);\n                }\n            }\n        }, {\n            key: \"handleTransitionEnd_\",\n            value: function handleTransitionEnd_(evt) {\n                if (this.adapter_.isDialog(evt.target)) {\n                    this.adapter_.deregisterTransitionEndHandler(this.transitionEndHandler_);\n                    this.adapter_.removeClass(MDCDialogFoundation.cssClasses.ANIMATING);\n                    if (this.isOpen_) {\n                        this.adapter_.trapFocusOnSurface();\n                    }\n                }\n            }\n        }, {\n            key: \"disableScroll_\",\n            value: function disableScroll_() {\n                this.adapter_.addBodyClass(cssClasses$1.SCROLL_LOCK);\n            }\n        }, {\n            key: \"enableScroll_\",\n            value: function enableScroll_() {\n                this.adapter_.removeBodyClass(cssClasses$1.SCROLL_LOCK);\n            }\n        }]);\n    return MDCDialogFoundation;\n}(MDCFoundation);\nvar tabbable = function tabbable(el, options) {\n    options = options || {};\n    var elementDocument = el.ownerDocument || el;\n    var basicTabbables = [];\n    var orderedTabbables = []; // A node is \"available\" if\n    // - it's computed style\n    var isUnavailable = createIsUnavailable(elementDocument);\n    var candidateSelectors = ['input', 'select', 'a[href]', 'textarea', 'button', '[tabindex]'];\n    var candidates = el.querySelectorAll(candidateSelectors.join(','));\n    if (options.includeContainer) {\n        var matches = Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n        if (candidateSelectors.some(function (candidateSelector) {\n            return matches.call(el, candidateSelector);\n        })) {\n            candidates = Array.prototype.slice.apply(candidates);\n            candidates.unshift(el);\n        }\n    }\n    var candidate, candidateIndexAttr, candidateIndex;\n    for (var i = 0, l = candidates.length; i < l; i++) {\n        candidate = candidates[i];\n        candidateIndexAttr = parseInt(candidate.getAttribute('tabindex'), 10);\n        candidateIndex = isNaN(candidateIndexAttr) ? candidate.tabIndex : candidateIndexAttr;\n        if (candidateIndex < 0 || candidate.tagName === 'INPUT' && candidate.type === 'hidden' || candidate.disabled || isUnavailable(candidate, elementDocument)) {\n            continue;\n        }\n        if (candidateIndex === 0) {\n            basicTabbables.push(candidate);\n        }\n        else {\n            orderedTabbables.push({\n                index: i,\n                tabIndex: candidateIndex,\n                node: candidate\n            });\n        }\n    }\n    var tabbableNodes = orderedTabbables.sort(function (a, b) {\n        return a.tabIndex === b.tabIndex ? a.index - b.index : a.tabIndex - b.tabIndex;\n    }).map(function (a) {\n        return a.node;\n    });\n    Array.prototype.push.apply(tabbableNodes, basicTabbables);\n    return tabbableNodes;\n};\nfunction createIsUnavailable(elementDocument) {\n    // Node cache must be refreshed on every check, in case\n    // the content of the element has changed\n    var isOffCache = []; // \"off\" means `display: none;`, as opposed to \"hidden\",\n    // which means `visibility: hidden;`. getComputedStyle\n    // accurately reflects visiblity in context but not\n    // \"off\" state, so we need to recursively check parents.\n    function isOff(node, nodeComputedStyle) {\n        if (node === elementDocument.documentElement)\n            return false; // Find the cached node (Array.prototype.find not available in IE9)\n        for (var i = 0, length = isOffCache.length; i < length; i++) {\n            if (isOffCache[i][0] === node)\n                return isOffCache[i][1];\n        }\n        nodeComputedStyle = nodeComputedStyle || elementDocument.defaultView.getComputedStyle(node);\n        var result = false;\n        if (nodeComputedStyle.display === 'none') {\n            result = true;\n        }\n        else if (node.parentNode) {\n            result = isOff(node.parentNode);\n        }\n        isOffCache.push([node, result]);\n        return result;\n    }\n    return function isUnavailable(node) {\n        if (node === elementDocument.documentElement)\n            return false;\n        var computedStyle = elementDocument.defaultView.getComputedStyle(node);\n        if (isOff(node, computedStyle))\n            return true;\n        return computedStyle.visibility === 'hidden';\n    };\n}\nvar listeningFocusTrap = null;\nfunction focusTrap(element, userOptions) {\n    var tabbableNodes = [];\n    var firstTabbableNode = null;\n    var lastTabbableNode = null;\n    var nodeFocusedBeforeActivation = null;\n    var active = false;\n    var paused = false;\n    var tabEvent = null;\n    var container = typeof element === 'string' ? document.querySelector(element) : element;\n    var config = userOptions || {};\n    config.returnFocusOnDeactivate = userOptions && userOptions.returnFocusOnDeactivate !== undefined ? userOptions.returnFocusOnDeactivate : true;\n    config.escapeDeactivates = userOptions && userOptions.escapeDeactivates !== undefined ? userOptions.escapeDeactivates : true;\n    var trap = {\n        activate: activate,\n        deactivate: deactivate,\n        pause: pause,\n        unpause: unpause\n    };\n    return trap;\n    function activate(activateOptions) {\n        if (active)\n            return;\n        var defaultedActivateOptions = {\n            onActivate: activateOptions && activateOptions.onActivate !== undefined ? activateOptions.onActivate : config.onActivate\n        };\n        active = true;\n        paused = false;\n        nodeFocusedBeforeActivation = document.activeElement;\n        if (defaultedActivateOptions.onActivate) {\n            defaultedActivateOptions.onActivate();\n        }\n        addListeners();\n        return trap;\n    }\n    function deactivate(deactivateOptions) {\n        if (!active)\n            return;\n        var defaultedDeactivateOptions = {\n            returnFocus: deactivateOptions && deactivateOptions.returnFocus !== undefined ? deactivateOptions.returnFocus : config.returnFocusOnDeactivate,\n            onDeactivate: deactivateOptions && deactivateOptions.onDeactivate !== undefined ? deactivateOptions.onDeactivate : config.onDeactivate\n        };\n        removeListeners();\n        if (defaultedDeactivateOptions.onDeactivate) {\n            defaultedDeactivateOptions.onDeactivate();\n        }\n        if (defaultedDeactivateOptions.returnFocus) {\n            setTimeout(function () {\n                tryFocus(nodeFocusedBeforeActivation);\n            }, 0);\n        }\n        active = false;\n        paused = false;\n        return this;\n    }\n    function pause() {\n        if (paused || !active)\n            return;\n        paused = true;\n        removeListeners();\n    }\n    function unpause() {\n        if (!paused || !active)\n            return;\n        paused = false;\n        addListeners();\n    }\n    function addListeners() {\n        if (!active)\n            return; // There can be only one listening focus trap at a time\n        if (listeningFocusTrap) {\n            listeningFocusTrap.pause();\n        }\n        listeningFocusTrap = trap;\n        updateTabbableNodes(); // Ensure that the focused element doesn't capture the event that caused the focus trap activation\n        setTimeout(function () {\n            tryFocus(firstFocusNode());\n        }, 0);\n        document.addEventListener('focus', checkFocus, true);\n        document.addEventListener('click', checkClick, true);\n        document.addEventListener('mousedown', checkPointerDown, true);\n        document.addEventListener('touchstart', checkPointerDown, true);\n        document.addEventListener('keydown', checkKey, true);\n        return trap;\n    }\n    function removeListeners() {\n        if (!active || listeningFocusTrap !== trap)\n            return;\n        document.removeEventListener('focus', checkFocus, true);\n        document.removeEventListener('click', checkClick, true);\n        document.removeEventListener('mousedown', checkPointerDown, true);\n        document.removeEventListener('touchstart', checkPointerDown, true);\n        document.removeEventListener('keydown', checkKey, true);\n        listeningFocusTrap = null;\n        return trap;\n    }\n    function getNodeForOption(optionName) {\n        var optionValue = config[optionName];\n        var node = optionValue;\n        if (!optionValue) {\n            return null;\n        }\n        if (typeof optionValue === 'string') {\n            node = document.querySelector(optionValue);\n            if (!node) {\n                throw new Error('`' + optionName + '` refers to no known node');\n            }\n        }\n        if (typeof optionValue === 'function') {\n            node = optionValue();\n            if (!node) {\n                throw new Error('`' + optionName + '` did not return a node');\n            }\n        }\n        return node;\n    }\n    function firstFocusNode() {\n        var node;\n        if (getNodeForOption('initialFocus') !== null) {\n            node = getNodeForOption('initialFocus');\n        }\n        else if (container.contains(document.activeElement)) {\n            node = document.activeElement;\n        }\n        else {\n            node = tabbableNodes[0] || getNodeForOption('fallbackFocus');\n        }\n        if (!node) {\n            throw new Error('You can\\'t have a focus-trap without at least one focusable element');\n        }\n        return node;\n    } // This needs to be done on mousedown and touchstart instead of click\n    // so that it precedes the focus event\n    function checkPointerDown(e) {\n        if (config.clickOutsideDeactivates && !container.contains(e.target)) {\n            deactivate({\n                returnFocus: false\n            });\n        }\n    }\n    function checkClick(e) {\n        if (config.clickOutsideDeactivates)\n            return;\n        if (container.contains(e.target))\n            return;\n        e.preventDefault();\n        e.stopImmediatePropagation();\n    }\n    function checkFocus(e) {\n        if (container.contains(e.target))\n            return;\n        e.preventDefault();\n        e.stopImmediatePropagation(); // Checking for a blur method here resolves a Firefox issue (#15)\n        if (typeof e.target.blur === 'function')\n            e.target.blur();\n        if (tabEvent) {\n            readjustFocus(tabEvent);\n        }\n    }\n    function checkKey(e) {\n        if (e.key === 'Tab' || e.keyCode === 9) {\n            handleTab(e);\n        }\n        if (config.escapeDeactivates !== false && isEscapeEvent(e)) {\n            deactivate();\n        }\n    }\n    function handleTab(e) {\n        updateTabbableNodes();\n        if (e.target.hasAttribute('tabindex') && Number(e.target.getAttribute('tabindex')) < 0) {\n            return tabEvent = e;\n        }\n        e.preventDefault();\n        var currentFocusIndex = tabbableNodes.indexOf(e.target);\n        if (e.shiftKey) {\n            if (e.target === firstTabbableNode || tabbableNodes.indexOf(e.target) === -1) {\n                return tryFocus(lastTabbableNode);\n            }\n            return tryFocus(tabbableNodes[currentFocusIndex - 1]);\n        }\n        if (e.target === lastTabbableNode)\n            return tryFocus(firstTabbableNode);\n        tryFocus(tabbableNodes[currentFocusIndex + 1]);\n    }\n    function updateTabbableNodes() {\n        tabbableNodes = tabbable(container);\n        firstTabbableNode = tabbableNodes[0];\n        lastTabbableNode = tabbableNodes[tabbableNodes.length - 1];\n    }\n    function readjustFocus(e) {\n        if (e.shiftKey)\n            return tryFocus(lastTabbableNode);\n        tryFocus(firstTabbableNode);\n    }\n}\nfunction isEscapeEvent(e) {\n    return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n}\nfunction tryFocus(node) {\n    if (!node || !node.focus)\n        return;\n    if (node === document.activeElement)\n        return;\n    node.focus();\n    if (node.tagName.toLowerCase() === 'input') {\n        node.select();\n    }\n}\nvar focusTrap_1 = focusTrap;\n/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction createFocusTrapInstance(surfaceEl, acceptButtonEl) {\n    var focusTrapFactory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : focusTrap_1;\n    return focusTrapFactory(surfaceEl, {\n        initialFocus: acceptButtonEl,\n        clickOutsideDeactivates: true\n    });\n}\nvar MDCDialog = \n/*#__PURE__*/\nfunction (_MDCComponent) {\n    _inherits(MDCDialog, _MDCComponent);\n    function MDCDialog() {\n        _classCallCheck(this, MDCDialog);\n        return _possibleConstructorReturn(this, (MDCDialog.__proto__ || Object.getPrototypeOf(MDCDialog)).apply(this, arguments));\n    }\n    _createClass(MDCDialog, [{\n            key: \"initialize\",\n            value: function initialize() {\n                this.focusTrap_ = createFocusTrapInstance(this.dialogSurface_, this.acceptButton_);\n                this.footerBtnRipples_ = [];\n                var footerBtns = this.root_.querySelectorAll('.mdc-dialog__footer__button');\n                for (var i = 0, footerBtn; footerBtn = footerBtns[i]; i++) {\n                    this.footerBtnRipples_.push(new MDCRipple(footerBtn));\n                }\n            }\n        }, {\n            key: \"destroy\",\n            value: function destroy() {\n                this.footerBtnRipples_.forEach(function (ripple) {\n                    return ripple.destroy();\n                });\n                _get(MDCDialog.prototype.__proto__ || Object.getPrototypeOf(MDCDialog.prototype), \"destroy\", this).call(this);\n            }\n        }, {\n            key: \"show\",\n            value: function show() {\n                this.foundation_.open();\n            }\n        }, {\n            key: \"close\",\n            value: function close() {\n                this.foundation_.close();\n            }\n        }, {\n            key: \"getDefaultFoundation\",\n            value: function getDefaultFoundation() {\n                var _this = this;\n                return new MDCDialogFoundation({\n                    addClass: function addClass(className) {\n                        return _this.root_.classList.add(className);\n                    },\n                    removeClass: function removeClass(className) {\n                        return _this.root_.classList.remove(className);\n                    },\n                    addBodyClass: function addBodyClass(className) {\n                        return document.body.classList.add(className);\n                    },\n                    removeBodyClass: function removeBodyClass(className) {\n                        return document.body.classList.remove(className);\n                    },\n                    eventTargetHasClass: function eventTargetHasClass(target, className) {\n                        return target.classList.contains(className);\n                    },\n                    registerInteractionHandler: function registerInteractionHandler(evt, handler) {\n                        return _this.root_.addEventListener(evt, handler);\n                    },\n                    deregisterInteractionHandler: function deregisterInteractionHandler(evt, handler) {\n                        return _this.root_.removeEventListener(evt, handler);\n                    },\n                    registerSurfaceInteractionHandler: function registerSurfaceInteractionHandler(evt, handler) {\n                        return _this.dialogSurface_.addEventListener(evt, handler);\n                    },\n                    deregisterSurfaceInteractionHandler: function deregisterSurfaceInteractionHandler(evt, handler) {\n                        return _this.dialogSurface_.removeEventListener(evt, handler);\n                    },\n                    registerDocumentKeydownHandler: function registerDocumentKeydownHandler(handler) {\n                        return document.addEventListener('keydown', handler);\n                    },\n                    deregisterDocumentKeydownHandler: function deregisterDocumentKeydownHandler(handler) {\n                        return document.removeEventListener('keydown', handler);\n                    },\n                    registerTransitionEndHandler: function registerTransitionEndHandler(handler) {\n                        return _this.dialogSurface_.addEventListener('transitionend', handler);\n                    },\n                    deregisterTransitionEndHandler: function deregisterTransitionEndHandler(handler) {\n                        return _this.dialogSurface_.removeEventListener('transitionend', handler);\n                    },\n                    notifyAccept: function notifyAccept() {\n                        return _this.emit(MDCDialogFoundation.strings.ACCEPT_EVENT);\n                    },\n                    notifyCancel: function notifyCancel() {\n                        return _this.emit(MDCDialogFoundation.strings.CANCEL_EVENT);\n                    },\n                    trapFocusOnSurface: function trapFocusOnSurface() {\n                        return _this.focusTrap_.activate();\n                    },\n                    untrapFocusOnSurface: function untrapFocusOnSurface() {\n                        return _this.focusTrap_.deactivate();\n                    },\n                    isDialog: function isDialog(el) {\n                        return el === _this.dialogSurface_;\n                    }\n                });\n            }\n        }, {\n            key: \"open\",\n            get: function get$$1() {\n                return this.foundation_.isOpen();\n            }\n        }, {\n            key: \"acceptButton_\",\n            get: function get$$1() {\n                return this.root_.querySelector(MDCDialogFoundation.strings.ACCEPT_SELECTOR);\n            }\n        }, {\n            key: \"dialogSurface_\",\n            get: function get$$1() {\n                return this.root_.querySelector(MDCDialogFoundation.strings.DIALOG_SURFACE_SELECTOR);\n            }\n        }], [{\n            key: \"attachTo\",\n            value: function attachTo(root) {\n                return new MDCDialog(root);\n            }\n        }]);\n    return MDCDialog;\n}(MDCComponent);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MdcDialogComponent = /** @class */ /*@__PURE__*/ (function () {\n    function MdcDialogComponent(_renderer, elementRef, _registry, dialogRef) {\n        var _this = this;\n        this._renderer = _renderer;\n        this.elementRef = elementRef;\n        this._registry = _registry;\n        this.dialogRef = dialogRef;\n        /**\n         * ID of the element that should be considered as the dialog's label.\n         */\n        this._ariaLabelledBy = null;\n        this.clickOutsideToClose = true;\n        this.escapeToClose = true;\n        this.isHostClass = true;\n        this.ariaHidden = 'true';\n        this.tabIndex = -1;\n        this._accept = new EventEmitter();\n        this._cancel = new EventEmitter();\n        this._mdcAdapter = {\n            addClass: function (className) { return _this._renderer.addClass(_this.elementRef.nativeElement, className); },\n            removeClass: function (className) { return _this._renderer.removeClass(_this.elementRef.nativeElement, className); },\n            addBodyClass: function (className) {\n                if (isBrowser()) {\n                    _this._renderer.addClass(document.body, className);\n                }\n            },\n            removeBodyClass: function (className) {\n                if (isBrowser()) {\n                    _this._renderer.removeClass(document.body, className);\n                }\n            },\n            eventTargetHasClass: function (target, className) { return target.classList.contains(className); },\n            registerInteractionHandler: function (evt, handler) {\n                var /** @type {?} */ clickOutsideToClose = _this._config ? _this._config.clickOutsideToClose : _this.clickOutsideToClose;\n                handler = _this.dialogSurface && clickOutsideToClose ? handler : function (event) {\n                    if (( /** @type {?} */(event.target)).classList.contains('mdc-dialog__footer__button--accept')) {\n                        _this.accept();\n                    }\n                    else if (( /** @type {?} */(event.target)).classList.contains('mdc-dialog__footer__button--cancel')) {\n                        _this.cancel();\n                    }\n                };\n                _this._registry.listen(evt, handler, _this.elementRef.nativeElement);\n            },\n            deregisterInteractionHandler: function (evt, handler) { return _this._registry.unlisten(evt, handler); },\n            registerSurfaceInteractionHandler: function (evt, handler) {\n                return _this._registry.listen(evt, handler, _this.dialogSurface.elementRef.nativeElement);\n            },\n            deregisterSurfaceInteractionHandler: function (evt, handler) { return _this._registry.unlisten(evt, handler); },\n            registerDocumentKeydownHandler: function (handler) {\n                if (!isBrowser()) {\n                    return;\n                }\n                var /** @type {?} */ escapeToClose = _this._config ? _this._config.escapeToClose : _this.escapeToClose;\n                handler = escapeToClose ? handler : _this._onKeyDown;\n                _this._registry.listen('keydown', handler, document);\n            },\n            deregisterDocumentKeydownHandler: function (handler) {\n                if (!isBrowser()) {\n                    return;\n                }\n                var /** @type {?} */ escapeToClose = _this._config ? _this._config.escapeToClose : _this.escapeToClose;\n                handler = escapeToClose ? handler : _this._onKeyDown;\n                _this._registry.unlisten('keydown', handler);\n            },\n            registerTransitionEndHandler: function (handler) {\n                if (_this.dialogSurface) {\n                    _this._registry.listen('transitionend', handler, _this.dialogSurface.elementRef.nativeElement);\n                }\n            },\n            deregisterTransitionEndHandler: function (handler) {\n                if (_this.dialogSurface) {\n                    _this._registry.unlisten('transitionend', handler);\n                }\n            },\n            notifyAccept: function () {\n                _this._accept.emit('MDCDialog:accept');\n                if (_this.dialogRef) {\n                    _this.dialogRef.close();\n                }\n            },\n            notifyCancel: function () {\n                _this._cancel.emit('MDCDialog:cancel');\n                if (_this.dialogRef) {\n                    _this.dialogRef.close();\n                }\n            },\n            trapFocusOnSurface: function () {\n                if (_this._focusTrap) {\n                    _this._focusTrap.activate();\n                }\n            },\n            untrapFocusOnSurface: function () {\n                if (_this._focusTrap) {\n                    _this._focusTrap.deactivate();\n                }\n            },\n            isDialog: function (el) { return _this.dialogSurface ? el === _this.dialogSurface.elementRef.nativeElement : false; }\n        };\n        this._foundation = new MDCDialogFoundation(this._mdcAdapter);\n        if (this.dialogRef) {\n            this._config = this.dialogRef._containerInstance._config;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    MdcDialogComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            this._foundation.init();\n            if (this._config) {\n                this.show();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    MdcDialogComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._foundation.destroy();\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MdcDialogComponent.prototype._onKeyDown = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            if (ESCAPE === event.keyCode) {\n                event.stopPropagation();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    MdcDialogComponent.prototype.show = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var /** @type {?} */ focusedEl = this.dialogButtons.find(function (_) { return _.focused || _.accept; });\n            if (isBrowser()) {\n                this._focusTrap = createFocusTrapInstance(this.dialogSurface.elementRef.nativeElement, {\n                    initialFocus: focusedEl ? focusedEl.getHostElement() : this.elementRef.nativeElement,\n                    clickOutsideDeactivates: this._config ? this._config.clickOutsideToClose : this.clickOutsideToClose,\n                    escapeDeactivates: this._config ? this._config.escapeToClose : this.escapeToClose,\n                });\n            }\n            setTimeout(function () {\n                _this._foundation.open();\n                if (focusedEl) {\n                    focusedEl.focus();\n                }\n            }, 10);\n        };\n    /**\n     * @return {?}\n     */\n    MdcDialogComponent.prototype.close = /**\n     * @return {?}\n     */\n        function () {\n            this._foundation.close();\n        };\n    /**\n     * @return {?}\n     */\n    MdcDialogComponent.prototype.isOpen = /**\n     * @return {?}\n     */\n        function () {\n            return this._foundation.isOpen();\n        };\n    /**\n     * @param {?=} shouldNotify\n     * @return {?}\n     */\n    MdcDialogComponent.prototype.accept = /**\n     * @param {?=} shouldNotify\n     * @return {?}\n     */\n        function (shouldNotify) {\n            if (shouldNotify === void 0) {\n                shouldNotify = true;\n            }\n            this._foundation.accept(shouldNotify);\n        };\n    /**\n     * @param {?=} shouldNotify\n     * @return {?}\n     */\n    MdcDialogComponent.prototype.cancel = /**\n     * @param {?=} shouldNotify\n     * @return {?}\n     */\n        function (shouldNotify) {\n            if (shouldNotify === void 0) {\n                shouldNotify = true;\n            }\n            this._foundation.cancel(shouldNotify);\n        };\n    return MdcDialogComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MdcDialogContainer = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MdcDialogContainer, _super);\n    function MdcDialogContainer(elementRef, _document) {\n        var _this = _super.call(this) || this;\n        _this.elementRef = elementRef;\n        _this._document = _document;\n        /**\n         * Element that was focused before the dialog was opened. Save this to restore upon close.\n         */\n        _this._elementFocusedBeforeDialogWasOpened = null;\n        return _this;\n    }\n    /** Attach a component portal as content to this container. */\n    /**\n     * Attach a component portal as content to this container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    MdcDialogContainer.prototype.attachComponentPortal = /**\n     * Attach a component portal as content to this container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n        function (portal) {\n            this._savePreviouslyFocusedElement();\n            return this._portalOutlet.attachComponentPortal(portal);\n        };\n    /**\n       * Attach a TemplatePortal as content to this dialog container.\n       * @param portal Portal to be attached as the dialog content.\n       */\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @template C\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    MdcDialogContainer.prototype.attachTemplatePortal = /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @template C\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n        function (portal) {\n            this._savePreviouslyFocusedElement();\n            return this._portalOutlet.attachTemplatePortal(portal);\n        };\n    /**\n     * Saves a reference to the element that was focused before the dialog was opened.\n     * @return {?}\n     */\n    MdcDialogContainer.prototype._savePreviouslyFocusedElement = /**\n     * Saves a reference to the element that was focused before the dialog was opened.\n     * @return {?}\n     */\n        function () {\n            if (this._document) {\n                this._elementFocusedBeforeDialogWasOpened = /** @type {?} */ (this._document.activeElement);\n            }\n        };\n    return MdcDialogContainer;\n}(BasePortalOutlet));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ MDC_DIALOG_DATA = /*@__PURE__*/ new InjectionToken('MdcDialogData');\nvar MdcDialogConfig = /** @class */ /*@__PURE__*/ (function () {\n    function MdcDialogConfig() {\n        /**\n         * The ARIA role of the dialog element.\n         */\n        this.role = 'dialog';\n        /**\n         * ID of the element that describes the dialog.\n         */\n        this.ariaDescribedBy = null;\n        /**\n         * Aria label to assign to the dialog element\n         */\n        this.ariaLabel = null;\n        /**\n         * Whether the user can use escape key to close the dialog\n         */\n        this.escapeToClose = true;\n        /**\n         * Whether the user can click outside to close the dialog\n         */\n        this.clickOutsideToClose = true;\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n    }\n    return MdcDialogConfig;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MdcDialog = /** @class */ /*@__PURE__*/ (function () {\n    function MdcDialog(_overlay, _injector, _parentDialog) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._parentDialog = _parentDialog;\n        this._openedDialogRef = null;\n    }\n    /**\n       * Shows a dialog with a message and an optional action.\n       * @param componentOrTemplateRef Type of the component to load into the dialog,\n       *     or a TemplateRef to instantiate as the dialog content.\n       * @param config Additional configuration options for the dialog.\n       * @returns Reference to the newly-opened dialog.\n       */\n    /**\n     * Shows a dialog with a message and an optional action.\n     * @template T\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param {?=} config Additional configuration options for the dialog.\n     * @return {?} Reference to the newly-opened dialog.\n     */\n    MdcDialog.prototype.open = /**\n     * Shows a dialog with a message and an optional action.\n     * @template T\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param {?=} config Additional configuration options for the dialog.\n     * @return {?} Reference to the newly-opened dialog.\n     */\n        function (componentOrTemplateRef, config) {\n            var /** @type {?} */ _config = _applyConfigDefaults(config);\n            if (this._openedDialogRef) {\n                this._openedDialogRef.close();\n            }\n            config = _applyConfigDefaults(config);\n            var /** @type {?} */ overlayRef = this._createOverlay();\n            var /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n            var /** @type {?} */ dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n            this._openedDialogRef = dialogRef;\n            return dialogRef;\n        };\n    /**\n     * @return {?}\n     */\n    MdcDialog.prototype.close = /**\n     * @return {?}\n     */\n        function () {\n            if (this._openedDialogRef) {\n                this._openedDialogRef.close();\n            }\n        };\n    /**\n     * Attaches the dialog container component to the overlay.\n     * @param {?} overlay\n     * @param {?} config\n     * @return {?}\n     */\n    MdcDialog.prototype._attachDialogContainer = /**\n     * Attaches the dialog container component to the overlay.\n     * @param {?} overlay\n     * @param {?} config\n     * @return {?}\n     */\n        function (overlay, config) {\n            var /** @type {?} */ containerPortal = new ComponentPortal(MdcDialogContainer, config.viewContainerRef);\n            var /** @type {?} */ containerRef = overlay.attach(containerPortal);\n            containerRef.instance._config = config;\n            return containerRef.instance;\n        };\n    /**\n     * Creates a new overlay.\n     * @return {?}\n     */\n    MdcDialog.prototype._createOverlay = /**\n     * Creates a new overlay.\n     * @return {?}\n     */\n        function () {\n            return this._overlay.create();\n        };\n    /**\n     * Attaches the user-provided component to the already-created MdcDialogContainer.\n     * @template T\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param {?} dialogContainer Reference to the wrapping MdcDialogContainer.\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the MdcDialogRef that should be returned to the user.\n     */\n    MdcDialog.prototype._attachDialogContent = /**\n     * Attaches the user-provided component to the already-created MdcDialogContainer.\n     * @template T\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param {?} dialogContainer Reference to the wrapping MdcDialogContainer.\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the MdcDialogRef that should be returned to the user.\n     */\n        function (componentOrTemplateRef, dialogContainer, overlayRef, config) {\n            // Create a reference to the dialog we're creating in order to give the user a handle\n            // to modify and close it.\n            var /** @type {?} */ dialogRef = new MdcDialogRef(overlayRef, dialogContainer, config.id);\n            if (componentOrTemplateRef instanceof TemplateRef) {\n                dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, /** @type {?} */ ((null)), /** @type {?} */ ({ $implicit: config.data, dialogRef: dialogRef })));\n            }\n            else {\n                var /** @type {?} */ injector = this._createInjector(config, dialogRef, dialogContainer);\n                var /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, undefined, injector));\n                dialogRef.componentInstance = contentRef.instance;\n            }\n            return dialogRef;\n        };\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @template T\n     * @param {?} config Config object that is used to construct the dialog.\n     * @param {?} dialogRef Reference to the dialog.\n     * @param {?} dialogContainer\n     * @return {?} The custom injector that can be used inside the dialog.\n     */\n    MdcDialog.prototype._createInjector = /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @template T\n     * @param {?} config Config object that is used to construct the dialog.\n     * @param {?} dialogRef Reference to the dialog.\n     * @param {?} dialogContainer\n     * @return {?} The custom injector that can be used inside the dialog.\n     */\n        function (config, dialogRef, dialogContainer) {\n            var /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            var /** @type {?} */ injectionTokens = new WeakMap();\n            injectionTokens.set(MdcDialogRef, dialogRef);\n            injectionTokens.set(MdcDialogContainer, dialogContainer);\n            injectionTokens.set(MDC_DIALOG_DATA, config.data);\n            injectionTokens.set(MdcDialogConfig, config);\n            return new PortalInjector(userInjector || this._injector, injectionTokens);\n        };\n    return MdcDialog;\n}());\n/**\n * Applies default options to the dialog config.\n * @param {?=} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config) {\n    return __assign({}, new MdcDialogConfig(), config);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ DIALOG_DECLARATIONS = [\n    MdcDialogComponent,\n    MdcDialogContainer,\n    MdcDialogBackdrop,\n    MdcDialogBody,\n    MdcDialogButton,\n    MdcDialogFooter,\n    MdcDialogHeader,\n    MdcDialogHeaderTitle,\n    MdcDialogSurface,\n];\nvar MdcDialogModule = /** @class */ /*@__PURE__*/ (function () {\n    function MdcDialogModule() {\n    }\n    return MdcDialogModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { MdcDialogModule, MdcDialog, MDC_DIALOG_DATA, MdcDialogConfig, MdcDialogContainer, MdcDialogSurface, MdcDialogHeader, MdcDialogHeaderTitle, MdcDialogBody, MdcDialogFooter, MdcDialogBackdrop, MdcDialogButton, MdcDialogRef, MdcDialogComponent };\n",null]}