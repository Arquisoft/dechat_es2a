{"remainingRequest":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\faker\\lib\\fake.js","dependencies":[{"path":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\faker\\lib\\fake.js","mtime":1556004119669},{"path":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556004112812},{"path":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1556004088045}],"contextDependencies":[],"result":["/*\n  fake.js - generator method for combining faker methods based on string input\n\n*/\n\nfunction Fake (faker) {\n  \n  /**\n   * Generator method for combining faker methods based on string input\n   *\n   * __Example:__\n   *\n   * ```\n   * console.log(faker.fake('{{name.lastName}}, {{name.firstName}} {{name.suffix}}'));\n   * //outputs: \"Marks, Dean Sr.\"\n   * ```\n   *\n   * This will interpolate the format string with the value of methods\n   * [name.lastName]{@link faker.name.lastName}, [name.firstName]{@link faker.name.firstName},\n   * and [name.suffix]{@link faker.name.suffix}\n   *\n   * @method faker.fake\n   * @param {string} str\n   */\n  this.fake = function fake (str) {\n    // setup default response as empty string\n    var res = '';\n\n    // if incoming str parameter is not provided, return error message\n    if (typeof str !== 'string' || str.length === 0) {\n      res = 'string parameter is required!';\n      return res;\n    }\n\n    // find first matching {{ and }}\n    var start = str.search('{{');\n    var end = str.search('}}');\n\n    // if no {{ and }} is found, we are done\n    if (start === -1 && end === -1) {\n      return str;\n    }\n\n    // console.log('attempting to parse', str);\n\n    // extract method name from between the {{ }} that we found\n    // for example: {{name.firstName}}\n    var token = str.substr(start + 2,  end - start - 2);\n    var method = token.replace('}}', '').replace('{{', '');\n\n    // console.log('method', method)\n\n    // extract method parameters\n    var regExp = /\\(([^)]+)\\)/;\n    var matches = regExp.exec(method);\n    var parameters = '';\n    if (matches) {\n      method = method.replace(regExp, '');\n      parameters = matches[1];\n    }\n\n    // split the method into module and function\n    var parts = method.split('.');\n\n    if (typeof faker[parts[0]] === \"undefined\") {\n      throw new Error('Invalid module: ' + parts[0]);\n    }\n\n    if (typeof faker[parts[0]][parts[1]] === \"undefined\") {\n      throw new Error('Invalid method: ' + parts[0] + \".\" + parts[1]);\n    }\n\n    // assign the function from the module.function namespace\n    var fn = faker[parts[0]][parts[1]];\n\n    // If parameters are populated here, they are always going to be of string type\n    // since we might actually be dealing with an object or array,\n    // we always attempt to the parse the incoming parameters into JSON\n    var params;\n    // Note: we experience a small performance hit here due to JSON.parse try / catch\n    // If anyone actually needs to optimize this specific code path, please open a support issue on github\n    try {\n      params = JSON.parse(parameters)\n    } catch (err) {\n      // since JSON.parse threw an error, assume parameters was actually a string\n      params = parameters;\n    }\n\n    var result;\n    if (typeof params === \"string\" && params.length === 0) {\n      result = fn.call(this);\n    } else {\n      result = fn.call(this, params);\n    }\n\n    // replace the found tag with the returned fake value\n    res = str.replace('{{' + token + '}}', result);\n\n    // return the response recursively until we are done finding all tags\n    return fake(res);    \n  }\n  \n  return this;\n  \n  \n}\n\nmodule['exports'] = Fake;",null]}