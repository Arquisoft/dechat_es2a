{"remainingRequest":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\@angular-mdc\\web\\esm5\\switch.es5.js","dependencies":[{"path":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\@angular-mdc\\web\\esm5\\switch.es5.js","mtime":1556004096908},{"path":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556004112812},{"path":"C:\\Users\\Becario\\Arquitectura\\dechat_es2a\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1556004088045}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright (c) 2018 Dominic Carretto\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE\n */\n/** PURE_IMPORTS_START _angular_core,_angular_forms,_angular_mdc_web_form_field PURE_IMPORTS_END */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, HostBinding, Input, Output, Renderer2, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MdcFormFieldControl } from '@angular-mdc/web/form-field';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ MDC_SWITCH_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: /*@__PURE__*/ forwardRef(function () { return MdcSwitch; }),\n    multi: true\n};\n/**\n * Change event object emitted by MdcSwitch.\n */\nvar /**\n * Change event object emitted by MdcSwitch.\n */ MdcSwitchChange = /** @class */ /*@__PURE__*/ (function () {\n    function MdcSwitchChange(source, checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n    return MdcSwitchChange;\n}());\nvar /** @type {?} */ nextUniqueId = 0;\nvar MdcSwitch = /** @class */ /*@__PURE__*/ (function () {\n    function MdcSwitch(_changeDetectorRef, _renderer, elementRef) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._renderer = _renderer;\n        this.elementRef = elementRef;\n        this._uniqueId = \"mdc-switch-\" + ++nextUniqueId;\n        this.componentInstance = MdcSwitch;\n        this.id = this._uniqueId;\n        this.name = null;\n        this._checked = false;\n        this._disabled = false;\n        this.tabIndex = 0;\n        this.change = new EventEmitter();\n        this.isHostClass = true;\n        /**\n         * View -> model callback called when value changes\n         */\n        this._onChange = function () { };\n        /**\n         * View -> model callback called when control has been touched\n         */\n        this._onTouched = function () { };\n    }\n    Object.defineProperty(MdcSwitch.prototype, \"checked\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._checked; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.setChecked(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcSwitch.prototype, \"disabled\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.setDisabledState(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcSwitch.prototype, \"inputId\", {\n        get: /**\n         * @return {?}\n         */ function () { return (this.id || this._uniqueId) + \"-input\"; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MdcSwitch.prototype, \"classDisabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.disabled ? 'mdc-switch--disabled' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} evt\n     * @return {?}\n     */\n    MdcSwitch.prototype.onChange = /**\n     * @param {?} evt\n     * @return {?}\n     */\n        function (evt) {\n            evt.stopPropagation();\n            this.setChecked(this.inputEl.nativeElement.checked);\n        };\n    /**\n     * @param {?} evt\n     * @return {?}\n     */\n    MdcSwitch.prototype.onInputClick = /**\n     * @param {?} evt\n     * @return {?}\n     */\n        function (evt) {\n            evt.stopPropagation();\n        };\n    /**\n     * @return {?}\n     */\n    MdcSwitch.prototype.onBlur = /**\n     * @return {?}\n     */\n        function () {\n            this._onTouched();\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MdcSwitch.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.setChecked(value);\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MdcSwitch.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this._onChange = fn;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MdcSwitch.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this._onTouched = fn;\n        };\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    MdcSwitch.prototype.setDisabled = /**\n     * @param {?} disabled\n     * @return {?}\n     */\n        function (disabled) {\n            this.setDisabledState(disabled);\n        };\n    /**\n     * @param {?} checked\n     * @return {?}\n     */\n    MdcSwitch.prototype.setChecked = /**\n     * @param {?} checked\n     * @return {?}\n     */\n        function (checked) {\n            if (this.disabled) {\n                return;\n            }\n            var /** @type {?} */ previousValue = this.checked;\n            this._checked = checked;\n            if (previousValue !== null || undefined) {\n                this._onChange(this.checked);\n                this.change.emit(new MdcSwitchChange(this, this.checked));\n            }\n            this._changeDetectorRef.markForCheck();\n        };\n    /**\n     * @return {?}\n     */\n    MdcSwitch.prototype.isChecked = /**\n     * @return {?}\n     */\n        function () {\n            return this.checked;\n        };\n    /**\n     * @return {?}\n     */\n    MdcSwitch.prototype.isDisabled = /**\n     * @return {?}\n     */\n        function () {\n            return this.disabled;\n        };\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    MdcSwitch.prototype.setDisabledState = /**\n     * @param {?} disabled\n     * @return {?}\n     */\n        function (disabled) {\n            this._disabled = disabled;\n            this._changeDetectorRef.markForCheck();\n        };\n    /**\n     * @return {?}\n     */\n    MdcSwitch.prototype.focus = /**\n     * @return {?}\n     */\n        function () {\n            this.inputEl.nativeElement.focus();\n        };\n    return MdcSwitch;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MdcSwitchModule = /** @class */ /*@__PURE__*/ (function () {\n    function MdcSwitchModule() {\n    }\n    return MdcSwitchModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { MdcSwitchModule, MDC_SWITCH_CONTROL_VALUE_ACCESSOR, MdcSwitchChange, MdcSwitch };\n",null]}