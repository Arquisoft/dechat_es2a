import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList, Renderer2 } from '@angular/core';
import { Subject } from 'rxjs';
import { EventRegistry } from '@angular-mdc/web/common';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { MdcIcon } from '@angular-mdc/web/icon';
/** Represents an event fired on an individual `mdc-chip`. */
export interface MdcChipEvent {
    /** Reference to MdcChip that emitted the event. */
    chip: MdcChip;
}
/** Event object emitted by MdcChip when selected or deselected. */
export declare class MdcChipSelectionEvent {
    /** Reference to the chip that emitted the event. */
    source: MdcChip;
    constructor(
        /** Reference to the chip that emitted the event. */
        source: MdcChip);
}
export declare class MdcChipIcon extends MdcIcon {
    isHostClass: boolean;
    readonly classIconLeading: string;
    readonly classIconTrailing: string;
}
export declare class MdcChipCheckmark {
}
export declare class MdcChipText {
    elementRef: ElementRef;
    isHostClass: boolean;
    constructor(elementRef: ElementRef);
}
export declare class MdcChip implements AfterContentInit, OnDestroy {
    private _changeDetectorRef;
    private _ripple;
    private _renderer;
    elementRef: ElementRef;
    private _registry;
    private _id;
    selected: boolean;
    protected _selected: boolean;
    filter: boolean;
    protected _filter: boolean;
    primary: boolean;
    protected _primary: boolean;
    secondary: boolean;
    protected _secondary: boolean;
    /** Whether the chip has focus. */
    _hasFocus: boolean;
    /** The unique ID of the option. */
    readonly id: string;
    /** Whether the chip is disabled. */
    disabled: boolean;
    protected _disabled: boolean;
    /** Emits when the chip is focused. */
    readonly _onFocus: Subject<MdcChipEvent>;
    /** Emits when the chip is blured. */
    readonly _onBlur: Subject<MdcChipEvent>;
    /** Emitted when the chip is destroyed. */
    readonly destroyed: EventEmitter<MdcChipEvent>;
    /** Emitted when the chip is selected or deselected. */
    readonly selectionChange: EventEmitter<MdcChipSelectionEvent>;
    /** Emitted when the chip is selected or deselected. */
    readonly trailingIconInteraction: EventEmitter<void>;
    /** Emitted when a chip is to be removed. */
    readonly removed: EventEmitter<MdcChipEvent>;
    isHostClass: boolean;
    readonly tabindex: number | null;
    readonly classPrimary: string;
    readonly classSecondary: string;
    onfocus(): void;
    onblur(): void;
    chipText: MdcChipText;
    icons: QueryList<MdcChipIcon>;
    private _mdcAdapter;
    private _foundation;
    constructor(_changeDetectorRef: ChangeDetectorRef, _ripple: MdcRipple, _renderer: Renderer2, elementRef: ElementRef, _registry: EventRegistry);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    setSelected(selected: boolean): void;
    isSelected(): boolean;
    setPrimary(primary: boolean): void;
    setSecondary(secondary: boolean): void;
    /** Allows for programmatic focusing of the chip. */
    focus(): void;
    /**
     * Allows for programmatic removal of the chip. Called by the MdcChipSet when the DELETE or
     * BACKSPACE keys are pressed.
     *
     * Informs any listeners of the removal request. Does not remove the chip from the DOM.
     */
    remove(): void;
    isLeadingIconVisibile(): boolean;
    getLeadingIcon(): MdcChipIcon | undefined;
    private _blur();
    foundation(): any;
    /** Retrieves the DOM element of the component host. */
    protected _getHostElement(): any;
    /** Emits the selection change event. */
    private _emitSelectionChangeEvent();
}
