/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular-mdc/web/common'), require('@angular-mdc/web/ripple'), require('@angular-mdc/web/icon')) :
    typeof define === 'function' && define.amd ? define('@angular-mdc/web/fab', ['exports', '@angular/core', '@angular-mdc/web/common', '@angular-mdc/web/ripple', '@angular-mdc/web/icon'], factory) :
    (factory((global.ng = global.ng || {}, global.ng.web = global.ng.web || {}, global.ng.web.fab = {}),global.ng.core,global.ng.web.common,global.ng.web.ripple,global.ng.web.icon));
}(this, (function (exports,core,common,ripple,icon) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MdcFab = /** @class */ (function () {
        function MdcFab(_changeDetectionRef, _renderer, elementRef, _ripple) {
            this._changeDetectionRef = _changeDetectionRef;
            this._renderer = _renderer;
            this.elementRef = elementRef;
            this._ripple = _ripple;
            this.tabIndex = 0;
            this.isHostClass = true;
        }
        Object.defineProperty(MdcFab.prototype, "mini", {
            get: /**
             * @return {?}
             */
            function () { return this._mini; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.setMini(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcFab.prototype, "exited", {
            get: /**
             * @return {?}
             */
            function () { return this._exited; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.setExited(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcFab.prototype, "position", {
            get: /**
             * @return {?}
             */
            function () { return this._position; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.setPosition(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcFab.prototype, "classMini", {
            get: /**
             * @return {?}
             */
            function () {
                return this.mini ? 'mdc-fab--mini' : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcFab.prototype, "classExited", {
            get: /**
             * @return {?}
             */
            function () {
                return this.exited ? 'mdc-fab--exited' : '';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MdcFab.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            if (this.fabIcon) {
                this._renderer.addClass(this.fabIcon.elementRef.nativeElement, 'mdc-fab__icon');
                this._renderer.addClass(this._getHostElement(), 'mdc-fab__icon--size');
            }
            this._ripple.attachTo(this._getHostElement());
        };
        /**
         * @return {?}
         */
        MdcFab.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this._ripple.destroy();
        };
        /**
         * @param {?} mini
         * @return {?}
         */
        MdcFab.prototype.setMini = /**
         * @param {?} mini
         * @return {?}
         */
        function (mini) {
            this._mini = mini;
            this._changeDetectionRef.markForCheck();
        };
        /**
         * @param {?} exited
         * @return {?}
         */
        MdcFab.prototype.setExited = /**
         * @param {?} exited
         * @return {?}
         */
        function (exited) {
            this._exited = exited;
            this.tabIndex = exited ? -1 : this.tabIndex;
            this._changeDetectionRef.markForCheck();
        };
        /**
         * @param {?} position
         * @return {?}
         */
        MdcFab.prototype.setPosition = /**
         * @param {?} position
         * @return {?}
         */
        function (position) {
            this._renderer.removeClass(this._getHostElement(), "mdc-fab--" + this._position);
            this._position = position;
            if (this.position) {
                this._renderer.addClass(this._getHostElement(), "mdc-fab--" + position);
            }
        };
        /**
         * @param {?=} exited
         * @return {?}
         */
        MdcFab.prototype.toggleExited = /**
         * @param {?=} exited
         * @return {?}
         */
        function (exited) {
            this._exited = exited != null ? exited : !this._exited;
        };
        /** Focuses the button. */
        /**
         * Focuses the button.
         * @return {?}
         */
        MdcFab.prototype.focus = /**
         * Focuses the button.
         * @return {?}
         */
        function () {
            this._getHostElement().focus();
        };
        /**
         * @return {?}
         */
        MdcFab.prototype._getHostElement = /**
         * @return {?}
         */
        function () {
            return this.elementRef.nativeElement;
        };
        MdcFab.decorators = [
            { type: core.Component, args: [{selector: 'button[mdc-fab], a[mdc-fab]',
                        template: '<ng-content></ng-content>',
                        providers: [
                            ripple.MdcRipple,
                            common.EventRegistry,
                        ],
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    },] },
        ];
        /** @nocollapse */
        MdcFab.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: core.Renderer2 },
            { type: core.ElementRef },
            { type: ripple.MdcRipple }
        ]; };
        MdcFab.propDecorators = {
            mini: [{ type: core.Input }],
            exited: [{ type: core.Input }],
            position: [{ type: core.Input }],
            tabIndex: [{ type: core.Input, args: ['attr.tabindex',] }],
            fabIcon: [{ type: core.ContentChild, args: [icon.MdcIcon,] }],
            isHostClass: [{ type: core.HostBinding, args: ['class.mdc-fab',] }],
            classMini: [{ type: core.HostBinding, args: ['class.mdc-fab--mini',] }],
            classExited: [{ type: core.HostBinding, args: ['class.mdc-fab--exited',] }]
        };
        return MdcFab;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MdcFabModule = /** @class */ (function () {
        function MdcFabModule() {
        }
        MdcFabModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [icon.MdcIconModule],
                        exports: [MdcFab],
                        declarations: [MdcFab],
                    },] },
        ];
        return MdcFabModule;
    }());

    exports.MdcFabModule = MdcFabModule;
    exports.MdcFab = MdcFab;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
