/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular-mdc/web/common')) :
    typeof define === 'function' && define.amd ? define('@angular-mdc/web/card', ['exports', '@angular/core', '@angular-mdc/web/common'], factory) :
    (factory((global.ng = global.ng || {}, global.ng.web = global.ng.web || {}, global.ng.web.card = {}),global.ng.core,global.ng.web.common));
}(this, (function (exports,core,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MdcCardMediaContent = /** @class */ (function () {
        function MdcCardMediaContent(elementRef) {
            this.elementRef = elementRef;
            this.isHostClass = true;
        }
        MdcCardMediaContent.decorators = [
            { type: core.Directive, args: [{
                        selector: 'mdc-card-media-content, [mdcCardMediaContent]',
                        exportAs: 'mdcCardMediaContent'
                    },] },
        ];
        /** @nocollapse */
        MdcCardMediaContent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        MdcCardMediaContent.propDecorators = {
            isHostClass: [{ type: core.HostBinding, args: ['class.mdc-card__media-content',] }]
        };
        return MdcCardMediaContent;
    }());
    var MdcCardMedia = /** @class */ (function () {
        function MdcCardMedia(elementRef) {
            this.elementRef = elementRef;
            this.isHostClass = true;
        }
        Object.defineProperty(MdcCardMedia.prototype, "square", {
            get: /**
             * @return {?}
             */
            function () { return this._square; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.setSquare(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcCardMedia.prototype, "wide", {
            get: /**
             * @return {?}
             */
            function () { return this._wide; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.setWide(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcCardMedia.prototype, "classSquare", {
            get: /**
             * @return {?}
             */
            function () {
                return this.square ? 'mdc-card__media--square' : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcCardMedia.prototype, "classWide", {
            get: /**
             * @return {?}
             */
            function () {
                return this._wide ? 'mdc-card__media--16-9' : '';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} wide
         * @return {?}
         */
        MdcCardMedia.prototype.setWide = /**
         * @param {?} wide
         * @return {?}
         */
        function (wide) {
            this._wide = wide;
        };
        /**
         * @param {?} square
         * @return {?}
         */
        MdcCardMedia.prototype.setSquare = /**
         * @param {?} square
         * @return {?}
         */
        function (square) {
            this._square = square;
        };
        MdcCardMedia.decorators = [
            { type: core.Component, args: [{selector: 'mdc-card-media, [mdcCardMedia]',
                        template: '<ng-content></ng-content>',
                        exportAs: 'mdcCardMedia',
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    },] },
        ];
        /** @nocollapse */
        MdcCardMedia.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        MdcCardMedia.propDecorators = {
            square: [{ type: core.Input }],
            wide: [{ type: core.Input }],
            isHostClass: [{ type: core.HostBinding, args: ['class.mdc-card__media',] }],
            classSquare: [{ type: core.HostBinding, args: ['class.mdc-card__media--square',] }],
            classWide: [{ type: core.HostBinding, args: ['class.mdc-card__media--16-9',] }]
        };
        return MdcCardMedia;
    }());
    var MdcCardPrimaryAction = /** @class */ (function () {
        function MdcCardPrimaryAction(elementRef) {
            this.elementRef = elementRef;
            this.isHostClass = true;
        }
        MdcCardPrimaryAction.decorators = [
            { type: core.Directive, args: [{
                        selector: 'mdc-card-primary-action, [mdcCardPrimaryAction]',
                        exportAs: 'mdcCardPrimaryAction'
                    },] },
        ];
        /** @nocollapse */
        MdcCardPrimaryAction.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        MdcCardPrimaryAction.propDecorators = {
            isHostClass: [{ type: core.HostBinding, args: ['class.mdc-card__primary-action',] }]
        };
        return MdcCardPrimaryAction;
    }());
    var MdcCardActions = /** @class */ (function () {
        function MdcCardActions(elementRef) {
            this.elementRef = elementRef;
            this.isHostClass = true;
        }
        Object.defineProperty(MdcCardActions.prototype, "fullBleed", {
            get: /**
             * @return {?}
             */
            function () { return this._fullBleed; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._fullBleed = common.toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcCardActions.prototype, "buttons", {
            get: /**
             * @return {?}
             */
            function () { return this._buttons; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._buttons = common.toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcCardActions.prototype, "icons", {
            get: /**
             * @return {?}
             */
            function () { return this._icons; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._icons = common.toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcCardActions.prototype, "classFullBleed", {
            get: /**
             * @return {?}
             */
            function () {
                return this.fullBleed ? 'mdc-card__actions--full-bleed' : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcCardActions.prototype, "classActionButtons", {
            get: /**
             * @return {?}
             */
            function () {
                return this.buttons ? 'mdc-card__action-buttons' : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcCardActions.prototype, "classActionIcons", {
            get: /**
             * @return {?}
             */
            function () {
                return this.icons ? 'mdc-card__action-icons' : '';
            },
            enumerable: true,
            configurable: true
        });
        MdcCardActions.decorators = [
            { type: core.Component, args: [{selector: 'mdc-card-actions, [mdcCardActions]',
                        template: '<ng-content></ng-content>',
                        exportAs: 'mdcCardActions',
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    },] },
        ];
        /** @nocollapse */
        MdcCardActions.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        MdcCardActions.propDecorators = {
            fullBleed: [{ type: core.Input }],
            buttons: [{ type: core.Input }],
            icons: [{ type: core.Input }],
            isHostClass: [{ type: core.HostBinding, args: ['class.mdc-card__actions',] }],
            classFullBleed: [{ type: core.HostBinding, args: ['class.mdc-card__actions--full-bleed',] }],
            classActionButtons: [{ type: core.HostBinding, args: ['class.mdc-card__action-buttons',] }],
            classActionIcons: [{ type: core.HostBinding, args: ['class.mdc-card__action-icons',] }]
        };
        return MdcCardActions;
    }());
    var MdcCardActionButtons = /** @class */ (function () {
        function MdcCardActionButtons(elementRef) {
            this.elementRef = elementRef;
            this.isHostClass = true;
        }
        MdcCardActionButtons.decorators = [
            { type: core.Directive, args: [{
                        selector: 'mdc-card-action-buttons, [mdcCardActionButtons]',
                        exportAs: 'mdcCardActionButtons'
                    },] },
        ];
        /** @nocollapse */
        MdcCardActionButtons.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        MdcCardActionButtons.propDecorators = {
            isHostClass: [{ type: core.HostBinding, args: ['class.mdc-card__action-buttons',] }]
        };
        return MdcCardActionButtons;
    }());
    var MdcCardActionIcons = /** @class */ (function () {
        function MdcCardActionIcons(elementRef) {
            this.elementRef = elementRef;
            this.isHostClass = true;
        }
        MdcCardActionIcons.decorators = [
            { type: core.Directive, args: [{
                        selector: 'mdc-card-action-icons, [mdcCardActionIcons]',
                        exportAs: 'mdcCardActionIcons'
                    },] },
        ];
        /** @nocollapse */
        MdcCardActionIcons.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        MdcCardActionIcons.propDecorators = {
            isHostClass: [{ type: core.HostBinding, args: ['class.mdc-card__action-icons',] }]
        };
        return MdcCardActionIcons;
    }());
    var MdcCardAction = /** @class */ (function () {
        function MdcCardAction(_renderer, elementRef) {
            this._renderer = _renderer;
            this.elementRef = elementRef;
            this.isHostClass = true;
        }
        Object.defineProperty(MdcCardAction.prototype, "action", {
            get: /**
             * @return {?}
             */
            function () { return this._action; },
            set: /**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                // If the directive is set without a name (updated programatically), then this setter will
                // trigger with an empty string and should not overwrite the programatically set value.
                if (!action) {
                    return;
                }
                if (action === 'button') {
                    this._renderer.addClass(this.elementRef.nativeElement, 'mdc-card__action--button');
                }
                else if (action === 'icon') {
                    this._renderer.addClass(this.elementRef.nativeElement, 'mdc-card__action--icon');
                    this._renderer.setAttribute(this.elementRef.nativeElement, 'tabIndex', '0');
                    this._renderer.setAttribute(this.elementRef.nativeElement, 'role', 'button');
                }
                this._action = action;
            },
            enumerable: true,
            configurable: true
        });
        MdcCardAction.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mdcCardAction]'
                    },] },
        ];
        /** @nocollapse */
        MdcCardAction.ctorParameters = function () { return [
            { type: core.Renderer2 },
            { type: core.ElementRef }
        ]; };
        MdcCardAction.propDecorators = {
            action: [{ type: core.Input, args: ['mdcCardAction',] }],
            isHostClass: [{ type: core.HostBinding, args: ['class.mdc-card__action',] }]
        };
        return MdcCardAction;
    }());
    var MdcCard = /** @class */ (function () {
        function MdcCard(elementRef) {
            this.elementRef = elementRef;
            this.isHostClass = true;
        }
        Object.defineProperty(MdcCard.prototype, "outlined", {
            get: /**
             * @return {?}
             */
            function () { return this._outlined; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.setOutlined(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcCard.prototype, "classOutlined", {
            get: /**
             * @return {?}
             */
            function () {
                return this.outlined ? 'mdc-card--outlined' : '';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} outlined
         * @return {?}
         */
        MdcCard.prototype.setOutlined = /**
         * @param {?} outlined
         * @return {?}
         */
        function (outlined) {
            this._outlined = outlined;
        };
        MdcCard.decorators = [
            { type: core.Component, args: [{selector: 'mdc-card, [mdc-card]',
                        template: '<ng-content></ng-content>',
                        exportAs: 'mdcCard',
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    },] },
        ];
        /** @nocollapse */
        MdcCard.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        MdcCard.propDecorators = {
            outlined: [{ type: core.Input }],
            isHostClass: [{ type: core.HostBinding, args: ['class.mdc-card',] }],
            classOutlined: [{ type: core.HostBinding, args: ['class.mdc-card--outlined',] }]
        };
        return MdcCard;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ CARD_DECLARATIONS = [
        MdcCard,
        MdcCardAction,
        MdcCardActionButtons,
        MdcCardActionIcons,
        MdcCardActions,
        MdcCardMedia,
        MdcCardMediaContent,
        MdcCardPrimaryAction
    ];
    var MdcCardModule = /** @class */ (function () {
        function MdcCardModule() {
        }
        MdcCardModule.decorators = [
            { type: core.NgModule, args: [{
                        exports: CARD_DECLARATIONS,
                        declarations: CARD_DECLARATIONS,
                    },] },
        ];
        return MdcCardModule;
    }());

    exports.MdcCardModule = MdcCardModule;
    exports.MdcCardMediaContent = MdcCardMediaContent;
    exports.MdcCardMedia = MdcCardMedia;
    exports.MdcCardPrimaryAction = MdcCardPrimaryAction;
    exports.MdcCardActions = MdcCardActions;
    exports.MdcCardActionButtons = MdcCardActionButtons;
    exports.MdcCardActionIcons = MdcCardActionIcons;
    exports.MdcCardAction = MdcCardAction;
    exports.MdcCard = MdcCard;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
