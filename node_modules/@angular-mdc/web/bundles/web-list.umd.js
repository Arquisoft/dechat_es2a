/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular-mdc/web/common'), require('@angular-mdc/web/ripple'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@angular-mdc/web/list', ['exports', '@angular/core', '@angular-mdc/web/common', '@angular-mdc/web/ripple', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global.ng = global.ng || {}, global.ng.web = global.ng.web || {}, global.ng.web.list = {}),global.ng.core,global.ng.web.common,global.ng.web.ripple,global.Rx,global.Rx.operators));
}(this, (function (exports,core,common,ripple,rxjs,operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Change event that is fired whenever the selected state of an option changes.
     */
    var   /**
     * Change event that is fired whenever the selected state of an option changes.
     */
    MdcListSelectionChange = /** @class */ (function () {
        function MdcListSelectionChange(source) {
            this.source = source;
        }
        return MdcListSelectionChange;
    }());
    var /** @type {?} */ uniqueIdCounter = 0;
    var MdcListItemGraphic = /** @class */ (function () {
        function MdcListItemGraphic(elementRef) {
            this.elementRef = elementRef;
            this.isHostClass = true;
            this.ariaHidden = 'true';
        }
        MdcListItemGraphic.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mdcListItemGraphic], [mdc-list-item-graphic], mdc-list-item-graphic',
                        exportAs: 'mdcListItemGraphic',
                    },] },
        ];
        /** @nocollapse */
        MdcListItemGraphic.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        MdcListItemGraphic.propDecorators = {
            isHostClass: [{ type: core.HostBinding, args: ['class.mdc-list-item__graphic',] }],
            ariaHidden: [{ type: core.HostBinding, args: ['attr.aria-hidden',] }]
        };
        return MdcListItemGraphic;
    }());
    var MdcListItemMeta = /** @class */ (function () {
        function MdcListItemMeta(elementRef) {
            this.elementRef = elementRef;
            this.isHostClass = true;
        }
        MdcListItemMeta.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mdcListItemMeta], [mdc-list-item-meta], mdc-list-item-meta',
                        exportAs: 'mdcListItemMeta',
                    },] },
        ];
        /** @nocollapse */
        MdcListItemMeta.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        MdcListItemMeta.propDecorators = {
            isHostClass: [{ type: core.HostBinding, args: ['class.mdc-list-item__meta',] }]
        };
        return MdcListItemMeta;
    }());
    var MdcListItemText = /** @class */ (function () {
        function MdcListItemText(elementRef) {
            this.elementRef = elementRef;
            this.isHostClass = true;
        }
        MdcListItemText.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mdcListItemText], [mdc-list-item-text], mdc-list-item-text',
                        exportAs: 'mdcListItemText',
                    },] },
        ];
        /** @nocollapse */
        MdcListItemText.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        MdcListItemText.propDecorators = {
            isHostClass: [{ type: core.HostBinding, args: ['class.mdc-list-item__text',] }]
        };
        return MdcListItemText;
    }());
    var MdcListItemSecondary = /** @class */ (function () {
        function MdcListItemSecondary(elementRef) {
            this.elementRef = elementRef;
            this.isHostClass = true;
        }
        MdcListItemSecondary.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mdcListItemSecondary], [mdc-list-item-secondary], mdc-list-item-secondary',
                        exportAs: 'mdcListItemSecondary',
                    },] },
        ];
        /** @nocollapse */
        MdcListItemSecondary.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        MdcListItemSecondary.propDecorators = {
            isHostClass: [{ type: core.HostBinding, args: ['class.mdc-list-item__secondary-text',] }]
        };
        return MdcListItemSecondary;
    }());
    var MdcListItem = /** @class */ (function () {
        function MdcListItem(ripple$$1, _changeDetector, _renderer, elementRef) {
            this.ripple = ripple$$1;
            this._changeDetector = _changeDetector;
            this._renderer = _renderer;
            this.elementRef = elementRef;
            this._id = "mdc-list-item-" + uniqueIdCounter++;
            this.isHostClass = true;
            this.role = 'listitem';
            this.selectionChange = new core.EventEmitter();
        }
        Object.defineProperty(MdcListItem.prototype, "id", {
            /** The unique ID of the option. */
            get: /**
             * The unique ID of the option.
             * @return {?}
             */
            function () { return this._id; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcListItem.prototype, "classSelected", {
            get: /**
             * @return {?}
             */
            function () {
                return this.selected ? 'mdc-list-item--selected' : '';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MdcListItem.prototype.onclick = /**
         * @return {?}
         */
        function () {
            this.setSelected(!this.selected);
            this._emitChangeEvent();
        };
        Object.defineProperty(MdcListItem.prototype, "selected", {
            /** Whether the option is selected. */
            get: /**
             * Whether the option is selected.
             * @return {?}
             */
            function () { return this._selected; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.setSelected(value);
            },
            enumerable: true,
            configurable: true
        });
        /** Sets the selected state of the option. */
        /**
         * Sets the selected state of the option.
         * @param {?} selected
         * @return {?}
         */
        MdcListItem.prototype.setSelected = /**
         * Sets the selected state of the option.
         * @param {?} selected
         * @return {?}
         */
        function (selected) {
            this._selected = selected;
            this._changeDetector.markForCheck();
        };
        /**
         * @return {?}
         */
        MdcListItem.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.ripple.destroy();
        };
        /**
         * @return {?}
         */
        MdcListItem.prototype._getHostElement = /**
         * @return {?}
         */
        function () {
            return this.elementRef.nativeElement;
        };
        /**
         * Emits a change event if the selected state of an option changed.
         * @return {?}
         */
        MdcListItem.prototype._emitChangeEvent = /**
         * Emits a change event if the selected state of an option changed.
         * @return {?}
         */
        function () {
            this.selectionChange.emit(new MdcListSelectionChange(this));
        };
        MdcListItem.decorators = [
            { type: core.Component, args: [{selector: 'mdc-list-item, a[mdc-list-item]',
                        exportAs: 'mdcListItem',
                        host: {
                            '[id]': 'id',
                        },
                        template: '<ng-content></ng-content>',
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        providers: [
                            common.EventRegistry,
                            ripple.MdcRipple
                        ]
                    },] },
        ];
        /** @nocollapse */
        MdcListItem.ctorParameters = function () { return [
            { type: ripple.MdcRipple },
            { type: core.ChangeDetectorRef },
            { type: core.Renderer2 },
            { type: core.ElementRef }
        ]; };
        MdcListItem.propDecorators = {
            isHostClass: [{ type: core.HostBinding, args: ['class.mdc-list-item',] }],
            role: [{ type: core.HostBinding, args: ['attr.role',] }],
            classSelected: [{ type: core.HostBinding, args: ['class.mdc-list-item--selected',] }],
            selectionChange: [{ type: core.Output }],
            listItemStart: [{ type: core.ContentChild, args: [MdcListItemGraphic,] }],
            onclick: [{ type: core.HostListener, args: ['click', ['$event'],] }],
            selected: [{ type: core.Input }]
        };
        return MdcListItem;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Change event that is being fired whenever the selected state of an option changes.
     */
    var   /**
     * Change event that is being fired whenever the selected state of an option changes.
     */
    MdcListItemChange = /** @class */ (function () {
        function MdcListItemChange(source, option) {
            this.source = source;
            this.option = option;
        }
        return MdcListItemChange;
    }());
    var MdcListGroup = /** @class */ (function () {
        function MdcListGroup(elementRef) {
            this.elementRef = elementRef;
            this.isHostClass = true;
        }
        MdcListGroup.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mdc-list-group], mdc-list-group',
                        exportAs: 'mdcListGroup',
                    },] },
        ];
        /** @nocollapse */
        MdcListGroup.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        MdcListGroup.propDecorators = {
            isHostClass: [{ type: core.HostBinding, args: ['class.mdc-list-group',] }]
        };
        return MdcListGroup;
    }());
    var MdcListGroupSubheader = /** @class */ (function () {
        function MdcListGroupSubheader(elementRef) {
            this.elementRef = elementRef;
            this.isHostClass = true;
        }
        MdcListGroupSubheader.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mdcListGroupSubheader], [mdc-list-group-subheader], mdc-list-group-subheader',
                        exportAs: 'mdcListGroupSubheader',
                    },] },
        ];
        /** @nocollapse */
        MdcListGroupSubheader.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        MdcListGroupSubheader.propDecorators = {
            isHostClass: [{ type: core.HostBinding, args: ['class.mdc-list-group__subheader',] }]
        };
        return MdcListGroupSubheader;
    }());
    var MdcListDivider = /** @class */ (function () {
        function MdcListDivider(_renderer) {
            this._renderer = _renderer;
            this._inset = false;
            this._padded = false;
        }
        Object.defineProperty(MdcListDivider.prototype, "inset", {
            get: /**
             * @return {?}
             */
            function () { return this._inset; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._inset = common.toBoolean(value);
                this._inset ? this._renderer.addClass(this.nativeEl.nativeElement, 'mdc-list-divider--inset')
                    : this._renderer.removeClass(this.nativeEl.nativeElement, 'mdc-list-divider--inset');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcListDivider.prototype, "padded", {
            get: /**
             * @return {?}
             */
            function () { return this._padded; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._padded = common.toBoolean(value);
                this._padded ? this._renderer.addClass(this.nativeEl.nativeElement, 'mdc-list-divider--padded')
                    : this._renderer.removeClass(this.nativeEl.nativeElement, 'mdc-list-divider--padded');
            },
            enumerable: true,
            configurable: true
        });
        MdcListDivider.decorators = [
            { type: core.Component, args: [{selector: '[mdc-list-divider], mdc-list-divider',
                        exportAs: 'mdcListDivider',
                        template: '<div #nativeEl class="mdc-list-divider" role="seperator"></div>',
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    },] },
        ];
        /** @nocollapse */
        MdcListDivider.ctorParameters = function () { return [
            { type: core.Renderer2 }
        ]; };
        MdcListDivider.propDecorators = {
            inset: [{ type: core.Input }],
            padded: [{ type: core.Input }],
            nativeEl: [{ type: core.ViewChild, args: ['nativeEl',] }]
        };
        return MdcListDivider;
    }());
    var MdcList = /** @class */ (function () {
        function MdcList(_changeDetectorRef, _ngZone, elementRef) {
            var _this = this;
            this._changeDetectorRef = _changeDetectorRef;
            this._ngZone = _ngZone;
            this.elementRef = elementRef;
            /**
             * Emits whenever the component is destroyed.
             */
            this._destroy = new rxjs.Subject();
            this.dense = false;
            this.lines = 1;
            this.border = false;
            this._interactive = true;
            this.isHostClass = true;
            this.role = 'list';
            /**
             * Emits a change event whenever the selected state of an option changes.
             */
            this.selectionChange = new core.EventEmitter();
            /**
             * Combined stream of all of the child options' change events.
             */
            this.optionSelectionChanges = rxjs.defer(function () {
                if (_this.options) {
                    return rxjs.merge.apply(void 0, _this.options.map(function (option) { return option.selectionChange; }));
                }
                return _this._ngZone.onStable
                    .asObservable()
                    .pipe(operators.take(1), operators.switchMap(function () { return _this.optionSelectionChanges; }));
            });
        }
        Object.defineProperty(MdcList.prototype, "avatar", {
            get: /**
             * @return {?}
             */
            function () { return this._avatar; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._avatar = common.toBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcList.prototype, "interactive", {
            get: /**
             * @return {?}
             */
            function () { return this._interactive; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value !== this._interactive) {
                    this.setInteractive(value);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcList.prototype, "multiple", {
            get: /**
             * @return {?}
             */
            function () { return this._multiple; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.setMultiple(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcList.prototype, "classDense", {
            get: /**
             * @return {?}
             */
            function () {
                return this.dense ? 'mdc-list--dense' : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcList.prototype, "classLines", {
            get: /**
             * @return {?}
             */
            function () {
                return this.lines === 2 ? 'mdc-list--two-line' : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcList.prototype, "classAvatar", {
            get: /**
             * @return {?}
             */
            function () {
                return this.avatar ? 'mdc-list--avatar-list' : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcList.prototype, "classBorder", {
            get: /**
             * @return {?}
             */
            function () {
                return this.border ? 'ng-mdc-list--border' : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MdcList.prototype, "classInteractive", {
            get: /**
             * @return {?}
             */
            function () {
                return !this.interactive ? 'mdc-list--non-interactive' : '';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MdcList.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.optionSelectionChanges.pipe(operators.takeUntil(rxjs.merge(this._destroy, this.options.changes))).subscribe(function (event) {
                _this.selectionChange.emit(new MdcListItemChange(_this, event.source));
            });
            this.options.changes.pipe(operators.startWith(null), operators.takeUntil(this._destroy)).subscribe(function () {
                Promise.resolve().then(function () {
                    _this.setInteractive(_this.interactive);
                    if (!_this.multiple) {
                        _this._resetOptions();
                    }
                });
            });
        };
        /**
         * @return {?}
         */
        MdcList.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this._destroy.next();
            this._destroy.complete();
        };
        /**
         * Drops current option subscriptions and IDs and resets from scratch.
         * @return {?}
         */
        MdcList.prototype._resetOptions = /**
         * Drops current option subscriptions and IDs and resets from scratch.
         * @return {?}
         */
        function () {
            var _this = this;
            var /** @type {?} */ changedOrDestroyed = rxjs.merge(this.options.changes, this._destroy);
            this.optionSelectionChanges
                .pipe(operators.takeUntil(changedOrDestroyed)).subscribe(function (event) {
                if (!_this.multiple) {
                    _this.clearSelected(event.source);
                }
            });
        };
        /**
         * @param {?} value
         * @return {?}
         */
        MdcList.prototype.setInteractive = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._interactive = common.toBoolean(value);
            if (!this.options) {
                return;
            }
            this.options.forEach(function (option) {
                if (value) {
                    option.ripple.attachTo(option._getHostElement());
                }
                else {
                    option.ripple.destroy();
                }
            });
        };
        /**
         * @param {?} multiple
         * @return {?}
         */
        MdcList.prototype.setMultiple = /**
         * @param {?} multiple
         * @return {?}
         */
        function (multiple) {
            this._multiple = multiple;
            this.clearSelected();
            this._changeDetectorRef.markForCheck();
        };
        /**
         * @param {?=} skip
         * @return {?}
         */
        MdcList.prototype.clearSelected = /**
         * @param {?=} skip
         * @return {?}
         */
        function (skip) {
            if (!this.options) {
                return;
            }
            this.options.forEach(function (option) {
                if (option !== skip) {
                    option.setSelected(false);
                }
            });
        };
        MdcList.decorators = [
            { type: core.Component, args: [{selector: 'mdc-list',
                        exportAs: 'mdcList',
                        template: '<ng-content></ng-content>',
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    },] },
        ];
        /** @nocollapse */
        MdcList.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: core.NgZone },
            { type: core.ElementRef }
        ]; };
        MdcList.propDecorators = {
            dense: [{ type: core.Input }],
            lines: [{ type: core.Input }],
            border: [{ type: core.Input }],
            avatar: [{ type: core.Input }],
            interactive: [{ type: core.Input }],
            multiple: [{ type: core.Input }],
            isHostClass: [{ type: core.HostBinding, args: ['class.mdc-list',] }],
            role: [{ type: core.HostBinding, args: ['attr.role',] }],
            classDense: [{ type: core.HostBinding, args: ['class.mdc-list--dense',] }],
            classLines: [{ type: core.HostBinding, args: ['class.mdc-list--two-line',] }],
            classAvatar: [{ type: core.HostBinding, args: ['class.mdc-list--avatar-list',] }],
            classBorder: [{ type: core.HostBinding, args: ['class.ng-mdc-list--border',] }],
            classInteractive: [{ type: core.HostBinding, args: ['class.mdc-list--non-interactive',] }],
            options: [{ type: core.ContentChildren, args: [MdcListItem, { descendants: true },] }],
            selectionChange: [{ type: core.Output }]
        };
        return MdcList;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ LIST_DECLARATIONS = [
        MdcList,
        MdcListDivider,
        MdcListGroup,
        MdcListGroupSubheader,
        MdcListItem,
        MdcListItemGraphic,
        MdcListItemMeta,
        MdcListItemSecondary,
        MdcListItemText,
    ];
    var MdcListModule = /** @class */ (function () {
        function MdcListModule() {
        }
        MdcListModule.decorators = [
            { type: core.NgModule, args: [{
                        exports: LIST_DECLARATIONS,
                        declarations: LIST_DECLARATIONS,
                    },] },
        ];
        return MdcListModule;
    }());

    exports.MdcListModule = MdcListModule;
    exports.MdcListSelectionChange = MdcListSelectionChange;
    exports.MdcListItemGraphic = MdcListItemGraphic;
    exports.MdcListItemMeta = MdcListItemMeta;
    exports.MdcListItemText = MdcListItemText;
    exports.MdcListItemSecondary = MdcListItemSecondary;
    exports.MdcListItem = MdcListItem;
    exports.MdcListItemChange = MdcListItemChange;
    exports.MdcListGroup = MdcListGroup;
    exports.MdcListGroupSubheader = MdcListGroupSubheader;
    exports.MdcListDivider = MdcListDivider;
    exports.MdcList = MdcList;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
