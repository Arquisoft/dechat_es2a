/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular-mdc/web/common')) :
    typeof define === 'function' && define.amd ? define('@angular-mdc/web/elevation', ['exports', '@angular/core', '@angular-mdc/web/common'], factory) :
    (factory((global.ng = global.ng || {}, global.ng.web = global.ng.web || {}, global.ng.web.elevation = {}),global.ng.core,global.ng.web.common));
}(this, (function (exports,core,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MdcElevation = /** @class */ (function () {
        function MdcElevation(_renderer, elementRef) {
            this._renderer = _renderer;
            this.elementRef = elementRef;
            this._mdcElevation = 0;
        }
        Object.defineProperty(MdcElevation.prototype, "mdcElevation", {
            get: /**
             * @return {?}
             */
            function () { return this._mdcElevation; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._mdcElevation = common.toNumber(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        MdcElevation.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var /** @type {?} */ change = changes['mdcElevation'];
            if (common.toNumber(change.currentValue) < 0 || common.toNumber(change.currentValue > 24)) {
                throw new Error("Valid mdc-elevation values are 0 through 24");
            }
            if (!change.isFirstChange()) {
                this._renderer.removeClass(this.elementRef.nativeElement, "mdc-elevation--z" + change.previousValue);
            }
            this._renderer.addClass(this.elementRef.nativeElement, "mdc-elevation--z" + change.currentValue);
        };
        MdcElevation.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mdc-elevation]',
                        exportAs: 'mdcElevation'
                    },] },
        ];
        /** @nocollapse */
        MdcElevation.ctorParameters = function () { return [
            { type: core.Renderer2 },
            { type: core.ElementRef }
        ]; };
        MdcElevation.propDecorators = {
            mdcElevation: [{ type: core.Input, args: ['mdc-elevation',] }]
        };
        return MdcElevation;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ ELEVATION_DIRECTIVES = [
        MdcElevation
    ];
    var MdcElevationModule = /** @class */ (function () {
        function MdcElevationModule() {
        }
        MdcElevationModule.decorators = [
            { type: core.NgModule, args: [{
                        exports: [ELEVATION_DIRECTIVES],
                        declarations: [ELEVATION_DIRECTIVES],
                    },] },
        ];
        return MdcElevationModule;
    }());

    exports.MdcElevationModule = MdcElevationModule;
    exports.MdcElevation = MdcElevation;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
