/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('rxjs/operators'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@angular-mdc/web/common', ['exports', '@angular/core', '@angular/router', 'rxjs/operators', 'rxjs'], factory) :
    (factory((global.ng = global.ng || {}, global.ng.web = global.ng.web || {}, global.ng.web.common = {}),global.ng.core,global.ng.router,global.Rx.operators,global.Rx));
}(this, (function (exports,core,router,operators,rxjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} value
     * @return {?}
     */
    function toBoolean(value) {
        return value != null && "" + value !== 'false';
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EventRegistry = /** @class */ (function () {
        function EventRegistry() {
            this.unlisteners = new Map();
        }
        /**
         * @param {?} type
         * @param {?} listener
         * @param {?} target
         * @param {?=} passive
         * @return {?}
         */
        EventRegistry.prototype.listen = /**
         * @param {?} type
         * @param {?} listener
         * @param {?} target
         * @param {?=} passive
         * @return {?}
         */
        function (type, listener, target, passive) {
            if (!this.unlisteners.has(type)) {
                this.unlisteners.set(type, new WeakMap());
            }
            target.addEventListener(type, listener, passive);
            this.unlisteners.get(type).set(listener, function () { target.removeEventListener(type, listener, passive); });
        };
        /**
         * @param {?} type
         * @param {?} listener
         * @return {?}
         */
        EventRegistry.prototype.unlisten = /**
         * @param {?} type
         * @param {?} listener
         * @return {?}
         */
        function (type, listener) {
            if (!this.unlisteners.has(type)) {
                return;
            }
            var /** @type {?} */ unlisteners = this.unlisteners.get(type);
            if (!unlisteners.has(listener)) {
                return;
            }
            unlisteners.get(listener)();
            unlisteners.delete(listener);
        };
        EventRegistry.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        EventRegistry.ctorParameters = function () { return []; };
        return EventRegistry;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} event
     * @return {?}
     */
    function isSpaceKey(event) {
        // NB: keyCode does not work on Firefox, returning `0` for the space key.
        return event.keyCode !== 0 ? event.keyCode === 32 : event.key === ' ';
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Cached result Set of input types support by the current browser.
     */
    var /** @type {?} */ supportedInputTypes;
    /**
     * Types of `<input>` that *might* be supported.
     */
    var /** @type {?} */ candidateInputTypes = [
        'color',
        'button',
        'checkbox',
        'date',
        'datetime-local',
        'email',
        'file',
        'hidden',
        'image',
        'month',
        'number',
        'password',
        'radio',
        'range',
        'reset',
        'search',
        'submit',
        'tel',
        'text',
        'time',
        'url',
        'week',
    ];
    /**
     * @return {?} The input types supported by this browser.
     */
    function getSupportedInputTypes() {
        // Result is cached.
        if (supportedInputTypes) {
            return supportedInputTypes;
        }
        // We can't check if an input type is not supported until we're on the browser, so say that
        // everything is supported when not on the browser. We don't use `Platform` here since it's
        // just a helper function and can't inject it.
        if (typeof document !== 'object' || !document) {
            supportedInputTypes = new Set(candidateInputTypes);
            return supportedInputTypes;
        }
        var /** @type {?} */ featureTestInput = document.createElement('input');
        supportedInputTypes = new Set(candidateInputTypes.filter(function (value) {
            featureTestInput.setAttribute('type', value);
            return featureTestInput.type === value;
        }));
        return supportedInputTypes;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var /** @type {?} */ UP_ARROW = 38;
    var /** @type {?} */ DOWN_ARROW = 40;
    var /** @type {?} */ RIGHT_ARROW = 39;
    var /** @type {?} */ LEFT_ARROW = 37;
    var /** @type {?} */ PAGE_UP = 33;
    var /** @type {?} */ PAGE_DOWN = 34;
    var /** @type {?} */ HOME = 36;
    var /** @type {?} */ END = 35;
    var /** @type {?} */ ENTER = 13;
    var /** @type {?} */ SPACE = 32;
    var /** @type {?} */ TAB = 9;
    var /** @type {?} */ ESCAPE = 27;
    var /** @type {?} */ BACKSPACE = 8;
    var /** @type {?} */ DELETE = 46;
    var /** @type {?} */ A = 65;
    var /** @type {?} */ Z = 90;
    var /** @type {?} */ ZERO = 48;
    var /** @type {?} */ NINE = 57;
    var /** @type {?} */ COMMA = 188;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} value
     * @param {?=} fallbackValue
     * @return {?}
     */
    function toNumber(value, fallbackValue) {
        if (fallbackValue === void 0) { fallbackValue = 0; }
        return _isNumberValue(value) ? Number(value) : fallbackValue;
    }
    /**
     * Whether the provided value is considered a number.
     * @param {?} value
     * @return {?}
     */
    function _isNumberValue(value) {
        // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,
        // and other non-number values as NaN, where Number just uses 0) but it considers the string
        // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.
        return !isNaN(parseFloat(/** @type {?} */ (value))) && !isNaN(Number(value));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @return {?}
     */
    function isBrowser() {
        return typeof document === 'object' && !!document;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MdcPortalService = /** @class */ (function () {
        function MdcPortalService(_componentFactoryResolver, _appRef, _injector) {
            this._componentFactoryResolver = _componentFactoryResolver;
            this._appRef = _appRef;
            this._injector = _injector;
        }
        /**
         * @param {?} component
         * @param {?=} parent
         * @return {?}
         */
        MdcPortalService.prototype.createComponentRef = /**
         * @param {?} component
         * @param {?=} parent
         * @return {?}
         */
        function (component, parent) {
            var _this = this;
            if (parent === void 0) { parent = document.body; }
            var /** @type {?} */ componentRef = this._componentFactoryResolver
                .resolveComponentFactory(component)
                .create(this._injector);
            this._appRef.attachView(componentRef.hostView);
            this.setDisposeFn(function () {
                _this._appRef.detachView(componentRef.hostView);
                componentRef.destroy();
            });
            this._addChild(this._getComponentRootNode(componentRef), parent);
            return componentRef;
        };
        /**
         * @param {?} componentRef
         * @return {?}
         */
        MdcPortalService.prototype._getComponentRootNode = /**
         * @param {?} componentRef
         * @return {?}
         */
        function (componentRef) {
            return /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);
        };
        /**
         * @param {?} child
         * @param {?} parent
         * @return {?}
         */
        MdcPortalService.prototype._addChild = /**
         * @param {?} child
         * @param {?} parent
         * @return {?}
         */
        function (child, parent) {
            parent.appendChild(child);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        MdcPortalService.prototype.setDisposeFn = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this._disposeFn = fn;
        };
        /**
         * @return {?}
         */
        MdcPortalService.prototype.dispose = /**
         * @return {?}
         */
        function () {
            this._invokeDisposeFn();
        };
        /**
         * @return {?}
         */
        MdcPortalService.prototype._invokeDisposeFn = /**
         * @return {?}
         */
        function () {
            if (this._disposeFn) {
                this._disposeFn();
                this._disposeFn = null;
            }
        };
        MdcPortalService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        MdcPortalService.ctorParameters = function () { return [
            { type: core.ComponentFactoryResolver },
            { type: core.ApplicationRef },
            { type: core.Injector }
        ]; };
        return MdcPortalService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MdcRouter = /** @class */ (function () {
        function MdcRouter(_router) {
            var _this = this;
            this._router = _router;
            /**
             * Emits whenever the component is destroyed.
             */
            this._destroy = new rxjs.Subject();
            /**
             * Event emitted when the link is set active.
             */
            this.routeChange = new core.EventEmitter();
            this._router.events
                .pipe(operators.takeUntil(this._destroy), operators.filter(function (event) { return event instanceof router.NavigationEnd; })).subscribe(function (_) {
                _this._refreshActiveLink();
            });
        }
        /**
         * @return {?}
         */
        MdcRouter.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            this._listenToLinkChanges();
            this._listenToHrefLinkChanges();
            this._refreshActiveLink();
        };
        /**
         * @return {?}
         */
        MdcRouter.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this._destroy.next();
            this._destroy.complete();
        };
        /**
         * @return {?}
         */
        MdcRouter.prototype._listenToLinkChanges = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this._routerlinks.changes
                .pipe(operators.takeUntil(this._destroy))
                .subscribe(function () {
                _this._refreshActiveLink();
            });
        };
        /**
         * @return {?}
         */
        MdcRouter.prototype._listenToHrefLinkChanges = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this._routerHrefLinks.changes
                .pipe(operators.takeUntil(this._destroy))
                .subscribe(function () {
                _this._refreshActiveLink();
            });
        };
        /**
         * @return {?}
         */
        MdcRouter.prototype._refreshActiveLink = /**
         * @return {?}
         */
        function () {
            if (!this._isRouterActivated()) {
                return;
            }
            this._emitActivated(this._linkState());
        };
        /**
         * @return {?}
         */
        MdcRouter.prototype._isRouterActivated = /**
         * @return {?}
         */
        function () {
            return (!this._routerlinks || !this._routerHrefLinks
                || !this._router.navigated) ? false : true;
        };
        /**
         * @return {?}
         */
        MdcRouter.prototype._linkState = /**
         * @return {?}
         */
        function () {
            return this._routerlinks.some(this.isLinkActive())
                || this._routerHrefLinks.some(this.isLinkActive());
        };
        /**
         * @return {?}
         */
        MdcRouter.prototype.isLinkActive = /**
         * @return {?}
         */
        function () {
            var _this = this;
            return function (route) { return _this._router.isActive(route.urlTree, false); };
        };
        /**
         * Emits an activated link event.
         * @param {?} active
         * @return {?}
         */
        MdcRouter.prototype._emitActivated = /**
         * Emits an activated link event.
         * @param {?} active
         * @return {?}
         */
        function (active) {
            this.routeChange.emit({ active: active });
        };
        MdcRouter.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mdcRouter]',
                        exportAs: 'mdcRouter'
                    },] },
        ];
        /** @nocollapse */
        MdcRouter.ctorParameters = function () { return [
            { type: router.Router }
        ]; };
        MdcRouter.propDecorators = {
            routeChange: [{ type: core.Output }],
            _routerlinks: [{ type: core.ContentChildren, args: [router.RouterLink, { descendants: true },] }],
            _routerHrefLinks: [{ type: core.ContentChildren, args: [router.RouterLinkWithHref, { descendants: true },] }]
        };
        return MdcRouter;
    }());
    var MdcRouterModule = /** @class */ (function () {
        function MdcRouterModule() {
        }
        MdcRouterModule.decorators = [
            { type: core.NgModule, args: [{
                        exports: [MdcRouter],
                        declarations: [MdcRouter],
                    },] },
        ];
        return MdcRouterModule;
    }());

    exports.toBoolean = toBoolean;
    exports.EventRegistry = EventRegistry;
    exports.isSpaceKey = isSpaceKey;
    exports.getSupportedInputTypes = getSupportedInputTypes;
    exports.UP_ARROW = UP_ARROW;
    exports.DOWN_ARROW = DOWN_ARROW;
    exports.RIGHT_ARROW = RIGHT_ARROW;
    exports.LEFT_ARROW = LEFT_ARROW;
    exports.PAGE_UP = PAGE_UP;
    exports.PAGE_DOWN = PAGE_DOWN;
    exports.HOME = HOME;
    exports.END = END;
    exports.ENTER = ENTER;
    exports.SPACE = SPACE;
    exports.TAB = TAB;
    exports.ESCAPE = ESCAPE;
    exports.BACKSPACE = BACKSPACE;
    exports.DELETE = DELETE;
    exports.A = A;
    exports.Z = Z;
    exports.ZERO = ZERO;
    exports.NINE = NINE;
    exports.COMMA = COMMA;
    exports.toNumber = toNumber;
    exports._isNumberValue = _isNumberValue;
    exports.isBrowser = isBrowser;
    exports.MdcPortalService = MdcPortalService;
    exports.MdcRouter = MdcRouter;
    exports.MdcRouterModule = MdcRouterModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
