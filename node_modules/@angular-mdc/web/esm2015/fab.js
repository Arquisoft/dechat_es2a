/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ElementRef, HostBinding, Input, Renderer2, ViewEncapsulation, NgModule } from '@angular/core';
import { EventRegistry } from '@angular-mdc/web/common';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { MdcIcon, MdcIconModule } from '@angular-mdc/web/icon';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MdcFab {
    /**
     * @param {?} _changeDetectionRef
     * @param {?} _renderer
     * @param {?} elementRef
     * @param {?} _ripple
     */
    constructor(_changeDetectionRef, _renderer, elementRef, _ripple) {
        this._changeDetectionRef = _changeDetectionRef;
        this._renderer = _renderer;
        this.elementRef = elementRef;
        this._ripple = _ripple;
        this.tabIndex = 0;
        this.isHostClass = true;
    }
    /**
     * @return {?}
     */
    get mini() { return this._mini; }
    /**
     * @param {?} value
     * @return {?}
     */
    set mini(value) {
        this.setMini(value);
    }
    /**
     * @return {?}
     */
    get exited() { return this._exited; }
    /**
     * @param {?} value
     * @return {?}
     */
    set exited(value) {
        this.setExited(value);
    }
    /**
     * @return {?}
     */
    get position() { return this._position; }
    /**
     * @param {?} value
     * @return {?}
     */
    set position(value) {
        this.setPosition(value);
    }
    /**
     * @return {?}
     */
    get classMini() {
        return this.mini ? 'mdc-fab--mini' : '';
    }
    /**
     * @return {?}
     */
    get classExited() {
        return this.exited ? 'mdc-fab--exited' : '';
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.fabIcon) {
            this._renderer.addClass(this.fabIcon.elementRef.nativeElement, 'mdc-fab__icon');
            this._renderer.addClass(this._getHostElement(), 'mdc-fab__icon--size');
        }
        this._ripple.attachTo(this._getHostElement());
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._ripple.destroy();
    }
    /**
     * @param {?} mini
     * @return {?}
     */
    setMini(mini) {
        this._mini = mini;
        this._changeDetectionRef.markForCheck();
    }
    /**
     * @param {?} exited
     * @return {?}
     */
    setExited(exited) {
        this._exited = exited;
        this.tabIndex = exited ? -1 : this.tabIndex;
        this._changeDetectionRef.markForCheck();
    }
    /**
     * @param {?} position
     * @return {?}
     */
    setPosition(position) {
        this._renderer.removeClass(this._getHostElement(), `mdc-fab--${this._position}`);
        this._position = position;
        if (this.position) {
            this._renderer.addClass(this._getHostElement(), `mdc-fab--${position}`);
        }
    }
    /**
     * @param {?=} exited
     * @return {?}
     */
    toggleExited(exited) {
        this._exited = exited != null ? exited : !this._exited;
    }
    /**
     * Focuses the button.
     * @return {?}
     */
    focus() {
        this._getHostElement().focus();
    }
    /**
     * @return {?}
     */
    _getHostElement() {
        return this.elementRef.nativeElement;
    }
}
MdcFab.decorators = [
    { type: Component, args: [{selector: 'button[mdc-fab], a[mdc-fab]',
                template: '<ng-content></ng-content>',
                providers: [
                    MdcRipple,
                    EventRegistry,
                ],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
MdcFab.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: ElementRef },
    { type: MdcRipple }
];
MdcFab.propDecorators = {
    mini: [{ type: Input }],
    exited: [{ type: Input }],
    position: [{ type: Input }],
    tabIndex: [{ type: Input, args: ['attr.tabindex',] }],
    fabIcon: [{ type: ContentChild, args: [MdcIcon,] }],
    isHostClass: [{ type: HostBinding, args: ['class.mdc-fab',] }],
    classMini: [{ type: HostBinding, args: ['class.mdc-fab--mini',] }],
    classExited: [{ type: HostBinding, args: ['class.mdc-fab--exited',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MdcFabModule {
}
MdcFabModule.decorators = [
    { type: NgModule, args: [{
                imports: [MdcIconModule],
                exports: [MdcFab],
                declarations: [MdcFab],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MdcFabModule, MdcFab };
