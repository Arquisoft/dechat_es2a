/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, HostBinding, Input, Output, ViewEncapsulation, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { EventRegistry } from '@angular-mdc/web/common';
import { MdcRipple } from '@angular-mdc/web/ripple';

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @template A
 */
class MDCFoundation {
  /** @return enum{cssClasses} */
  static get cssClasses() {
    // Classes extending MDCFoundation should implement this method to return an object which exports every
    // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
    return {};
  }

  /** @return enum{strings} */
  static get strings() {
    // Classes extending MDCFoundation should implement this method to return an object which exports all
    // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
    return {};
  }

  /** @return enum{numbers} */
  static get numbers() {
    // Classes extending MDCFoundation should implement this method to return an object which exports all
    // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
    return {};
  }

  /** @return {!Object} */
  static get defaultAdapter() {
    // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
    // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
    // validation.
    return {};
  }

  /**
   * @param {A=} adapter
   */
  constructor(adapter = {}) {
    /** @protected {!A} */
    this.adapter_ = adapter;
  }

  init() {
    // Subclasses should override this method to perform initialization routines (registering events, etc.)
  }

  destroy() {
    // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
  }
}

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** @enum {string} */
const cssClasses = {
  ROOT: 'mdc-icon-button',
};

/** @enum {string} */
const strings = {
  DATA_TOGGLE_ON_LABEL: 'data-toggle-on-label',
  DATA_TOGGLE_ON_CONTENT: 'data-toggle-on-content',
  DATA_TOGGLE_ON_CLASS: 'data-toggle-on-class',
  DATA_TOGGLE_OFF_LABEL: 'data-toggle-off-label',
  DATA_TOGGLE_OFF_CONTENT: 'data-toggle-off-content',
  DATA_TOGGLE_OFF_CLASS: 'data-toggle-off-class',
  ARIA_PRESSED: 'aria-pressed',
  ARIA_LABEL: 'aria-label',
  CHANGE_EVENT: 'MDCIconButtonToggle:change',
};

/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @extends {MDCFoundation<!MDCIconButtonToggleAdapter>}
 */
class MDCIconButtonToggleFoundation extends MDCFoundation {
  static get cssClasses() {
    return cssClasses;
  }

  static get strings() {
    return strings;
  }

  static get defaultAdapter() {
    return {
      addClass: (/* className: string */) => {},
      removeClass: (/* className: string */) => {},
      registerInteractionHandler: (/* type: string, handler: EventListener */) => {},
      deregisterInteractionHandler: (/* type: string, handler: EventListener */) => {},
      setText: (/* text: string */) => {},
      getTabIndex: () => /* number */ 0,
      setTabIndex: (/* tabIndex: number */) => {},
      getAttr: (/* name: string */) => /* string */ '',
      setAttr: (/* name: string, value: string */) => {},
      removeAttr: (/* name: string */) => {},
      notifyChange: (/* evtData: IconButtonToggleEvent */) => {},
    };
  }

  constructor(adapter) {
    super(Object.assign(MDCIconButtonToggleFoundation.defaultAdapter, adapter));

    /** @private {boolean} */
    this.on_ = false;

    /** @private {boolean} */
    this.disabled_ = false;

    /** @private {number} */
    this.savedTabIndex_ = -1;

    /** @private {?IconButtonToggleState} */
    this.toggleOnData_ = null;

    /** @private {?IconButtonToggleState} */
    this.toggleOffData_ = null;

    this.clickHandler_ = /** @private {!EventListener} */ (
      () => this.toggleFromEvt_());
  }

  init() {
    this.refreshToggleData();
    this.savedTabIndex_ = this.adapter_.getTabIndex();
    this.adapter_.registerInteractionHandler('click', this.clickHandler_);
  }

  destroy() {
    this.adapter_.deregisterInteractionHandler('click', this.clickHandler_);
  }

  refreshToggleData() {
    this.toggleOnData_ = {
      label: this.adapter_.getAttr(strings.DATA_TOGGLE_ON_LABEL),
      content: this.adapter_.getAttr(strings.DATA_TOGGLE_ON_CONTENT),
      cssClass: this.adapter_.getAttr(strings.DATA_TOGGLE_ON_CLASS),
    };
    this.toggleOffData_ = {
      label: this.adapter_.getAttr(strings.DATA_TOGGLE_OFF_LABEL),
      content: this.adapter_.getAttr(strings.DATA_TOGGLE_OFF_CONTENT),
      cssClass: this.adapter_.getAttr(strings.DATA_TOGGLE_OFF_CLASS),
    };
  }

  /** @private */
  toggleFromEvt_() {
    this.toggle();
    const {on_: isOn} = this;
    this.adapter_.notifyChange(/** @type {!IconButtonToggleEvent} */ ({isOn}));
  }

  /** @return {boolean} */
  isOn() {
    return this.on_;
  }

  /** @param {boolean=} isOn */
  toggle(isOn = !this.on_) {
    this.on_ = isOn;

    const {ARIA_LABEL, ARIA_PRESSED} = MDCIconButtonToggleFoundation.strings;

    this.adapter_.setAttr(ARIA_PRESSED, this.on_.toString());

    const {cssClass: classToRemove} =
        this.on_ ? this.toggleOffData_ : this.toggleOnData_;

    if (classToRemove) {
      this.adapter_.removeClass(classToRemove);
    }

    const {content, label, cssClass} = this.on_ ? this.toggleOnData_ : this.toggleOffData_;

    if (cssClass) {
      this.adapter_.addClass(cssClass);
    }
    if (content) {
      this.adapter_.setText(content);
    }
    if (label) {
      this.adapter_.setAttr(ARIA_LABEL, label);
    }
  }
}

/** @record */
class IconButtonToggleState {}

/**
 * The aria-label value of the icon toggle, or undefined if there is no aria-label.
 * @export {string|undefined}
 */
IconButtonToggleState.prototype.label;

/**
 * The text for the icon toggle, or undefined if there is no text.
 * @export {string|undefined}
 */
IconButtonToggleState.prototype.content;

/**
 * The CSS class to add to the icon toggle, or undefined if there is no CSS class.
 * @export {string|undefined}
 */
IconButtonToggleState.prototype.cssClass;

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * See Material Design spec for more details on when to use ripples.
 * https://material.io/guidelines/motion/choreography.html#choreography-creation
 * @record
 */
class RippleCapableSurface {}

/** @protected {!Element} */
RippleCapableSurface.prototype.root_;

/**
 * Whether or not the ripple bleeds out of the bounds of the element.
 * @type {boolean|undefined}
 */
RippleCapableSurface.prototype.unbounded;

/**
 * Whether or not the ripple is attached to a disabled component.
 * @type {boolean|undefined}
 */
RippleCapableSurface.prototype.disabled;

/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ MDC_ICON_BUTTON_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => MdcIconButton),
    multi: true
};
/**
 * Change event object emitted by MdcIconButton.
 */
class MdcIconButtonChange {
    /**
     * @param {?} source
     * @param {?} value
     */
    constructor(source, value) {
        this.source = source;
        this.value = value;
    }
}
let /** @type {?} */ nextUniqueId = 0;
class MdcIconButton {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} elementRef
     * @param {?} ripple
     * @param {?} _registry
     */
    constructor(_changeDetectorRef, elementRef, ripple, _registry) {
        this._changeDetectorRef = _changeDetectorRef;
        this.elementRef = elementRef;
        this.ripple = ripple;
        this._registry = _registry;
        this._uniqueId = `mdc-icon-button-${++nextUniqueId}`;
        this.id = this._uniqueId;
        this.name = null;
        this.change = new EventEmitter();
        this.isHostClass = true;
        this.isMaterialIcons = true;
        this.ariaPressed = 'false';
        this._onChange = () => { };
        this._onTouched = () => { };
        this._mdcAdapter = {
            addClass: (className) => this._getIconInnerSelector() ? this._getIconInnerSelector().classList.add(className) :
                this._getHostElement().classList.add(className),
            removeClass: (className) => this._getIconInnerSelector() ? this._getIconInnerSelector().classList.remove(className) :
                this._getHostElement().classList.remove(className),
            registerInteractionHandler: (type, handler) => this._registry.listen(type, handler, this._getHostElement()),
            deregisterInteractionHandler: (type, handler) => this._registry.unlisten(type, handler),
            setText: (text) => this._getIconInnerSelector() ? this._getIconInnerSelector().textContent = text : this._getHostElement().textContent = text,
            getTabIndex: () => this._getHostElement().tabIndex,
            setTabIndex: (tabIndex) => this._getHostElement().tabIndex = tabIndex,
            getAttr: (name) => this._getHostElement().getAttribute(name),
            setAttr: (name, value) => this._getHostElement().setAttribute(name, value),
            removeAttr: (name) => this._getHostElement().removeAttribute(name),
            notifyChange: (evtData) => {
                this.change.emit(new MdcIconButtonChange(this, evtData.isOn));
                this._onChange(this._foundation.isOn());
            }
        };
        this._foundation = new MDCIconButtonToggleFoundation(this._mdcAdapter);
    }
    /**
     * @return {?}
     */
    get inputId() { return `${this.id || this._uniqueId}`; }
    /**
     * @return {?}
     */
    get iconOn() { return this._iconOn; }
    /**
     * @param {?} value
     * @return {?}
     */
    set iconOn(value) {
        this.setIconOn(value);
    }
    /**
     * @return {?}
     */
    get iconOff() { return this._iconOff; }
    /**
     * @param {?} value
     * @return {?}
     */
    set iconOff(value) {
        this.setIconOff(value);
    }
    /**
     * @return {?}
     */
    get on() { return this._foundation.isOn(); }
    /**
     * @param {?} value
     * @return {?}
     */
    set on(value) {
        this.setOn(value);
    }
    /**
     * @return {?}
     */
    get disabled() { return this._disabled; }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this.setDisabled(value);
    }
    /**
     * @return {?}
     */
    get primary() { return this._primary; }
    /**
     * @param {?} value
     * @return {?}
     */
    set primary(value) {
        this.setPrimary(value);
    }
    /**
     * @return {?}
     */
    get secondary() { return this._secondary; }
    /**
     * @param {?} value
     * @return {?}
     */
    set secondary(value) {
        this.setSecondary(value);
    }
    /**
     * @return {?}
     */
    get tabindex() {
        return this.disabled ? -1 : 0;
    }
    /**
     * @return {?}
     */
    get classPrimary() {
        return this.primary ? 'ng-mdc-icon-button--primary' : '';
    }
    /**
     * @return {?}
     */
    get classSecondary() {
        return this.secondary ? 'ng-mdc-icon-button--secondary' : '';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._foundation.init();
        this._foundation.toggle(this._on || this._foundation.isOn());
        this.ripple.attachTo(this._getHostElement(), true);
        this._changeDetectorRef.detectChanges();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.ripple.destroy();
        this._foundation.destroy();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._onChange(value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * @param {?} isOn
     * @return {?}
     */
    toggle(isOn) {
        this._foundation.toggle(isOn);
    }
    /**
     * @return {?}
     */
    refreshToggleData() {
        this._foundation.refreshToggleData();
    }
    /**
     * @return {?}
     */
    isOn() {
        return this._foundation.isOn();
    }
    /**
     * @param {?} iconOn
     * @return {?}
     */
    setIconOn(iconOn) {
        this._iconOn = iconOn;
        if (!this._getIconInnerSelector()) {
            this._mdcAdapter.removeAttr('data-toggle-on-class');
            this._mdcAdapter.setAttr('data-toggle-on-content', iconOn);
        }
        else {
            this._mdcAdapter.removeAttr('data-toggle-on-content');
            this._mdcAdapter.setAttr('data-toggle-on-class', iconOn);
        }
        this._foundation.refreshToggleData();
    }
    /**
     * @param {?} iconOff
     * @return {?}
     */
    setIconOff(iconOff) {
        this._iconOff = iconOff;
        if (!this._getIconInnerSelector()) {
            this._mdcAdapter.removeAttr('data-toggle-off-class');
            this._mdcAdapter.setAttr('data-toggle-off-content', iconOff);
        }
        else {
            this._mdcAdapter.removeAttr('data-toggle-off-content');
            this._mdcAdapter.setAttr('data-toggle-on-class', iconOff);
        }
        this._foundation.refreshToggleData();
    }
    /**
     * @param {?} on
     * @return {?}
     */
    setOn(on) {
        if (on !== this._on) {
            this._on = on;
            this._foundation.toggle(on);
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @param {?} primary
     * @return {?}
     */
    setPrimary(primary) {
        if (primary) {
            this.setSecondary(false);
        }
        this._primary = primary;
    }
    /**
     * @param {?} secondary
     * @return {?}
     */
    setSecondary(secondary) {
        if (secondary) {
            this.setPrimary(false);
        }
        this._secondary = secondary;
    }
    /**
     * Sets the button disabled state
     * @param {?} disabled
     * @return {?}
     */
    setDisabled(disabled) {
        this._disabled = disabled;
        disabled ? this._mdcAdapter.setAttr('disabled') : this._mdcAdapter.removeAttr('disabled');
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    _getHostElement() {
        return this.elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    _getIconInnerSelector() {
        const /** @type {?} */ iconSelector = this.elementRef.nativeElement.firstElementChild;
        this.isMaterialIcons = !iconSelector ? true : false;
        return iconSelector;
    }
}
MdcIconButton.decorators = [
    { type: Component, args: [{selector: 'button[mdcIconButton], a[mdcIconButton]',
                exportAs: 'mdcIconButton',
                template: '<ng-content></ng-content>',
                host: {
                    '[id]': 'id',
                },
                providers: [
                    MDC_ICON_BUTTON_CONTROL_VALUE_ACCESSOR,
                    MdcRipple,
                    EventRegistry,
                ],
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
MdcIconButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: MdcRipple },
    { type: EventRegistry }
];
MdcIconButton.propDecorators = {
    id: [{ type: Input }],
    name: [{ type: Input }],
    labelOn: [{ type: Input }],
    labelOff: [{ type: Input }],
    iconOn: [{ type: Input }],
    iconOff: [{ type: Input }],
    on: [{ type: Input }],
    disabled: [{ type: Input }],
    primary: [{ type: Input }],
    secondary: [{ type: Input }],
    change: [{ type: Output }],
    isHostClass: [{ type: HostBinding, args: ['class.mdc-icon-button',] }],
    isMaterialIcons: [{ type: HostBinding, args: ['class.material-icons',] }],
    ariaPressed: [{ type: HostBinding, args: ['attr.aria-pressed',] }],
    tabindex: [{ type: HostBinding, args: ['attr.tabIndex',] }],
    classPrimary: [{ type: HostBinding, args: ['class.ng-mdc-icon-button--primary',] }],
    classSecondary: [{ type: HostBinding, args: ['class.ng-mdc-icon-button--secondary',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MdcIconButtonModule {
}
MdcIconButtonModule.decorators = [
    { type: NgModule, args: [{
                exports: [MdcIconButton],
                declarations: [MdcIconButton]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MdcIconButtonModule, MDC_ICON_BUTTON_CONTROL_VALUE_ACCESSOR, MdcIconButtonChange, MdcIconButton };
