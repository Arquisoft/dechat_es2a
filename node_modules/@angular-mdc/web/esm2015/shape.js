/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, Input, Renderer2, ViewEncapsulation, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ MDC_VALID_SHAPE_CORNERS = [
    'top-left',
    'top-right',
    'bottom-right',
    'bottom-left'
];
class MdcShapeContainerCorner {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} elementRef
     * @param {?} _renderer
     */
    constructor(_changeDetectorRef, elementRef, _renderer) {
        this._changeDetectorRef = _changeDetectorRef;
        this.elementRef = elementRef;
        this._renderer = _renderer;
        this.isHostClass = true;
    }
    /**
     * @return {?}
     */
    get corner() { return this._corner; }
    /**
     * @param {?} corner
     * @return {?}
     */
    set corner(corner) {
        // If the directive is set without a name (updated programatically), then this setter will
        // trigger with an empty string and should not overwrite the programatically set value.
        if (!corner) {
            return;
        }
        this.setCorner(corner);
    }
    /**
     * @param {?} corner
     * @return {?}
     */
    setCorner(corner) {
        if (this._isCornerValid(corner)) {
            const /** @type {?} */ cssClass = 'mdc-shape-container__corner--';
            this._renderer.removeClass(this._getHostElement(), `${cssClass}${this.corner}`);
            this._renderer.addClass(this._getHostElement(), `${cssClass}${corner}`);
            this._corner = corner;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * Retrieves the DOM element of the component host.
     * @return {?}
     */
    _getHostElement() {
        return this.elementRef.nativeElement;
    }
    /**
     * Make sure the corner value is supported.
     * @param {?} corner
     * @return {?}
     */
    _isCornerValid(corner) {
        return MDC_VALID_SHAPE_CORNERS.indexOf(corner) > -1 ? true : false;
    }
}
MdcShapeContainerCorner.decorators = [
    { type: Component, args: [{selector: '[mdcShapeContainerCorner], mdc-shape-container-corner',
                exportAs: 'mdcShapeContainerCorner',
                template: '<ng-content></ng-content>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
MdcShapeContainerCorner.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: Renderer2 }
];
MdcShapeContainerCorner.propDecorators = {
    isHostClass: [{ type: HostBinding, args: ['class.mdc-shape-container__corner',] }],
    corner: [{ type: Input, args: ['mdcShapeContainerCorner',] }]
};
class MdcShapeContainer {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
}
MdcShapeContainer.decorators = [
    { type: Component, args: [{selector: '[mdcShapeContainer], [mdc-shape-container], mdc-shape-container',
                exportAs: 'mdcShapeContainer',
                template: '<ng-content></ng-content>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
MdcShapeContainer.ctorParameters = () => [
    { type: ElementRef }
];
MdcShapeContainer.propDecorators = {
    isHostClass: [{ type: HostBinding, args: ['class.mdc-shape-container',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ SHAPE_DECLARATIONS = [
    MdcShapeContainer,
    MdcShapeContainerCorner
];
class MdcShapeModule {
}
MdcShapeModule.decorators = [
    { type: NgModule, args: [{
                exports: [SHAPE_DECLARATIONS],
                declarations: [SHAPE_DECLARATIONS]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MdcShapeModule, MdcShapeContainerCorner, MdcShapeContainer };
