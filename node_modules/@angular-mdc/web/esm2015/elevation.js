/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { Directive, ElementRef, Input, Renderer2, NgModule } from '@angular/core';
import { toNumber } from '@angular-mdc/web/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MdcElevation {
    /**
     * @param {?} _renderer
     * @param {?} elementRef
     */
    constructor(_renderer, elementRef) {
        this._renderer = _renderer;
        this.elementRef = elementRef;
        this._mdcElevation = 0;
    }
    /**
     * @return {?}
     */
    get mdcElevation() { return this._mdcElevation; }
    /**
     * @param {?} value
     * @return {?}
     */
    set mdcElevation(value) {
        this._mdcElevation = toNumber(value);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const /** @type {?} */ change = changes['mdcElevation'];
        if (toNumber(change.currentValue) < 0 || toNumber(change.currentValue > 24)) {
            throw new Error(`Valid mdc-elevation values are 0 through 24`);
        }
        if (!change.isFirstChange()) {
            this._renderer.removeClass(this.elementRef.nativeElement, `mdc-elevation--z${change.previousValue}`);
        }
        this._renderer.addClass(this.elementRef.nativeElement, `mdc-elevation--z${change.currentValue}`);
    }
}
MdcElevation.decorators = [
    { type: Directive, args: [{
                selector: '[mdc-elevation]',
                exportAs: 'mdcElevation'
            },] },
];
/** @nocollapse */
MdcElevation.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
MdcElevation.propDecorators = {
    mdcElevation: [{ type: Input, args: ['mdc-elevation',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ ELEVATION_DIRECTIVES = [
    MdcElevation
];
class MdcElevationModule {
}
MdcElevationModule.decorators = [
    { type: NgModule, args: [{
                exports: [ELEVATION_DIRECTIVES],
                declarations: [ELEVATION_DIRECTIVES],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MdcElevationModule, MdcElevation };
