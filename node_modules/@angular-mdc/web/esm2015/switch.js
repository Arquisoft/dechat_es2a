/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, HostBinding, Input, Output, Renderer2, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { MdcFormFieldControl } from '@angular-mdc/web/form-field';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ MDC_SWITCH_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => MdcSwitch),
    multi: true
};
/**
 * Change event object emitted by MdcSwitch.
 */
class MdcSwitchChange {
    /**
     * @param {?} source
     * @param {?} checked
     */
    constructor(source, checked) {
        this.source = source;
        this.checked = checked;
    }
}
let /** @type {?} */ nextUniqueId = 0;
class MdcSwitch {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} _renderer
     * @param {?} elementRef
     */
    constructor(_changeDetectorRef, _renderer, elementRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._renderer = _renderer;
        this.elementRef = elementRef;
        this._uniqueId = `mdc-switch-${++nextUniqueId}`;
        this.componentInstance = MdcSwitch;
        this.id = this._uniqueId;
        this.name = null;
        this._checked = false;
        this._disabled = false;
        this.tabIndex = 0;
        this.change = new EventEmitter();
        this.isHostClass = true;
        /**
         * View -> model callback called when value changes
         */
        this._onChange = () => { };
        /**
         * View -> model callback called when control has been touched
         */
        this._onTouched = () => { };
    }
    /**
     * @return {?}
     */
    get checked() { return this._checked; }
    /**
     * @param {?} value
     * @return {?}
     */
    set checked(value) {
        this.setChecked(value);
    }
    /**
     * @return {?}
     */
    get disabled() { return this._disabled; }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this.setDisabledState(value);
    }
    /**
     * @return {?}
     */
    get inputId() { return `${this.id || this._uniqueId}-input`; }
    /**
     * @return {?}
     */
    get classDisabled() {
        return this.disabled ? 'mdc-switch--disabled' : '';
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onChange(evt) {
        evt.stopPropagation();
        this.setChecked(this.inputEl.nativeElement.checked);
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onInputClick(evt) {
        evt.stopPropagation();
    }
    /**
     * @return {?}
     */
    onBlur() {
        this._onTouched();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.setChecked(value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabled(disabled) {
        this.setDisabledState(disabled);
    }
    /**
     * @param {?} checked
     * @return {?}
     */
    setChecked(checked) {
        if (this.disabled) {
            return;
        }
        const /** @type {?} */ previousValue = this.checked;
        this._checked = checked;
        if (previousValue !== null || undefined) {
            this._onChange(this.checked);
            this.change.emit(new MdcSwitchChange(this, this.checked));
        }
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    isChecked() {
        return this.checked;
    }
    /**
     * @return {?}
     */
    isDisabled() {
        return this.disabled;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabledState(disabled) {
        this._disabled = disabled;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    focus() {
        this.inputEl.nativeElement.focus();
    }
}
MdcSwitch.decorators = [
    { type: Component, args: [{selector: 'mdc-switch',
                host: {
                    '[id]': 'id',
                },
                template: `
  <input type="checkbox"
    #inputEl
    role="switch"
    class="mdc-switch__native-control"
    [id]="inputId"
    [name]="name"
    [tabIndex]="tabIndex"
    [disabled]="disabled"
    [checked]="checked"
    (click)="onInputClick($event)"
    (blur)="onBlur()"
    (change)="onChange($event)"/>
  <div class="mdc-switch__background">
    <div class="mdc-switch__knob"></div>
  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                providers: [
                    MDC_SWITCH_CONTROL_VALUE_ACCESSOR,
                    [{ provide: MdcFormFieldControl, useExisting: MdcSwitch }],
                ]
            },] },
];
/** @nocollapse */
MdcSwitch.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: ElementRef }
];
MdcSwitch.propDecorators = {
    id: [{ type: Input }],
    name: [{ type: Input }],
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    tabIndex: [{ type: Input }],
    change: [{ type: Output }],
    isHostClass: [{ type: HostBinding, args: ['class.mdc-switch',] }],
    inputEl: [{ type: ViewChild, args: ['inputEl',] }],
    classDisabled: [{ type: HostBinding, args: ['class.mdc-switch--disabled',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MdcSwitchModule {
}
MdcSwitchModule.decorators = [
    { type: NgModule, args: [{
                exports: [MdcSwitch],
                declarations: [MdcSwitch],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MdcSwitchModule, MDC_SWITCH_CONTROL_VALUE_ACCESSOR, MdcSwitchChange, MdcSwitch };
