/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, Component, ContentChild, ElementRef, HostBinding, HostListener, Input, Renderer2, ViewEncapsulation, NgModule } from '@angular/core';
import { EventRegistry } from '@angular-mdc/web/common';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { MdcIcon } from '@angular-mdc/web/icon';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MdcButton {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     * @param {?} _ripple
     */
    constructor(_renderer, _elementRef, _ripple) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._ripple = _ripple;
        this._raised = false;
        this._primary = false;
        this._dense = false;
        this._secondary = false;
        this._unelevated = false;
        this._outlined = false;
        this._disabled = false;
        this.isHostClass = true;
    }
    /**
     * @return {?}
     */
    get raised() { return this._raised; }
    /**
     * @param {?} value
     * @return {?}
     */
    set raised(value) {
        this.setRaised(value);
    }
    /**
     * @return {?}
     */
    get primary() { return this._primary; }
    /**
     * @param {?} value
     * @return {?}
     */
    set primary(value) {
        this.setPrimary(value);
    }
    /**
     * @return {?}
     */
    get dense() { return this._dense; }
    /**
     * @param {?} value
     * @return {?}
     */
    set dense(value) {
        this.setDense(value);
    }
    /**
     * @return {?}
     */
    get secondary() { return this._secondary; }
    /**
     * @param {?} value
     * @return {?}
     */
    set secondary(value) {
        this.setSecondary(value);
    }
    /**
     * @return {?}
     */
    get unelevated() { return this._unelevated; }
    /**
     * @param {?} value
     * @return {?}
     */
    set unelevated(value) {
        this.setUnelevated(value);
    }
    /**
     * @return {?}
     */
    get outlined() { return this._outlined; }
    /**
     * @param {?} value
     * @return {?}
     */
    set outlined(value) {
        this.setOutlined(value);
    }
    /**
     * @return {?}
     */
    get icon() { return this._icon; }
    /**
     * @param {?} value
     * @return {?}
     */
    set icon(value) {
        this.setIcon(value);
    }
    /**
     * @return {?}
     */
    get disabled() { return this._disabled; }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this.setDisabled(value);
    }
    /**
     * @return {?}
     */
    get tabindex() {
        return this.disabled ? -1 : 0;
    }
    /**
     * @return {?}
     */
    get classRaised() {
        return this.raised ? 'mdc-button--raised' : '';
    }
    /**
     * @return {?}
     */
    get classPrimary() {
        return this.primary ? 'mdc-button--primary' : '';
    }
    /**
     * @return {?}
     */
    get classSecondary() {
        return this.secondary ? 'mdc-button--secondary' : '';
    }
    /**
     * @return {?}
     */
    get classDense() {
        return this.dense ? 'mdc-button--dense' : '';
    }
    /**
     * @return {?}
     */
    get classUnelevated() {
        return this.unelevated ? 'mdc-button--unelevated' : '';
    }
    /**
     * @return {?}
     */
    get classOutlined() {
        return this.outlined ? 'mdc-button--outlined' : '';
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onclick(evt) {
        this._onClick(evt);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._ripple.attachTo(this.getHostElement());
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._ripple.destroy();
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabled(disabled) {
        this._disabled = disabled;
        if (disabled) {
            this._renderer.setAttribute(this.getHostElement(), 'disabled', 'true');
            this._renderer.setAttribute(this.getHostElement(), 'aria-disabled', 'true');
        }
        else {
            this._renderer.removeAttribute(this.getHostElement(), 'disabled');
            this._renderer.removeAttribute(this.getHostElement(), 'aria-disabled');
        }
    }
    /**
     * @param {?} raised
     * @return {?}
     */
    setRaised(raised) {
        this._raised = raised;
    }
    /**
     * @param {?} primary
     * @return {?}
     */
    setPrimary(primary) {
        this._primary = primary;
    }
    /**
     * @param {?} dense
     * @return {?}
     */
    setDense(dense) {
        this._dense = dense;
    }
    /**
     * @param {?} secondary
     * @return {?}
     */
    setSecondary(secondary) {
        this._secondary = secondary;
    }
    /**
     * @param {?} unelevated
     * @return {?}
     */
    setUnelevated(unelevated) {
        this._unelevated = unelevated;
    }
    /**
     * @param {?} outlined
     * @return {?}
     */
    setOutlined(outlined) {
        this._outlined = outlined;
    }
    /**
     * @param {?} icon
     * @return {?}
     */
    setIcon(icon) {
        this._icon = icon;
        if (this.buttonIcon) {
            this._renderer.addClass(this.buttonIcon.elementRef.nativeElement, 'mdc-button__icon');
        }
        else if (icon) {
            this._renderer.addClass(this.icon, 'mdc-button__icon');
        }
    }
    /**
     * Focuses the button.
     * @return {?}
     */
    focus() {
        this.getHostElement().focus();
    }
    /**
     * @return {?}
     */
    getHostElement() {
        return this._elementRef.nativeElement;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onClick(event) {
        // A disabled button shouldn't apply any actions
        if (this.disabled) {
            event.preventDefault();
            event.stopImmediatePropagation();
        }
    }
}
MdcButton.decorators = [
    { type: Component, args: [{exportAs: 'mdcButton',
                selector: 'button[mdc-button], a[mdc-button]',
                template: '<ng-content></ng-content>',
                providers: [
                    MdcRipple,
                    EventRegistry
                ],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
MdcButton.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: MdcRipple }
];
MdcButton.propDecorators = {
    raised: [{ type: Input }],
    primary: [{ type: Input }],
    dense: [{ type: Input }],
    secondary: [{ type: Input }],
    unelevated: [{ type: Input }],
    outlined: [{ type: Input }],
    icon: [{ type: Input }],
    disabled: [{ type: Input }],
    tabindex: [{ type: HostBinding, args: ['tabindex',] }],
    isHostClass: [{ type: HostBinding, args: ['class.mdc-button',] }],
    classRaised: [{ type: HostBinding, args: ['class.mdc-button--raised',] }],
    classPrimary: [{ type: HostBinding, args: ['class.mdc-button--primary',] }],
    classSecondary: [{ type: HostBinding, args: ['class.mdc-button--secondary',] }],
    classDense: [{ type: HostBinding, args: ['class.mdc-button--dense',] }],
    classUnelevated: [{ type: HostBinding, args: ['class.mdc-button--unelevated',] }],
    classOutlined: [{ type: HostBinding, args: ['class.mdc-button--outlined',] }],
    onclick: [{ type: HostListener, args: ['click', ['$event'],] }],
    buttonIcon: [{ type: ContentChild, args: [MdcIcon,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MdcButtonModule {
}
MdcButtonModule.decorators = [
    { type: NgModule, args: [{
                exports: [MdcButton],
                declarations: [MdcButton]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MdcButtonModule, MdcButton };
