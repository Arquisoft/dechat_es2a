/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { Directive, ElementRef, HostBinding, Input, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, EventEmitter, Output, ViewEncapsulation, NgModule } from '@angular/core';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { takeUntil, startWith } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { EventRegistry, isBrowser, toBoolean } from '@angular-mdc/web/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MdcAppBarRow {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
}
MdcAppBarRow.decorators = [
    { type: Directive, args: [{
                selector: 'mdc-app-bar-row, [mdcAppBarRow]',
                exportAs: 'mdcAppBarRow'
            },] },
];
/** @nocollapse */
MdcAppBarRow.ctorParameters = () => [
    { type: ElementRef }
];
MdcAppBarRow.propDecorators = {
    isHostClass: [{ type: HostBinding, args: ['class.mdc-top-app-bar__row',] }]
};
class MdcAppBarSection {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
        this.role = 'toolbar';
    }
    /**
     * @return {?}
     */
    get classAlignStart() {
        return this.align === 'start' ? 'mdc-top-app-bar__section--align-start' : '';
    }
    /**
     * @return {?}
     */
    get classAlignEnd() {
        return this.align === 'end' ? 'mdc-top-app-bar__section--align-end' : '';
    }
}
MdcAppBarSection.decorators = [
    { type: Directive, args: [{
                selector: 'mdc-app-bar-section, [mdcAppBarSection]',
                exportAs: 'mdcAppBarSection'
            },] },
];
/** @nocollapse */
MdcAppBarSection.ctorParameters = () => [
    { type: ElementRef }
];
MdcAppBarSection.propDecorators = {
    align: [{ type: Input }],
    isHostClass: [{ type: HostBinding, args: ['class.mdc-top-app-bar__section',] }],
    role: [{ type: HostBinding, args: ['attr.role',] }],
    classAlignStart: [{ type: HostBinding, args: ['class.mdc-top-app-bar__section--align-start',] }],
    classAlignEnd: [{ type: HostBinding, args: ['class.mdc-top-app-bar__section--align-end',] }]
};
class MdcAppBarActionItem {
    /**
     * @param {?} elementRef
     * @param {?} _ripple
     */
    constructor(elementRef, _ripple) {
        this.elementRef = elementRef;
        this._ripple = _ripple;
        this.role = 'button';
        this.isHostClass = true;
        _ripple.attachTo(this.elementRef.nativeElement, true);
    }
}
MdcAppBarActionItem.decorators = [
    { type: Directive, args: [{
                selector: 'mdc-icon[mdcAppBarActionItem], [mdcAppBarActionItem], mdc-app-bar-action-item',
                exportAs: 'mdcAppBarActionItem',
                providers: [MdcRipple]
            },] },
];
/** @nocollapse */
MdcAppBarActionItem.ctorParameters = () => [
    { type: ElementRef },
    { type: MdcRipple }
];
MdcAppBarActionItem.propDecorators = {
    role: [{ type: HostBinding, args: ['attr.role',] }],
    isHostClass: [{ type: HostBinding, args: ['class.mdc-top-app-bar__action-item',] }]
};
class MdcAppBarNavigationIcon {
    /**
     * @param {?} elementRef
     * @param {?} _ripple
     */
    constructor(elementRef, _ripple) {
        this.elementRef = elementRef;
        this._ripple = _ripple;
        this.role = 'button';
        this.isHostClass = true;
        _ripple.attachTo(this.getHostElement(), true);
    }
    /**
     * Retrieves the DOM element of the directive.
     * @return {?}
     */
    getHostElement() {
        return this.elementRef.nativeElement;
    }
}
MdcAppBarNavigationIcon.decorators = [
    { type: Directive, args: [{
                selector: 'mdc-icon[mdcAppBarNavIcon], [mdcAppBarNavIcon], mdc-icon[mdcAppBarNavigationIcon]',
                exportAs: 'mdcAppBarNavigationIcon',
                providers: [MdcRipple]
            },] },
];
/** @nocollapse */
MdcAppBarNavigationIcon.ctorParameters = () => [
    { type: ElementRef },
    { type: MdcRipple }
];
MdcAppBarNavigationIcon.propDecorators = {
    role: [{ type: HostBinding, args: ['attr.role',] }],
    isHostClass: [{ type: HostBinding, args: ['class.mdc-top-app-bar__navigation-icon',] }]
};
class MdcAppBarTitle {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
}
MdcAppBarTitle.decorators = [
    { type: Directive, args: [{
                selector: 'mdc-app-bar-title, [mdcAppBarTitle]',
                exportAs: 'mdcAppBarTitle'
            },] },
];
/** @nocollapse */
MdcAppBarTitle.ctorParameters = () => [
    { type: ElementRef }
];
MdcAppBarTitle.propDecorators = {
    isHostClass: [{ type: HostBinding, args: ['class.mdc-top-app-bar__title',] }]
};

/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @template A
 */
class MDCFoundation {
  /** @return enum{cssClasses} */
  static get cssClasses() {
    // Classes extending MDCFoundation should implement this method to return an object which exports every
    // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
    return {};
  }

  /** @return enum{strings} */
  static get strings() {
    // Classes extending MDCFoundation should implement this method to return an object which exports all
    // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
    return {};
  }

  /** @return enum{numbers} */
  static get numbers() {
    // Classes extending MDCFoundation should implement this method to return an object which exports all
    // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
    return {};
  }

  /** @return {!Object} */
  static get defaultAdapter() {
    // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
    // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
    // validation.
    return {};
  }

  /**
   * @param {A=} adapter
   */
  constructor(adapter = {}) {
    /** @protected {!A} */
    this.adapter_ = adapter;
  }

  init() {
    // Subclasses should override this method to perform initialization routines (registering events, etc.)
  }

  destroy() {
    // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
  }
}

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * See Material Design spec for more details on when to use ripples.
 * https://material.io/guidelines/motion/choreography.html#choreography-creation
 * @record
 */
class RippleCapableSurface {}

/** @protected {!Element} */
RippleCapableSurface.prototype.root_;

/**
 * Whether or not the ripple bleeds out of the bounds of the element.
 * @type {boolean|undefined}
 */
RippleCapableSurface.prototype.unbounded;

/**
 * Whether or not the ripple is attached to a disabled component.
 * @type {boolean|undefined}
 */
RippleCapableSurface.prototype.disabled;

/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** @enum {string} */
const cssClasses$1 = {
  FIXED_CLASS: 'mdc-top-app-bar--fixed',
  FIXED_SCROLLED_CLASS: 'mdc-top-app-bar--fixed-scrolled',
  SHORT_CLASS: 'mdc-top-app-bar--short',
  SHORT_HAS_ACTION_ITEM_CLASS: 'mdc-top-app-bar--short-has-action-item',
  SHORT_COLLAPSED_CLASS: 'mdc-top-app-bar--short-collapsed',
};

/** @enum {number} */
const numbers$1 = {
  DEBOUNCE_THROTTLE_RESIZE_TIME_MS: 100,
  MAX_TOP_APP_BAR_HEIGHT: 128,
};

/** @enum {string} */
const strings$1 = {
  ACTION_ITEM_SELECTOR: '.mdc-top-app-bar__action-item',
  NAVIGATION_EVENT: 'MDCTopAppBar:nav',
  NAVIGATION_ICON_SELECTOR: '.mdc-top-app-bar__navigation-icon',
  ROOT_SELECTOR: '.mdc-top-app-bar',
  TITLE_SELECTOR: '.mdc-top-app-bar__title',
};

/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @extends {MDCFoundation<!MDCTopAppBarAdapter>}
 */
class MDCTopAppBarBaseFoundation extends MDCFoundation {
  /** @return enum {string} */
  static get strings() {
    return strings$1;
  }

  /** @return enum {string} */
  static get cssClasses() {
    return cssClasses$1;
  }

  /** @return enum {number} */
  static get numbers() {
    return numbers$1;
  }

  /**
   * {@see MDCTopAppBarAdapter} for typing information on parameters and return
   * types.
   * @return {!MDCTopAppBarAdapter}
   */
  static get defaultAdapter() {
    return /** @type {!MDCTopAppBarAdapter} */ ({
      hasClass: (/* className: string */) => {},
      addClass: (/* className: string */) => {},
      removeClass: (/* className: string */) => {},
      setStyle: (/* property: string, value: string */) => {},
      getTopAppBarHeight: () => {},
      registerNavigationIconInteractionHandler: (/* type: string, handler: EventListener */) => {},
      deregisterNavigationIconInteractionHandler: (/* type: string, handler: EventListener */) => {},
      notifyNavigationIconClicked: () => {},
      registerScrollHandler: (/* handler: EventListener */) => {},
      deregisterScrollHandler: (/* handler: EventListener */) => {},
      registerResizeHandler: (/* handler: EventListener */) => {},
      deregisterResizeHandler: (/* handler: EventListener */) => {},
      getViewportScrollY: () => /* number */ 0,
      getTotalActionItems: () => /* number */ 0,
    });
  }

  /**
   * @param {!MDCTopAppBarAdapter} adapter
   */
  constructor(/** @type {!MDCTopAppBarAdapter} */ adapter) {
    super(Object.assign(MDCTopAppBarBaseFoundation.defaultAdapter, adapter));

    this.navClickHandler_ = () => this.adapter_.notifyNavigationIconClicked();
  }

  init() {
    this.adapter_.registerNavigationIconInteractionHandler('click', this.navClickHandler_);
  }

  destroy() {
    this.adapter_.deregisterNavigationIconInteractionHandler('click', this.navClickHandler_);
  }
}

/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @extends {MDCTopAppBarFoundation<!MDCFixedTopAppBarFoundation>}
 * @final
 */
class MDCFixedTopAppBarFoundation extends MDCTopAppBarBaseFoundation {
  /**
   * @param {!MDCTopAppBarAdapter} adapter
   */
  constructor(adapter) {
    super(adapter);
    /** State variable for the previous scroll iteration top app bar state */
    this.wasScrolled_ = false;

    this.scrollHandler_ = () => this.fixedScrollHandler_();
  }

  init() {
    super.init();
    this.adapter_.registerScrollHandler(this.scrollHandler_);
  }

  destroy() {
    super.destroy();
    this.adapter_.deregisterScrollHandler(this.scrollHandler_);
  }

  /**
   * Scroll handler for applying/removing the modifier class
   * on the fixed top app bar.
   */
  fixedScrollHandler_() {
    const currentScroll = this.adapter_.getViewportScrollY();

    if (currentScroll <= 0) {
      if (this.wasScrolled_) {
        this.adapter_.removeClass(cssClasses$1.FIXED_SCROLLED_CLASS);
        this.wasScrolled_ = false;
      }
    } else {
      if (!this.wasScrolled_) {
        this.adapter_.addClass(cssClasses$1.FIXED_SCROLLED_CLASS);
        this.wasScrolled_ = true;
      }
    }
  }
}

/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @extends {MDCTopAppBarBaseFoundation<!MDCShortTopAppBarFoundation>}
 * @final
 */
class MDCShortTopAppBarFoundation extends MDCTopAppBarBaseFoundation {
  /**
   * @param {!MDCTopAppBarAdapter} adapter
   */
  constructor(adapter) {
    super(adapter);
    // State variable for the current top app bar state
    this.isCollapsed = false;

    this.scrollHandler_ = () => this.shortAppBarScrollHandler_();
  }

  init() {
    super.init();
    const isAlwaysCollapsed = this.adapter_.hasClass(cssClasses$1.SHORT_COLLAPSED_CLASS);

    if (this.adapter_.getTotalActionItems() > 0) {
      this.adapter_.addClass(cssClasses$1.SHORT_HAS_ACTION_ITEM_CLASS);
    }

    if (!isAlwaysCollapsed) {
      this.adapter_.registerScrollHandler(this.scrollHandler_);
      this.shortAppBarScrollHandler_();
    }
  }

  destroy() {
    super.destroy();
    this.adapter_.deregisterScrollHandler(this.scrollHandler_);
  }


  /**
   * Scroll handler for applying/removing the collapsed modifier class
   * on the short top app bar.
   * @private
   */
  shortAppBarScrollHandler_() {
    const currentScroll = this.adapter_.getViewportScrollY();

    if (currentScroll <= 0) {
      if (this.isCollapsed) {
        this.adapter_.removeClass(cssClasses$1.SHORT_COLLAPSED_CLASS);
        this.isCollapsed = false;
      }
    } else {
      if (!this.isCollapsed) {
        this.adapter_.addClass(cssClasses$1.SHORT_COLLAPSED_CLASS);
        this.isCollapsed = true;
      }
    }
  }
}

/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const INITIAL_VALUE = 0;
/**
 * @extends {MDCTopAppBarBaseFoundation<!MDCTopAppBarFoundation>}
 * @final
 */
class MDCTopAppBarFoundation extends MDCTopAppBarBaseFoundation {
  /**
   * @param {!MDCTopAppBarAdapter} adapter
   */
  constructor(adapter) {
    super(adapter);
    /**
     * Used for diffs of current scroll position vs previous scroll position
     * @private {number}
     */
    this.lastScrollPosition_ = this.adapter_.getViewportScrollY();

    /**
     * Used to verify when the top app bar is completely showing or completely hidden
     * @private {number}
     */
    this.topAppBarHeight_ = this.adapter_.getTopAppBarHeight();

    /**
     * wasDocked_ is used to indicate if the top app bar was docked in the previous
     * scroll handler iteration.
     * @private {boolean}
     */
    this.wasDocked_ = true;

    /**
     * isDockedShowing_ is used to indicate if the top app bar is docked in the fully
     * shown position.
     * @private {boolean}
     */
    this.isDockedShowing_ = true;

    /**
     * Variable for current scroll position of the top app bar
     * @private {number}
     */
    this.currentAppBarOffsetTop_ = 0;

    /**
     * Used to prevent the top app bar from being scrolled out of view during resize events
     * @private {boolean} */
    this.isCurrentlyBeingResized_ = false;

    /**
     * The timeout that's used to throttle the resize events
     * @private {number}
     */
    this.resizeThrottleId_ = INITIAL_VALUE;

    /**
     * The timeout that's used to debounce toggling the isCurrentlyBeingResized_ variable after a resize
     * @private {number}
     */
    this.resizeDebounceId_ = INITIAL_VALUE;

    this.scrollHandler_ = () => this.topAppBarScrollHandler_();
    this.resizeHandler_ = () => this.topAppBarResizeHandler_();
  }

  init() {
    super.init();
    this.adapter_.registerScrollHandler(this.scrollHandler_);
    this.adapter_.registerResizeHandler(this.resizeHandler_);
  }

  destroy() {
    super.destroy();
    this.adapter_.deregisterScrollHandler(this.scrollHandler_);
    this.adapter_.deregisterResizeHandler(this.resizeHandler_);
    this.adapter_.setStyle('top', '');
  }

  /**
   * Function to determine if the DOM needs to update.
   * @return {boolean}
   * @private
   */
  checkForUpdate_() {
    const offscreenBoundaryTop = -this.topAppBarHeight_;
    const hasAnyPixelsOffscreen = this.currentAppBarOffsetTop_ < 0;
    const hasAnyPixelsOnscreen = this.currentAppBarOffsetTop_ > offscreenBoundaryTop;
    const partiallyShowing = hasAnyPixelsOffscreen && hasAnyPixelsOnscreen;

    // If it's partially showing, it can't be docked.
    if (partiallyShowing) {
      this.wasDocked_ = false;
    } else {
      // Not previously docked and not partially showing, it's now docked.
      if (!this.wasDocked_) {
        this.wasDocked_ = true;
        return true;
      } else if (this.isDockedShowing_ !== hasAnyPixelsOnscreen) {
        this.isDockedShowing_ = hasAnyPixelsOnscreen;
        return true;
      }
    }

    return partiallyShowing;
  }

  /**
   * Function to move the top app bar if needed.
   * @private
   */
  moveTopAppBar_() {
    if (this.checkForUpdate_()) {
      // Once the top app bar is fully hidden we use the max potential top app bar height as our offset
      // so the top app bar doesn't show if the window resizes and the new height > the old height.
      let offset = this.currentAppBarOffsetTop_;
      if (Math.abs(offset) >= this.topAppBarHeight_) {
        offset = -numbers$1.MAX_TOP_APP_BAR_HEIGHT;
      }

      this.adapter_.setStyle('top', offset + 'px');
    }
  }

  /**
   * Scroll handler for the default scroll behavior of the top app bar.
   * @private
   */
  topAppBarScrollHandler_() {
    const currentScrollPosition = Math.max(this.adapter_.getViewportScrollY(), 0);
    const diff = currentScrollPosition - this.lastScrollPosition_;
    this.lastScrollPosition_ = currentScrollPosition;

    // If the window is being resized the lastScrollPosition_ needs to be updated but the
    // current scroll of the top app bar should stay in the same position.
    if (!this.isCurrentlyBeingResized_) {
      this.currentAppBarOffsetTop_ -= diff;

      if (this.currentAppBarOffsetTop_ > 0) {
        this.currentAppBarOffsetTop_ = 0;
      } else if (Math.abs(this.currentAppBarOffsetTop_) > this.topAppBarHeight_) {
        this.currentAppBarOffsetTop_ = -this.topAppBarHeight_;
      }

      this.moveTopAppBar_();
    }
  }

  /**
   * Top app bar resize handler that throttle/debounce functions that execute updates.
   * @private
   */
  topAppBarResizeHandler_() {
    // Throttle resize events 10 p/s
    if (!this.resizeThrottleId_) {
      this.resizeThrottleId_ = setTimeout(() => {
        this.resizeThrottleId_ = INITIAL_VALUE;
        this.throttledResizeHandler_();
      }, numbers$1.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);
    }

    this.isCurrentlyBeingResized_ = true;

    if (this.resizeDebounceId_) {
      clearTimeout(this.resizeDebounceId_);
    }

    this.resizeDebounceId_ = setTimeout(() => {
      this.topAppBarScrollHandler_();
      this.isCurrentlyBeingResized_ = false;
      this.resizeDebounceId_ = INITIAL_VALUE;
    }, numbers$1.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);
  }

  /**
   * Throttled function that updates the top app bar scrolled values if the
   * top app bar height changes.
   * @private
   */
  throttledResizeHandler_() {
    const currentHeight = this.adapter_.getTopAppBarHeight();
    if (this.topAppBarHeight_ !== currentHeight) {
      this.wasDocked_ = false;

      // Since the top app bar has a different height depending on the screen width, this
      // will ensure that the top app bar remains in the correct location if
      // completely hidden and a resize makes the top app bar a different height.
      this.currentAppBarOffsetTop_ -= this.topAppBarHeight_ - currentHeight;
      this.topAppBarHeight_ = currentHeight;
    }
    this.topAppBarScrollHandler_();
  }
}

/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Event object emitted by MdcAppBar navigation icon selected.
 */
class MdcAppBarNavSelected {
    /**
     * @param {?} source
     */
    constructor(source) {
        this.source = source;
    }
}
class MdcAppBar {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} elementRef
     * @param {?} _registry
     */
    constructor(_changeDetectorRef, elementRef, _registry) {
        this._changeDetectorRef = _changeDetectorRef;
        this.elementRef = elementRef;
        this._registry = _registry;
        /**
         * Emits whenever the component is destroyed.
         */
        this._destroy = new Subject();
        this._fixed = false;
        this._prominent = false;
        this._short = false;
        this._shortCollapsed = false;
        this._dense = false;
        /**
         * Event emitted when the navigation icon is selected.
         */
        this.navigationSelected = new EventEmitter();
        this.isHostClass = true;
        this._mdcAdapter = {
            hasClass: (className) => this._getHostElement().classList.contains(className),
            addClass: (className) => this._getHostElement().classList.add(className),
            removeClass: (className) => {
                if (className === 'mdc-top-app-bar--short-collapsed' && this.shortCollapsed) {
                    return;
                }
                else {
                    this._getHostElement().classList.remove(className);
                }
            },
            setStyle: (property, value) => this._getHostElement().style.setProperty(property, value),
            getTopAppBarHeight: () => this._getHostElement().clientHeight,
            notifyNavigationIconClicked: () => this.navigationSelected.emit({ source: this }),
            registerScrollHandler: (handler) => {
                if (!isBrowser()) {
                    return;
                }
                this._registry.listen('scroll', handler, this.viewport ? this.viewport : window);
            },
            deregisterScrollHandler: (handler) => {
                if (!isBrowser()) {
                    return;
                }
                this._registry.unlisten('scroll', handler);
            },
            registerResizeHandler: (handler) => {
                if (!isBrowser()) {
                    return;
                }
                this._registry.listen('resize', handler, this.viewport ? this.viewport : window);
            },
            deregisterResizeHandler: (handler) => {
                if (!isBrowser()) {
                    return;
                }
                this._registry.unlisten('resize', handler);
            },
            getViewportScrollY: () => {
                if (!isBrowser()) {
                    return 0;
                }
                return this.viewport ? this.viewport.scrollTop : window.pageYOffset;
            },
            getTotalActionItems: () => this.actions ? this.actions.length : 0
        };
    }
    /**
     * @return {?}
     */
    get fixed() { return this._fixed; }
    /**
     * @param {?} value
     * @return {?}
     */
    set fixed(value) {
        this.setFixed(value);
    }
    /**
     * @return {?}
     */
    get prominent() { return this._prominent; }
    /**
     * @param {?} value
     * @return {?}
     */
    set prominent(value) {
        this.setProminent(value);
    }
    /**
     * @return {?}
     */
    get short() { return this._short; }
    /**
     * @param {?} value
     * @return {?}
     */
    set short(value) {
        this.setShort(value);
    }
    /**
     * @return {?}
     */
    get shortCollapsed() { return this._shortCollapsed; }
    /**
     * @param {?} value
     * @return {?}
     */
    set shortCollapsed(value) {
        this.setShortCollapsed(value);
    }
    /**
     * @return {?}
     */
    get dense() { return this._dense; }
    /**
     * @param {?} value
     * @return {?}
     */
    set dense(value) {
        this.setDense(value);
    }
    /**
     * @return {?}
     */
    get fixedAdjustElement() { return this._fixedAdjustElement; }
    /**
     * @param {?} element
     * @return {?}
     */
    set fixedAdjustElement(element) {
        if (this._fixedAdjustElement !== element) {
            this.setFixedAdjustElement(element);
        }
    }
    /**
     * @return {?}
     */
    get viewport() { return this._viewport; }
    /**
     * @param {?} element
     * @return {?}
     */
    set viewport(element) {
        if (this._viewport !== element) {
            this._viewport = element;
            this._getHostElement().style.position = 'absolute';
        }
    }
    /**
     * @return {?}
     */
    get classProminent() {
        return this.prominent ? 'mdc-top-app-bar--prominent' : '';
    }
    /**
     * @return {?}
     */
    get classDense() {
        return this.dense ? 'mdc-top-app-bar--dense' : '';
    }
    /**
     * @return {?}
     */
    get classShort() {
        return this.short ? 'mdc-top-app-bar--short' : '';
    }
    /**
     * @return {?}
     */
    get classShortCollapsed() {
        return this.shortCollapsed ? 'mdc-top-app-bar--short-collapsed' : '';
    }
    /**
     * @return {?}
     */
    get classFixed() {
        return this.fixed ? 'mdc-top-app-bar--fixed' : '';
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.actions.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {
            if (this.short) {
                this.actions.length > 0 && this.short ? this._mdcAdapter.addClass('mdc-top-app-bar--short-has-action-item')
                    : this._mdcAdapter.removeClass('mdc-top-app-bar--short-has-action-item');
            }
        });
        setTimeout(() => {
            this.initializeFoundation();
        }, 20);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroy.next();
        this._destroy.complete();
        this._foundation.destroy();
    }
    /**
     * @param {?} element
     * @return {?}
     */
    setFixedAdjustElement(element) {
        this._fixedAdjustElement = element;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * Sets the top app bar to fixed or not.
     * @param {?} fixed
     * @return {?}
     */
    setFixed(fixed) {
        this._fixed = toBoolean(fixed);
        this.fixed && this.short ? this.setShort(false) : this.initializeFoundation();
        this._changeDetectorRef.markForCheck();
    }
    /**
     * Sets the top app bar to prominent or not.
     * @param {?} prominent
     * @return {?}
     */
    setProminent(prominent) {
        this._prominent = toBoolean(prominent);
        this.prominent && this.short ? this.setShort(false) : this.initializeFoundation();
    }
    /**
     * Sets the top app bar to dense variant.
     * @param {?} dense
     * @return {?}
     */
    setDense(dense) {
        this._dense = toBoolean(dense);
        this.dense && this.short ? this.setShort(false) : this.initializeFoundation();
    }
    /**
     * Sets the top app bar to short or not.
     * @param {?} short
     * @return {?}
     */
    setShort(short) {
        this._short = toBoolean(short);
        if (this.short) {
            this.setProminent(false);
            this.setDense(false);
            this.setFixed(false);
        }
        else {
            this.setShortCollapsed(false);
        }
        this.initializeFoundation();
        this._changeDetectorRef.markForCheck();
    }
    /**
     * Sets the top app bar to short-collapsed or not.
     * @param {?} shortCollapsed
     * @return {?}
     */
    setShortCollapsed(shortCollapsed) {
        this._shortCollapsed = toBoolean(shortCollapsed);
        if (this.shortCollapsed && !this.short) {
            this.setShort(true);
        }
    }
    /**
     * @return {?}
     */
    initializeFoundation() {
        if (this._foundation) {
            this._foundation.destroy();
        }
        this._getHostElement().style.top = '0px';
        this._resetAppBar();
        if (this.short) {
            this._foundation = new MDCShortTopAppBarFoundation(this._mdcAdapter);
        }
        else if (this.fixed) {
            this._foundation = new MDCFixedTopAppBarFoundation(this._mdcAdapter);
        }
        else {
            this._foundation = new MDCTopAppBarFoundation(this._mdcAdapter);
        }
        this._foundation.init();
    }
    /**
     * @return {?}
     */
    _resetAppBar() {
        this._getHostElement().classList.remove('mdc-top-app-bar--short-has-action-item');
        this._getHostElement().classList.remove('mdc-top-app-bar--short-collapsed');
        this._getHostElement().classList.remove('mdc-top-app-bar--fixed-scrolled');
        if (this.fixed && this._getScrollOffset() > 0) {
            this._getHostElement().classList.add('mdc-top-app-bar--fixed-scrolled');
        }
        if (this.fixedAdjustElement) {
            this.fixedAdjustElement.classList.remove('mdc-top-app-bar--short-fixed-adjust');
            this.fixedAdjustElement.classList.remove('mdc-top-app-bar--fixed-adjust');
            this.fixedAdjustElement.classList.remove('mdc-top-app-bar--dense-fixed-adjust');
            this.fixedAdjustElement.classList.remove('mdc-top-app-bar--prominent-fixed-adjust');
            this.fixedAdjustElement.classList.remove('mdc-top-app-bar--dense-prominent-fixed-adjust');
            if (this.short) {
                this.fixedAdjustElement.classList.add('mdc-top-app-bar--short-fixed-adjust');
            }
            else if (this._dense) {
                this.fixedAdjustElement.classList.add('mdc-top-app-bar--dense-fixed-adjust');
            }
            else if (this._prominent) {
                this.fixedAdjustElement.classList.add('mdc-top-app-bar--prominent-fixed-adjust');
            }
            else if (this.dense && this.prominent) {
                this.fixedAdjustElement.classList.add('mdc-top-app-bar--dense-prominent-fixed-adjust');
            }
            else {
                this.fixedAdjustElement.classList.add('mdc-top-app-bar--fixed-adjust');
            }
        }
    }
    /**
     * @return {?}
     */
    _getViewport() {
        return this.viewport ? this.viewport : window;
    }
    /**
     * @return {?}
     */
    _getScrollOffset() {
        return this.viewport ? this.viewport.scrollTop : window.pageYOffset;
    }
    /**
     * Retrieves the DOM element of the component host.
     * @return {?}
     */
    _getHostElement() {
        return this.elementRef.nativeElement;
    }
}
MdcAppBar.decorators = [
    { type: Component, args: [{
                selector: '[mdc-app-bar], mdc-app-bar',
                template: '<ng-content></ng-content>',
                exportAs: 'mdcAppBar',
                providers: [EventRegistry],
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
MdcAppBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: EventRegistry }
];
MdcAppBar.propDecorators = {
    fixed: [{ type: Input }],
    prominent: [{ type: Input }],
    short: [{ type: Input }],
    shortCollapsed: [{ type: Input }],
    dense: [{ type: Input }],
    fixedAdjustElement: [{ type: Input }],
    viewport: [{ type: Input }],
    navigationSelected: [{ type: Output }],
    isHostClass: [{ type: HostBinding, args: ['class.mdc-top-app-bar',] }],
    classProminent: [{ type: HostBinding, args: ['class.mdc-top-app-bar--prominent',] }],
    classDense: [{ type: HostBinding, args: ['class.mdc-top-app-bar--dense',] }],
    classShort: [{ type: HostBinding, args: ['class.mdc-top-app-bar--short',] }],
    classShortCollapsed: [{ type: HostBinding, args: ['class.mdc-top-app-bar--short-collapsed',] }],
    classFixed: [{ type: HostBinding, args: ['class.mdc-top-app-bar--fixed',] }],
    navigationIcon: [{ type: ContentChild, args: [MdcAppBarNavigationIcon,] }],
    actions: [{ type: ContentChildren, args: [MdcAppBarActionItem, { descendants: true },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ APPBAR_DECLARATIONS = [
    MdcAppBar,
    MdcAppBarActionItem,
    MdcAppBarNavigationIcon,
    MdcAppBarRow,
    MdcAppBarSection,
    MdcAppBarTitle,
];
class MdcAppBarModule {
}
MdcAppBarModule.decorators = [
    { type: NgModule, args: [{
                exports: APPBAR_DECLARATIONS,
                declarations: APPBAR_DECLARATIONS,
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MdcAppBarModule, MdcAppBarRow, MdcAppBarSection, MdcAppBarActionItem, MdcAppBarNavigationIcon, MdcAppBarTitle, MdcAppBarNavSelected, MdcAppBar };
