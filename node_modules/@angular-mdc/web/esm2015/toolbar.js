/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Directive, ElementRef, EventEmitter, HostBinding, Input, Output, Renderer2, ViewEncapsulation, NgModule } from '@angular/core';
import { isBrowser, EventRegistry, toBoolean } from '@angular-mdc/web/common';

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @template A
 */
class MDCFoundation {
  /** @return enum{cssClasses} */
  static get cssClasses() {
    // Classes extending MDCFoundation should implement this method to return an object which exports every
    // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
    return {};
  }

  /** @return enum{strings} */
  static get strings() {
    // Classes extending MDCFoundation should implement this method to return an object which exports all
    // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
    return {};
  }

  /** @return enum{numbers} */
  static get numbers() {
    // Classes extending MDCFoundation should implement this method to return an object which exports all
    // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
    return {};
  }

  /** @return {!Object} */
  static get defaultAdapter() {
    // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
    // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
    // validation.
    return {};
  }

  /**
   * @param {A=} adapter
   */
  constructor(adapter = {}) {
    /** @protected {!A} */
    this.adapter_ = adapter;
  }

  init() {
    // Subclasses should override this method to perform initialization routines (registering events, etc.)
  }

  destroy() {
    // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
  }
}

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * See Material Design spec for more details on when to use ripples.
 * https://material.io/guidelines/motion/choreography.html#choreography-creation
 * @record
 */
class RippleCapableSurface {}

/** @protected {!Element} */
RippleCapableSurface.prototype.root_;

/**
 * Whether or not the ripple bleeds out of the bounds of the element.
 * @type {boolean|undefined}
 */
RippleCapableSurface.prototype.unbounded;

/**
 * Whether or not the ripple is attached to a disabled component.
 * @type {boolean|undefined}
 */
RippleCapableSurface.prototype.disabled;

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const cssClasses$1 = {
  FIXED: 'mdc-toolbar--fixed',
  FIXED_LASTROW: 'mdc-toolbar--fixed-lastrow-only',
  FIXED_AT_LAST_ROW: 'mdc-toolbar--fixed-at-last-row',
  TOOLBAR_ROW_FLEXIBLE: 'mdc-toolbar--flexible',
  FLEXIBLE_DEFAULT_BEHAVIOR: 'mdc-toolbar--flexible-default-behavior',
  FLEXIBLE_MAX: 'mdc-toolbar--flexible-space-maximized',
  FLEXIBLE_MIN: 'mdc-toolbar--flexible-space-minimized',
};

const strings$1 = {
  TITLE_SELECTOR: '.mdc-toolbar__title',
  ICON_SELECTOR: '.mdc-toolbar__icon',
  FIRST_ROW_SELECTOR: '.mdc-toolbar__row:first-child',
  CHANGE_EVENT: 'MDCToolbar:change',
};

const numbers$1 = {
  MAX_TITLE_SIZE: 2.125,
  MIN_TITLE_SIZE: 1.25,
  TOOLBAR_ROW_HEIGHT: 64,
  TOOLBAR_ROW_MOBILE_HEIGHT: 56,
  TOOLBAR_MOBILE_BREAKPOINT: 600,
};

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class MDCToolbarFoundation extends MDCFoundation {
  static get cssClasses() {
    return cssClasses$1;
  }

  static get strings() {
    return strings$1;
  }

  static get numbers() {
    return numbers$1;
  }

  static get defaultAdapter() {
    return {
      hasClass: (/* className: string */) => /* boolean */ false,
      addClass: (/* className: string */) => {},
      removeClass: (/* className: string */) => {},
      registerScrollHandler: (/* handler: EventListener */) => {},
      deregisterScrollHandler: (/* handler: EventListener */) => {},
      registerResizeHandler: (/* handler: EventListener */) => {},
      deregisterResizeHandler: (/* handler: EventListener */) => {},
      getViewportWidth: () => /* number */ 0,
      getViewportScrollY: () => /* number */ 0,
      getOffsetHeight: () => /* number */ 0,
      getFirstRowElementOffsetHeight: () => /* number */ 0,
      notifyChange: (/* evtData: {flexibleExpansionRatio: number} */) => {},
      setStyle: (/* property: string, value: string */) => {},
      setStyleForTitleElement: (/* property: string, value: string */) => {},
      setStyleForFlexibleRowElement: (/* property: string, value: string */) => {},
      setStyleForFixedAdjustElement: (/* property: string, value: string */) => {},
    };
  }

  constructor(adapter) {
    super(Object.assign(MDCToolbarFoundation.defaultAdapter, adapter));
    this.resizeHandler_ = () => this.checkRowHeight_();
    this.scrollHandler_ = () => this.updateToolbarStyles_();
    this.checkRowHeightFrame_ = 0;
    this.scrollFrame_ = 0;
    this.executedLastChange_ = false;

    this.calculations_ = {
      toolbarRowHeight: 0,
      // Calculated Height ratio. We use ratio to calculate corresponding heights in resize event.
      toolbarRatio: 0, // The ratio of toolbar height to row height
      flexibleExpansionRatio: 0, // The ratio of flexible space height to row height
      maxTranslateYRatio: 0, // The ratio of max toolbar move up distance to row height
      scrollThresholdRatio: 0, // The ratio of max scrollTop that we should listen to to row height
      // Derived Heights based on the above key ratios.
      toolbarHeight: 0,
      flexibleExpansionHeight: 0, // Flexible row minus toolbar height (derived)
      maxTranslateYDistance: 0, // When toolbar only fix last row (derived)
      scrollThreshold: 0,
    };
    // Toolbar fixed behavior
    // If toolbar is fixed
    this.fixed_ = false;
    // If fixed is targeted only at the last row
    this.fixedLastrow_ = false;
    // Toolbar flexible behavior
    // If the first row is flexible
    this.hasFlexibleRow_ = false;
    // If use the default behavior
    this.useFlexDefaultBehavior_ = false;
  }

  init() {
    this.fixed_ = this.adapter_.hasClass(MDCToolbarFoundation.cssClasses.FIXED);
    this.fixedLastrow_ = this.adapter_.hasClass(MDCToolbarFoundation.cssClasses.FIXED_LASTROW) & this.fixed_;
    this.hasFlexibleRow_ = this.adapter_.hasClass(MDCToolbarFoundation.cssClasses.TOOLBAR_ROW_FLEXIBLE);
    if (this.hasFlexibleRow_) {
      this.useFlexDefaultBehavior_ = this.adapter_.hasClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_DEFAULT_BEHAVIOR);
    }
    this.initKeyRatio_();
    this.setKeyHeights_();
    this.adapter_.registerResizeHandler(this.resizeHandler_);
    this.adapter_.registerScrollHandler(this.scrollHandler_);
  }

  destroy() {
    this.adapter_.deregisterResizeHandler(this.resizeHandler_);
    this.adapter_.deregisterScrollHandler(this.scrollHandler_);
  }

  updateAdjustElementStyles() {
    if (this.fixed_) {
      this.adapter_.setStyleForFixedAdjustElement('margin-top', `${this.calculations_.toolbarHeight}px`);
    }
  }

  getFlexibleExpansionRatio_(scrollTop) {
    // To prevent division by zero when there is no flexibleExpansionHeight
    const delta = 0.0001;
    return Math.max(0, 1 - scrollTop / (this.calculations_.flexibleExpansionHeight + delta));
  }

  checkRowHeight_() {
    cancelAnimationFrame(this.checkRowHeightFrame_);
    this.checkRowHeightFrame_ = requestAnimationFrame(() => this.setKeyHeights_());
  }

  setKeyHeights_() {
    const newToolbarRowHeight = this.getRowHeight_();
    if (newToolbarRowHeight !== this.calculations_.toolbarRowHeight) {
      this.calculations_.toolbarRowHeight = newToolbarRowHeight;
      this.calculations_.toolbarHeight = this.calculations_.toolbarRatio * this.calculations_.toolbarRowHeight;
      this.calculations_.flexibleExpansionHeight =
        this.calculations_.flexibleExpansionRatio * this.calculations_.toolbarRowHeight;
      this.calculations_.maxTranslateYDistance =
        this.calculations_.maxTranslateYRatio * this.calculations_.toolbarRowHeight;
      this.calculations_.scrollThreshold =
        this.calculations_.scrollThresholdRatio * this.calculations_.toolbarRowHeight;
      this.updateAdjustElementStyles();
      this.updateToolbarStyles_();
    }
  }

  updateToolbarStyles_() {
    cancelAnimationFrame(this.scrollFrame_);
    this.scrollFrame_ = requestAnimationFrame(() => {
      const scrollTop = this.adapter_.getViewportScrollY();
      const hasScrolledOutOfThreshold = this.scrolledOutOfThreshold_(scrollTop);

      if (hasScrolledOutOfThreshold && this.executedLastChange_) {
        return;
      }

      const flexibleExpansionRatio = this.getFlexibleExpansionRatio_(scrollTop);

      this.updateToolbarFlexibleState_(flexibleExpansionRatio);
      if (this.fixedLastrow_) {
        this.updateToolbarFixedState_(scrollTop);
      }
      if (this.hasFlexibleRow_) {
        this.updateFlexibleRowElementStyles_(flexibleExpansionRatio);
      }
      this.executedLastChange_ = hasScrolledOutOfThreshold;
      this.adapter_.notifyChange({flexibleExpansionRatio: flexibleExpansionRatio});
    });
  }

  scrolledOutOfThreshold_(scrollTop) {
    return scrollTop > this.calculations_.scrollThreshold;
  }

  initKeyRatio_() {
    const toolbarRowHeight = this.getRowHeight_();
    const firstRowMaxRatio = this.adapter_.getFirstRowElementOffsetHeight() / toolbarRowHeight;
    this.calculations_.toolbarRatio = this.adapter_.getOffsetHeight() / toolbarRowHeight;
    this.calculations_.flexibleExpansionRatio = firstRowMaxRatio - 1;
    this.calculations_.maxTranslateYRatio =
      this.fixedLastrow_ ? this.calculations_.toolbarRatio - firstRowMaxRatio : 0;
    this.calculations_.scrollThresholdRatio =
      (this.fixedLastrow_ ? this.calculations_.toolbarRatio : firstRowMaxRatio) - 1;
  }

  getRowHeight_() {
    const breakpoint = MDCToolbarFoundation.numbers.TOOLBAR_MOBILE_BREAKPOINT;
    return this.adapter_.getViewportWidth() < breakpoint ?
      MDCToolbarFoundation.numbers.TOOLBAR_ROW_MOBILE_HEIGHT : MDCToolbarFoundation.numbers.TOOLBAR_ROW_HEIGHT;
  }

  updateToolbarFlexibleState_(flexibleExpansionRatio) {
    this.adapter_.removeClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_MAX);
    this.adapter_.removeClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_MIN);
    if (flexibleExpansionRatio === 1) {
      this.adapter_.addClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_MAX);
    } else if (flexibleExpansionRatio === 0) {
      this.adapter_.addClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_MIN);
    }
  }

  updateToolbarFixedState_(scrollTop) {
    const translateDistance = Math.max(0, Math.min(
      scrollTop - this.calculations_.flexibleExpansionHeight,
      this.calculations_.maxTranslateYDistance));
    this.adapter_.setStyle('transform', `translateY(${-translateDistance}px)`);

    if (translateDistance === this.calculations_.maxTranslateYDistance) {
      this.adapter_.addClass(MDCToolbarFoundation.cssClasses.FIXED_AT_LAST_ROW);
    } else {
      this.adapter_.removeClass(MDCToolbarFoundation.cssClasses.FIXED_AT_LAST_ROW);
    }
  }

  updateFlexibleRowElementStyles_(flexibleExpansionRatio) {
    if (this.fixed_) {
      const height = this.calculations_.flexibleExpansionHeight * flexibleExpansionRatio;
      this.adapter_.setStyleForFlexibleRowElement('height',
        `${height + this.calculations_.toolbarRowHeight}px`);
    }
    if (this.useFlexDefaultBehavior_) {
      this.updateElementStylesDefaultBehavior_(flexibleExpansionRatio);
    }
  }

  updateElementStylesDefaultBehavior_(flexibleExpansionRatio) {
    const maxTitleSize = MDCToolbarFoundation.numbers.MAX_TITLE_SIZE;
    const minTitleSize = MDCToolbarFoundation.numbers.MIN_TITLE_SIZE;
    const currentTitleSize = (maxTitleSize - minTitleSize) * flexibleExpansionRatio + minTitleSize;

    this.adapter_.setStyleForTitleElement('font-size', `${currentTitleSize}rem`);
  }
}

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MdcToolbarIcon {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
}
MdcToolbarIcon.decorators = [
    { type: Directive, args: [{
                selector: '[mdc-toolbar-icon]'
            },] },
];
/** @nocollapse */
MdcToolbarIcon.ctorParameters = () => [
    { type: ElementRef }
];
MdcToolbarIcon.propDecorators = {
    isHostClass: [{ type: HostBinding, args: ['class.mdc-toolbar__icon',] }]
};
class MdcToolbarSection {
    constructor() {
        this.alignStart = false;
        this.alignEnd = false;
        this.shrinkToFit = false;
        this.isHostClass = true;
    }
    /**
     * @return {?}
     */
    get classAlignStart() {
        return this.alignStart ? 'mdc-toolbar__section--align-start' : '';
    }
    /**
     * @return {?}
     */
    get classAlignEnd() {
        return this.alignEnd ? 'mdc-toolbar__section--align-end' : '';
    }
    /**
     * @return {?}
     */
    get classShrinkToFit() {
        return this.shrinkToFit ? 'mdc-toolbar__section--shrink-to-fit' : '';
    }
}
MdcToolbarSection.decorators = [
    { type: Directive, args: [{
                selector: 'mdc-toolbar-section',
                exportAs: 'mdcToolbarSection'
            },] },
];
MdcToolbarSection.propDecorators = {
    alignStart: [{ type: Input }],
    alignEnd: [{ type: Input }],
    shrinkToFit: [{ type: Input }],
    isHostClass: [{ type: HostBinding, args: ['class.mdc-toolbar__section',] }],
    classAlignStart: [{ type: HostBinding, args: ['class.mdc-toolbar__section--align-start',] }],
    classAlignEnd: [{ type: HostBinding, args: ['class.mdc-toolbar__section--align-end',] }],
    classShrinkToFit: [{ type: HostBinding, args: ['class.mdc-toolbar__section--shrink-to-fit',] }]
};
class MdcToolbarTitle {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
}
MdcToolbarTitle.decorators = [
    { type: Directive, args: [{
                selector: '[mdc-toolbar-title], mdc-toolbar-title',
                exportAs: 'mdcToolbarTitle'
            },] },
];
/** @nocollapse */
MdcToolbarTitle.ctorParameters = () => [
    { type: ElementRef }
];
MdcToolbarTitle.propDecorators = {
    isHostClass: [{ type: HostBinding, args: ['class.mdc-toolbar__title',] }]
};
class MdcToolbarFixedAdjust {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
}
MdcToolbarFixedAdjust.decorators = [
    { type: Directive, args: [{
                selector: '[mdc-toolbar-fixed-adjust], mdc-toolbar-fixed-adjust',
                exportAs: 'mdcToolbarFixedAdjust'
            },] },
];
/** @nocollapse */
MdcToolbarFixedAdjust.ctorParameters = () => [
    { type: ElementRef }
];
MdcToolbarFixedAdjust.propDecorators = {
    isHostClass: [{ type: HostBinding, args: ['class.mdc-toolbar-fixed-adjust',] }]
};
class MdcToolbarRow {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
}
MdcToolbarRow.decorators = [
    { type: Directive, args: [{
                selector: 'mdc-toolbar-row',
                exportAs: 'mdcToolbarRow'
            },] },
];
/** @nocollapse */
MdcToolbarRow.ctorParameters = () => [
    { type: ElementRef }
];
MdcToolbarRow.propDecorators = {
    isHostClass: [{ type: HostBinding, args: ['class.mdc-toolbar__row',] }]
};
class MdcToolbarMenuIcon {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
}
MdcToolbarMenuIcon.decorators = [
    { type: Directive, args: [{
                selector: '[mdc-toolbar-menu-icon]',
                exportAs: 'mdcToolbarMenuIcon'
            },] },
];
/** @nocollapse */
MdcToolbarMenuIcon.ctorParameters = () => [
    { type: ElementRef }
];
MdcToolbarMenuIcon.propDecorators = {
    isHostClass: [{ type: HostBinding, args: ['class.mdc-toolbar__menu-icon',] }]
};
class MdcToolbar {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} _renderer
     * @param {?} elementRef
     * @param {?} _registry
     */
    constructor(_changeDetectorRef, _renderer, elementRef, _registry) {
        this._changeDetectorRef = _changeDetectorRef;
        this._renderer = _renderer;
        this.elementRef = elementRef;
        this._registry = _registry;
        this.flexibleDefaultBehavior = true;
        this.fixed = false;
        this.waterfall = false;
        this.fixedLastrow = false;
        this.adjustBodyMargin = true;
        this.change = new EventEmitter();
        this.isHostClass = true;
        this._mdcAdapter = {
            hasClass: (className) => {
                return this.elementRef.nativeElement.classList.contains(className);
            },
            addClass: (className) => {
                this._renderer.addClass(this.elementRef.nativeElement, className);
            },
            removeClass: (className) => {
                this._renderer.removeClass(this.elementRef.nativeElement, className);
            },
            registerScrollHandler: (handler) => {
                if (isBrowser()) {
                    this._registry.listen('scroll', handler, window);
                }
            },
            deregisterScrollHandler: (handler) => {
                if (isBrowser()) {
                    this._registry.unlisten('scroll', handler);
                }
            },
            registerResizeHandler: (handler) => {
                if (isBrowser()) {
                    this._registry.listen('resize', handler, window);
                }
            },
            deregisterResizeHandler: (handler) => {
                if (isBrowser()) {
                    this._registry.unlisten('resize', handler);
                }
            },
            getViewportWidth: () => isBrowser() ? window.innerWidth : 0,
            getViewportScrollY: () => isBrowser() ? window.pageYOffset : 0,
            getOffsetHeight: () => this.elementRef.nativeElement.offsetHeight,
            getFirstRowElementOffsetHeight: () => {
                return this.firstRow ? this.firstRow.elementRef.nativeElement.offsetHeight : 0;
            },
            notifyChange: (evtData) => {
                this.change.emit(evtData.flexibleExpansionRatio);
            },
            setStyle: (property, value) => {
                this._renderer.setStyle(this.elementRef.nativeElement, property, value);
            },
            setStyleForTitleElement: (property, value) => {
                if (this.title) {
                    this._renderer.setStyle(this.title.elementRef.nativeElement, property, value);
                }
            },
            setStyleForFlexibleRowElement: (property, value) => {
                if (this.firstRow) {
                    this._renderer.setStyle(this.firstRow.elementRef.nativeElement, property, value);
                }
            },
            setStyleForFixedAdjustElement: (property, value) => {
                if (!isBrowser()) {
                    return;
                }
                if (this.adjustBodyMargin && this.fixed) {
                    this._renderer.setStyle(this._fixedAdjustElement ?
                        this._fixedAdjustElement : document.body, property, value);
                }
            }
        };
        this._foundation = new MDCToolbarFoundation(this._mdcAdapter);
    }
    /**
     * @return {?}
     */
    get flexible() { return this._flexible; }
    /**
     * @param {?} value
     * @return {?}
     */
    set flexible(value) {
        this._flexible = toBoolean(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get fixedAdjustElement() { return this._fixedAdjustElement; }
    /**
     * @param {?} element
     * @return {?}
     */
    set fixedAdjustElement(element) {
        if (this._fixedAdjustElement !== element) {
            this._fixedAdjustElement = element;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get classFixedToolbar() {
        return this.fixed ? 'mdc-toolbar--fixed' : '';
    }
    /**
     * @return {?}
     */
    get classWaterfallToolbar() {
        return this.waterfall ? 'mdc-toolbar--waterfall' : '';
    }
    /**
     * @return {?}
     */
    get classFlexibleToolbar() {
        return this.flexible ? 'mdc-toolbar--flexible' : '';
    }
    /**
     * @return {?}
     */
    get classFixedLastrow() {
        return this.fixedLastrow ? 'mdc-toolbar--fixed-lastrow-only' : '';
    }
    /**
     * @return {?}
     */
    get classFlexibleDefaultBehavior() {
        return this.flexible && this.flexibleDefaultBehavior ? 'mdc-toolbar--flexible-default-behavior' : '';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const /** @type {?} */ fixedAdjustElement = changes['fixedAdjustElement'];
        if (fixedAdjustElement) {
            if (fixedAdjustElement.currentValue) {
                this._renderer.addClass(fixedAdjustElement.currentValue, 'mdc-toolbar-fixed-adjust');
            }
            if (fixedAdjustElement.previousValue) {
                this._renderer.removeClass(fixedAdjustElement.previousValue, 'mdc-toolbar-fixed-adjust');
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._foundation.init();
        this.updateAdjustElementStyles();
        this._changeDetectorRef.detectChanges();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (isBrowser()) {
            this._renderer.removeStyle(this.fixedAdjustElement ?
                this.fixedAdjustElement : document.body, 'mdc-toolbar-fixed-adjust');
        }
        this._foundation.destroy();
    }
    /**
     * @return {?}
     */
    updateAdjustElementStyles() {
        this._foundation.updateAdjustElementStyles();
    }
}
MdcToolbar.decorators = [
    { type: Component, args: [{selector: 'mdc-toolbar',
                template: '<ng-content></ng-content>',
                exportAs: 'mdcToolbar',
                providers: [EventRegistry],
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
MdcToolbar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: ElementRef },
    { type: EventRegistry }
];
MdcToolbar.propDecorators = {
    flexibleDefaultBehavior: [{ type: Input }],
    fixed: [{ type: Input }],
    waterfall: [{ type: Input }],
    fixedLastrow: [{ type: Input }],
    adjustBodyMargin: [{ type: Input }],
    flexible: [{ type: Input }],
    fixedAdjustElement: [{ type: Input }],
    change: [{ type: Output }],
    firstRow: [{ type: ContentChild, args: [MdcToolbarRow,] }],
    title: [{ type: ContentChild, args: [MdcToolbarTitle,] }],
    isHostClass: [{ type: HostBinding, args: ['class.mdc-toolbar',] }],
    classFixedToolbar: [{ type: HostBinding, args: ['class.mdc-toolbar--fixed',] }],
    classWaterfallToolbar: [{ type: HostBinding, args: ['class.mdc-toolbar--waterfall',] }],
    classFlexibleToolbar: [{ type: HostBinding, args: ['class.mdc-toolbar--flexible',] }],
    classFixedLastrow: [{ type: HostBinding, args: ['class.mdc-toolbar--fixed-lastrow-only',] }],
    classFlexibleDefaultBehavior: [{ type: HostBinding, args: ['class.mdc-toolbar--flexible-default-behavior',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ TOOLBAR_COMPONENTS = [
    MdcToolbar,
    MdcToolbarFixedAdjust,
    MdcToolbarIcon,
    MdcToolbarMenuIcon,
    MdcToolbarRow,
    MdcToolbarSection,
    MdcToolbarTitle,
];
class MdcToolbarModule {
}
MdcToolbarModule.decorators = [
    { type: NgModule, args: [{
                exports: [TOOLBAR_COMPONENTS],
                declarations: [TOOLBAR_COMPONENTS],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MdcToolbarModule, MdcToolbarIcon, MdcToolbarSection, MdcToolbarTitle, MdcToolbarFixedAdjust, MdcToolbarRow, MdcToolbarMenuIcon, MdcToolbar };
