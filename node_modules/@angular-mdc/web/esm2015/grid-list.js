/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, HostBinding, Input, Renderer2, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';
import { startWith, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { isBrowser, toBoolean, EventRegistry } from '@angular-mdc/web/common';
import { MdcIcon } from '@angular-mdc/web/icon';

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @template A
 */
class MDCFoundation {
  /** @return enum{cssClasses} */
  static get cssClasses() {
    // Classes extending MDCFoundation should implement this method to return an object which exports every
    // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
    return {};
  }

  /** @return enum{strings} */
  static get strings() {
    // Classes extending MDCFoundation should implement this method to return an object which exports all
    // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
    return {};
  }

  /** @return enum{numbers} */
  static get numbers() {
    // Classes extending MDCFoundation should implement this method to return an object which exports all
    // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
    return {};
  }

  /** @return {!Object} */
  static get defaultAdapter() {
    // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
    // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
    // validation.
    return {};
  }

  /**
   * @param {A=} adapter
   */
  constructor(adapter = {}) {
    /** @protected {!A} */
    this.adapter_ = adapter;
  }

  init() {
    // Subclasses should override this method to perform initialization routines (registering events, etc.)
  }

  destroy() {
    // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
  }
}

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const strings = {
  TILES_SELECTOR: '.mdc-grid-list__tiles',
  TILE_SELECTOR: '.mdc-grid-tile',
};

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class MDCGridListFoundation extends MDCFoundation {
  static get strings() {
    return strings;
  }

  static get defaultAdapter() {
    return {
      getOffsetWidth: () => /* number */ 0,
      getNumberOfTiles: () => /* number */ 0,
      getOffsetWidthForTileAtIndex: (/* index: number */) => /* number */ 0,
      setStyleForTilesElement: (/* property: string, value: string */) => {},
      registerResizeHandler: (/* handler: EventListener */) => {},
      deregisterResizeHandler: (/* handler: EventListener */) => {},
    };
  }
  constructor(adapter) {
    super(Object.assign(MDCGridListFoundation.defaultAdapter, adapter));
    this.resizeHandler_ = () => this.alignCenter();
    this.resizeFrame_ = 0;
  }
  init() {
    this.alignCenter();
    this.adapter_.registerResizeHandler(this.resizeHandler_);
  }
  destroy() {
    this.adapter_.deregisterResizeHandler(this.resizeHandler_);
  }
  alignCenter() {
    if (this.resizeFrame_ !== 0) {
      cancelAnimationFrame(this.resizeFrame_);
    }
    this.resizeFrame_ = requestAnimationFrame(() => {
      this.alignCenter_();
      this.resizeFrame_ = 0;
    });
  }
  alignCenter_() {
    if (this.adapter_.getNumberOfTiles() == 0) {
      return;
    }
    const gridWidth = this.adapter_.getOffsetWidth();
    const itemWidth = this.adapter_.getOffsetWidthForTileAtIndex(0);
    const tilesWidth = itemWidth * Math.floor(gridWidth / itemWidth);
    this.adapter_.setStyleForTilesElement('width', `${tilesWidth}px`);
  }
}

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ MDC_VALID_ASPECTS = [
    '1x1',
    '16x9',
    '2x3',
    '3x2',
    '4x3',
    '3x4'
];
class MdcGridTileTitle {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
}
MdcGridTileTitle.decorators = [
    { type: Directive, args: [{
                selector: 'mdc-grid-tile-title, [mdcGridTileTitle]',
                exportAs: 'mdcGridTileTitle'
            },] },
];
/** @nocollapse */
MdcGridTileTitle.ctorParameters = () => [
    { type: ElementRef }
];
MdcGridTileTitle.propDecorators = {
    isHostClass: [{ type: HostBinding, args: ['class.mdc-grid-tile__title',] }]
};
class MdcGridTileSupportText {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
}
MdcGridTileSupportText.decorators = [
    { type: Directive, args: [{
                selector: 'mdc-grid-tile-support-text, [mdcGridTileSupportText]',
                exportAs: 'mdcGridTileSupportText'
            },] },
];
/** @nocollapse */
MdcGridTileSupportText.ctorParameters = () => [
    { type: ElementRef }
];
MdcGridTileSupportText.propDecorators = {
    isHostClass: [{ type: HostBinding, args: ['class.mdc-grid-tile__support-text',] }]
};
class MdcGridTilePrimary {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
}
MdcGridTilePrimary.decorators = [
    { type: Directive, args: [{
                selector: 'mdc-grid-tile-primary, [mdcGridTilePrimary]',
                exportAs: 'mdcGridTilePrimary'
            },] },
];
/** @nocollapse */
MdcGridTilePrimary.ctorParameters = () => [
    { type: ElementRef }
];
MdcGridTilePrimary.propDecorators = {
    isHostClass: [{ type: HostBinding, args: ['class.mdc-grid-tile__primary',] }]
};
class MdcGridTilePrimaryContent {
    constructor() {
        this.isHostClass = true;
    }
}
MdcGridTilePrimaryContent.decorators = [
    { type: Directive, args: [{
                selector: '[mdcGridTilePrimaryContent], mdc-grid-tile-primary-content',
                exportAs: 'mdcGridTilePrimaryContent'
            },] },
];
MdcGridTilePrimaryContent.propDecorators = {
    isHostClass: [{ type: HostBinding, args: ['class.mdc-grid-tile__primary-content',] }]
};
class MdcGridTileSecondary {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
}
MdcGridTileSecondary.decorators = [
    { type: Directive, args: [{
                selector: 'mdc-grid-tile-secondary, [mdcGridTileSecondary]',
                exportAs: 'mdcGridTileSecondary'
            },] },
];
/** @nocollapse */
MdcGridTileSecondary.ctorParameters = () => [
    { type: ElementRef }
];
MdcGridTileSecondary.propDecorators = {
    isHostClass: [{ type: HostBinding, args: ['class.mdc-grid-tile__secondary',] }]
};
class MdcGridTile {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
}
MdcGridTile.decorators = [
    { type: Directive, args: [{
                selector: 'mdc-grid-tile, [mdcGridTile]',
                exportAs: 'mdcGridTile'
            },] },
];
/** @nocollapse */
MdcGridTile.ctorParameters = () => [
    { type: ElementRef }
];
MdcGridTile.propDecorators = {
    isHostClass: [{ type: HostBinding, args: ['class.mdc-grid-tile',] }]
};
class MdcGridListTiles {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
}
MdcGridListTiles.decorators = [
    { type: Directive, args: [{
                selector: 'mdc-grid-list-tiles, [mdcGridListTiles]',
                exportAs: 'mdcGridListTiles'
            },] },
];
/** @nocollapse */
MdcGridListTiles.ctorParameters = () => [
    { type: ElementRef }
];
MdcGridListTiles.propDecorators = {
    isHostClass: [{ type: HostBinding, args: ['class.mdc-grid-list__tiles',] }]
};
class MdcGridList {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} _renderer
     * @param {?} elementRef
     * @param {?} _registry
     */
    constructor(_changeDetectorRef, _renderer, elementRef, _registry) {
        this._changeDetectorRef = _changeDetectorRef;
        this._renderer = _renderer;
        this.elementRef = elementRef;
        this._registry = _registry;
        /**
         * Emits whenever the component is destroyed.
         */
        this._destroy = new Subject();
        this._header = false;
        this._aspect = '1x1';
        this.iconAlign = 'start';
        this.isHostClass = true;
        this._mdcAdapter = {
            getOffsetWidth: () => this._getHostElement().offsetWidth,
            getNumberOfTiles: () => this.tiles.length,
            getOffsetWidthForTileAtIndex: (index) => {
                const /** @type {?} */ tile = this.getTile(index);
                return tile ? tile.elementRef.nativeElement.offsetWidth : 0;
            },
            setStyleForTilesElement: (property, value) => this._renderer.setStyle(this.gridListTiles.elementRef.nativeElement, property, value),
            registerResizeHandler: (handler) => {
                if (isBrowser()) {
                    this._registry.listen('resize', handler, window);
                }
            },
            deregisterResizeHandler: (handler) => {
                if (isBrowser()) {
                    this._registry.unlisten('resize', handler);
                }
            }
        };
    }
    /**
     * @return {?}
     */
    get narrow() { return this._narrow; }
    /**
     * @param {?} value
     * @return {?}
     */
    set narrow(value) {
        this.setNarrow(value);
    }
    /**
     * @return {?}
     */
    get header() { return this._header; }
    /**
     * @param {?} value
     * @return {?}
     */
    set header(value) {
        this.setHeader(value);
    }
    /**
     * @return {?}
     */
    get aspect() { return this._aspect; }
    /**
     * @param {?} value
     * @return {?}
     */
    set aspect(value) {
        if (this._foundation && value !== this._aspect) {
            this.setAspect(value);
        }
    }
    /**
     * @return {?}
     */
    get classGutter() {
        return this.narrow ? 'mdc-grid-list--tile-gutter-1' : '';
    }
    /**
     * @return {?}
     */
    get classheader() {
        return this.header ? 'mdc-grid-list--header-caption' : '';
    }
    /**
     * @return {?}
     */
    get classIconAlignStart() {
        return this.icons.length > 0 && this.iconAlign === 'start' ? 'mdc-grid-list--with-icon-align-start' : '';
    }
    /**
     * @return {?}
     */
    get classIconAlignEnd() {
        return this.icons.length > 0 && this.iconAlign === 'end' ? 'mdc-grid-list--with-icon-align-end' : '';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._foundation = new MDCGridListFoundation(this._mdcAdapter);
        this._foundation.init();
        this.setAspect(this.aspect);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.captions.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {
            Promise.resolve().then(() => {
                const /** @type {?} */ cssClass = 'mdc-grid-list--twoline-caption';
                this.captions.length > 0 ? this._renderer.addClass(this._getHostElement(), cssClass)
                    : this._renderer.removeClass(this._getHostElement(), cssClass);
            });
        });
        this.icons.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {
            Promise.resolve().then(() => {
                this.icons.forEach(icon => {
                    this._renderer.addClass(icon.elementRef.nativeElement, 'mdc-grid-tile__icon');
                });
            });
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroy.next();
        this._destroy.complete();
        this._foundation.destroy();
    }
    /**
     * @param {?} narrow
     * @return {?}
     */
    setNarrow(narrow) {
        this._narrow = toBoolean(narrow);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @param {?} header
     * @return {?}
     */
    setHeader(header) {
        this._header = toBoolean(header);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @param {?} aspect
     * @return {?}
     */
    setAspect(aspect) {
        if (this._isAspectValid(aspect)) {
            const /** @type {?} */ cssClass = 'mdc-grid-list--tile-aspect-';
            this._renderer.removeClass(this._getHostElement(), `${cssClass}${this.aspect}`);
            this._renderer.addClass(this._getHostElement(), `${cssClass}${aspect}`);
            this._aspect = aspect;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getTile(index) {
        return this.tiles.toArray()[index];
    }
    /**
     * @return {?}
     */
    alignCenter() {
        this._foundation.alignCenter();
    }
    /**
     * Retrieves the DOM element of the component host.
     * @return {?}
     */
    _getHostElement() {
        return this.elementRef.nativeElement;
    }
    /**
     * Make sure the aspect is supported.
     * @param {?} aspect
     * @return {?}
     */
    _isAspectValid(aspect) {
        return MDC_VALID_ASPECTS.indexOf(aspect) > -1 ? true : false;
    }
}
MdcGridList.decorators = [
    { type: Component, args: [{selector: '[mdc-grid-list], mdc-grid-list',
                exportAs: 'mdcGridList',
                template: `
  <mdc-grid-list-tiles>
    <ng-content></ng-content>
  </mdc-grid-list-tiles>
  `,
                providers: [EventRegistry],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
MdcGridList.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: ElementRef },
    { type: EventRegistry }
];
MdcGridList.propDecorators = {
    narrow: [{ type: Input }],
    header: [{ type: Input }],
    aspect: [{ type: Input }],
    iconAlign: [{ type: Input }],
    isHostClass: [{ type: HostBinding, args: ['class.mdc-grid-list',] }],
    tiles: [{ type: ContentChildren, args: [MdcGridTile,] }],
    captions: [{ type: ContentChildren, args: [MdcGridTileSupportText, { descendants: true },] }],
    icons: [{ type: ContentChildren, args: [MdcIcon, { descendants: true },] }],
    primaries: [{ type: ContentChildren, args: [MdcGridTilePrimary, { descendants: true },] }],
    gridListTiles: [{ type: ViewChild, args: [MdcGridListTiles,] }],
    classGutter: [{ type: HostBinding, args: ['class.mdc-grid-list--tile-gutter-1',] }],
    classheader: [{ type: HostBinding, args: ['class.mdc-grid-list--header-caption',] }],
    classIconAlignStart: [{ type: HostBinding, args: ['class.mdc-grid-list--with-icon-align-start',] }],
    classIconAlignEnd: [{ type: HostBinding, args: ['class.mdc-grid-list--with-icon-align-end',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ GRID_LIST_DECLARATIONS = [
    MdcGridList,
    MdcGridListTiles,
    MdcGridTile,
    MdcGridTilePrimary,
    MdcGridTilePrimaryContent,
    MdcGridTileSecondary,
    MdcGridTileSupportText,
    MdcGridTileTitle,
];
class MdcGridListModule {
}
MdcGridListModule.decorators = [
    { type: NgModule, args: [{
                exports: GRID_LIST_DECLARATIONS,
                declarations: GRID_LIST_DECLARATIONS,
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MdcGridListModule, MdcGridTileTitle, MdcGridTileSupportText, MdcGridTilePrimary, MdcGridTilePrimaryContent, MdcGridTileSecondary, MdcGridTile, MdcGridListTiles, MdcGridList };
