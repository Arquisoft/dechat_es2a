/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, Renderer2, ViewEncapsulation, NgModule } from '@angular/core';
import { toBoolean } from '@angular-mdc/web/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MdcIcon {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} _renderer
     * @param {?} elementRef
     * @param {?} ariaHidden
     */
    constructor(_changeDetectorRef, _renderer, elementRef, ariaHidden) {
        this._changeDetectorRef = _changeDetectorRef;
        this._renderer = _renderer;
        this.elementRef = elementRef;
        this.ariaHidden = ariaHidden;
        this._defaultFontSetClass = 'material-icons';
        if (!ariaHidden) {
            _renderer.setAttribute(elementRef.nativeElement, 'aria-hidden', 'true');
        }
    }
    /**
     * Font set that the icon is a part of.
     * @return {?}
     */
    get fontSet() { return this._fontSet; }
    /**
     * @param {?} value
     * @return {?}
     */
    set fontSet(value) {
        this._fontSet = this._cleanupFontValue(value);
        this._updateFontIconClasses();
    }
    /**
     * Name of an icon within a font set.
     * @return {?}
     */
    get fontIcon() { return this._fontIcon; }
    /**
     * @param {?} value
     * @return {?}
     */
    set fontIcon(value) {
        this._fontIcon = value;
        this._updateFontIconClasses();
    }
    /**
     * @return {?}
     */
    get fontSize() { return this._fontSize; }
    /**
     * @param {?} value
     * @return {?}
     */
    set fontSize(value) {
        this.setFontSize(value);
    }
    /**
     * @return {?}
     */
    get leading() { return this._leading; }
    /**
     * @param {?} value
     * @return {?}
     */
    set leading(value) {
        this._leading = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get trailing() { return this._trailing; }
    /**
     * @param {?} value
     * @return {?}
     */
    set trailing(value) {
        this._trailing = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get clickable() { return this._clickable; }
    /**
     * @param {?} value
     * @return {?}
     */
    set clickable(value) {
        this.setClickable(value);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._updateFontIconClasses();
    }
    /**
     * @return {?}
     */
    _updateFontIconClasses() {
        const /** @type {?} */ el = this._getHostElement();
        const /** @type {?} */ fontSetClass = this.fontSet ? this.fontSet : this._getDefaultFontSetClass();
        if (fontSetClass !== this._previousFontSetClass) {
            if (this._previousFontSetClass) {
                this._renderer.removeClass(el, this._previousFontSetClass);
            }
            if (fontSetClass) {
                this._renderer.addClass(el, fontSetClass);
            }
            this._previousFontSetClass = fontSetClass;
        }
        if (this.fontIcon !== this._previousFontIconClass) {
            if (this._previousFontIconClass) {
                this._renderer.removeClass(el, this._previousFontIconClass);
            }
            if (this.fontIcon) {
                for (const /** @type {?} */ iconClass of this.fontIcon.split(' ')) {
                    this._renderer.addClass(el, iconClass);
                }
            }
            this._previousFontIconClass = this.fontIcon;
        }
        if (this.fontSize !== this._previousFontSize) {
            if (this._previousFontSize) {
                this._renderer.removeStyle(el, `font-size: ${this.fontSize}px`);
            }
            if (this.fontSize) {
                this._renderer.setStyle(el, 'font-size', `${this.fontSize}px`);
            }
            this._previousFontSize = this.fontSize;
        }
    }
    /**
     * @return {?}
     */
    _getDefaultFontSetClass() {
        return this._defaultFontSetClass;
    }
    /**
     * Cleans up a value to be used as a fontIcon or fontSet.
     * Since the value ends up being assigned as a CSS class, we
     * have to trim the value and omit space-separated values.
     * @param {?} value
     * @return {?}
     */
    _cleanupFontValue(value) {
        return typeof value === 'string' ? value.trim().split(' ')[0] : value;
    }
    /**
     * Retrieves the DOM element of the component host.
     * @return {?}
     */
    _getHostElement() {
        return this.elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    isLeading() {
        return this.leading;
    }
    /**
     * @return {?}
     */
    isTrailing() {
        return this.trailing;
    }
    /**
     * @param {?} content
     * @return {?}
     */
    setIcon(content) {
        this.fontIcon ? this.fontIcon = content : this._getHostElement().textContent = content;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    getIcon() {
        return this.fontIcon ? this.fontIcon : this._getHostElement().textContent;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setFontSize(value) {
        this._fontSize = value;
        this._updateFontIconClasses();
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @param {?} clickable
     * @return {?}
     */
    setClickable(clickable) {
        this._clickable = toBoolean(clickable);
        if (this.clickable) {
            this._renderer.setAttribute(this._getHostElement(), 'tabindex', '0');
            this._renderer.addClass(this._getHostElement(), 'ng-mdc-icon--clickable');
            this._renderer.setAttribute(this._getHostElement(), 'role', 'button');
        }
        else {
            this._renderer.setAttribute(this._getHostElement(), 'tabindex', '-1');
            this._renderer.removeClass(this._getHostElement(), 'ng-mdc-icon--clickable');
            this._renderer.removeAttribute(this._getHostElement(), 'role');
        }
    }
}
MdcIcon.decorators = [
    { type: Component, args: [{selector: 'mdc-icon',
                template: '<ng-content></ng-content>',
                exportAs: 'mdcIcon',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
MdcIcon.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: ElementRef },
    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] }
];
MdcIcon.propDecorators = {
    fontSet: [{ type: Input }],
    fontIcon: [{ type: Input }],
    fontSize: [{ type: Input }],
    leading: [{ type: Input }],
    trailing: [{ type: Input }],
    clickable: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MdcIconModule {
}
MdcIconModule.decorators = [
    { type: NgModule, args: [{
                exports: [MdcIcon],
                declarations: [MdcIcon],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MdcIconModule, MdcIcon };
