import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, Provider, Renderer2 } from '@angular/core';
import { EventRegistry } from '@angular-mdc/web/common';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { MdcIcon } from '@angular-mdc/web/icon';
export declare const MD_ICON_TOGGLE_CONTROL_VALUE_ACCESSOR: Provider;
export declare class MdcIconToggle implements AfterViewInit, OnDestroy {
    private _changeDetectorRef;
    private _renderer;
    elementRef: ElementRef;
    ripple: MdcRipple;
    private _registry;
    iconOn: string;
    iconOff: string;
    labelOn: string;
    labelOff: string;
    cssClassOn: string;
    cssClassOff: string;
    onChange: (value: any) => void;
    onTouched: () => void;
    iconClass: string;
    private _iconClass;
    on: boolean;
    private _on;
    readonly value: any;
    disabled: boolean;
    private _disabled;
    primary: boolean;
    private _primary;
    secondary: boolean;
    private _secondary;
    readonly change: EventEmitter<boolean>;
    isHostClass: boolean;
    role: string;
    ariaPressed: string;
    tabindex: string;
    readonly classPrimary: string;
    readonly classSecondary: string;
    readonly dataToggleOn: string;
    readonly dataToggleOff: string;
    onclick(evt: Event): void;
    onkeydown(evt: KeyboardEvent): void;
    icon: MdcIcon;
    private _mdcAdapter;
    private _foundation;
    constructor(_changeDetectorRef: ChangeDetectorRef, _renderer: Renderer2, elementRef: ElementRef, ripple: MdcRipple, _registry: EventRegistry);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    writeValue(value: boolean): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    toggle(isOn?: boolean): void;
    refreshToggleData(): void;
    setIconClass(iconClass: string): void;
    isOn(): boolean;
    setOn(on: boolean): void;
    setPrimary(primary: boolean): void;
    setSecondary(secondary: boolean): void;
    /** Sets the button disabled state */
    setDisabled(disabled: boolean): void;
    private _onClick(event);
    private _onKeydown(event);
    private _getIconElement();
    private _getHostElement();
}
