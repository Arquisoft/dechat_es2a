import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList, Renderer2 } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { EventRegistry } from '@angular-mdc/web/common';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { MdcFloatingLabel } from '@angular-mdc/web/floating-label';
import { MdcLineRipple } from '@angular-mdc/web/line-ripple';
export declare const MDC_SELECT_CONTROL_VALUE_ACCESSOR: any;
export declare class MdcSelectChange {
    index: number;
    value: any;
    constructor(index: number, value: any);
}
export declare class MdcSelect implements AfterContentInit, ControlValueAccessor, OnDestroy {
    private _changeDetectorRef;
    private _renderer;
    elementRef: ElementRef;
    private _ripple;
    private _registry;
    /** Emits whenever the component is destroyed. */
    private _destroy;
    private _uniqueId;
    id: string;
    name: string | null;
    /** Placeholder to be shown if no value has been selected. */
    placeholder: string;
    private _placeholder;
    disabled: boolean;
    private _disabled;
    floatingLabel: boolean;
    private _floatingLabel;
    box: boolean;
    private _box;
    autosize: boolean;
    private _autosize;
    readonly change: EventEmitter<MdcSelectChange>;
    /** Event emitted when the selected value has been changed by the user. */
    readonly selectionChange: EventEmitter<MdcSelectChange>;
    isHostClass: boolean;
    tabIndex: number;
    readonly classBorder: string;
    _selectLabel: MdcFloatingLabel;
    _lineRipple: MdcLineRipple;
    inputEl: ElementRef;
    options: QueryList<HTMLOptionElement>;
    /** View -> model callback called when value changes */
    _onChange: (value: any) => void;
    /** View -> model callback called when select has been touched */
    _onTouched: () => void;
    private _mdcAdapter;
    private _foundation;
    constructor(_changeDetectorRef: ChangeDetectorRef, _renderer: Renderer2, elementRef: ElementRef, _ripple: MdcRipple, _registry: EventRegistry);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    onChange(event: Event): void;
    onBlur(): void;
    onFocus(): void;
    private _initializeSelection(value);
    setValue(newValue: any, isUserInput?: boolean): void;
    getValue(): any;
    setPlaceholder(text: string): void;
    getSelectedIndex(): number;
    isDisabled(): boolean;
    setDisabled(disabled: boolean): void;
    setDisabledState(disabled: boolean): void;
    /** Styles the select as a box. */
    setBox(box: boolean): void;
    setFloatingLabel(floatingLabel: boolean): void;
    focus(): void;
    hasFloatingLabel(): boolean;
    private _setWidth();
    /** Retrieves the select input element. */
    private _getInputElement();
    /** Retrieves the DOM element of the component host. */
    private _getHostElement();
}
