import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, Provider } from '@angular/core';
import { EventRegistry } from '@angular-mdc/web/common';
import { MdcRipple } from '@angular-mdc/web/ripple';
export declare const MDC_ICON_BUTTON_CONTROL_VALUE_ACCESSOR: Provider;
/** Change event object emitted by MdcIconButton. */
export declare class MdcIconButtonChange {
    /** The MdcIconButton that emits the event. */
    source: MdcIconButton;
    /** The value assigned to the MdcIconButton. */
    value: any;
    constructor(
        /** The MdcIconButton that emits the event. */
        source: MdcIconButton, 
        /** The value assigned to the MdcIconButton. */
        value: any);
}
export declare class MdcIconButton implements AfterViewInit, OnDestroy {
    private _changeDetectorRef;
    elementRef: ElementRef;
    ripple: MdcRipple;
    private _registry;
    private _uniqueId;
    id: string;
    readonly inputId: string;
    name: string | null;
    labelOn: string;
    labelOff: string;
    iconOn: string;
    private _iconOn;
    iconOff: string;
    private _iconOff;
    on: boolean;
    private _on;
    disabled: boolean;
    private _disabled;
    primary: boolean;
    private _primary;
    secondary: boolean;
    private _secondary;
    readonly change: EventEmitter<MdcIconButtonChange>;
    isHostClass: boolean;
    isMaterialIcons: boolean;
    ariaPressed: string;
    readonly tabindex: number;
    readonly classPrimary: string;
    readonly classSecondary: string;
    _onChange: (value: any) => void;
    _onTouched: () => void;
    private _mdcAdapter;
    private _foundation;
    constructor(_changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef, ripple: MdcRipple, _registry: EventRegistry);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    writeValue(value: boolean): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    toggle(isOn: boolean): void;
    refreshToggleData(): void;
    isOn(): boolean;
    setIconOn(iconOn: string): void;
    setIconOff(iconOff: string): void;
    setOn(on: boolean): void;
    setPrimary(primary: boolean): void;
    setSecondary(secondary: boolean): void;
    /** Sets the button disabled state */
    setDisabled(disabled: boolean): void;
    private _getHostElement();
    private _getIconInnerSelector();
}
