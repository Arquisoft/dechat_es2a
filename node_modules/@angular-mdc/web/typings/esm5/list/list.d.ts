import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, QueryList, Renderer2 } from '@angular/core';
import { Observable } from 'rxjs';
import { MdcListItem, MdcListSelectionChange } from './list-item';
/** Change event that is being fired whenever the selected state of an option changes. */
export declare class MdcListItemChange {
    /** Reference to the selection list that emitted the event. */
    source: MdcList;
    /** Reference to the option that has been changed. */
    option: MdcListItem;
    constructor(
        /** Reference to the selection list that emitted the event. */
        source: MdcList, 
        /** Reference to the option that has been changed. */
        option: MdcListItem);
}
export declare class MdcListGroup {
    elementRef: ElementRef;
    isHostClass: boolean;
    constructor(elementRef: ElementRef);
}
export declare class MdcListGroupSubheader {
    elementRef: ElementRef;
    isHostClass: boolean;
    constructor(elementRef: ElementRef);
}
export declare class MdcListDivider {
    private _renderer;
    inset: boolean;
    private _inset;
    padded: boolean;
    private _padded;
    nativeEl: ElementRef;
    constructor(_renderer: Renderer2);
}
export declare class MdcList implements AfterContentInit, OnDestroy {
    private _changeDetectorRef;
    private _ngZone;
    elementRef: ElementRef;
    /** Emits whenever the component is destroyed. */
    private _destroy;
    dense: boolean;
    lines: number;
    border: boolean;
    avatar: boolean;
    private _avatar;
    interactive: boolean;
    private _interactive;
    multiple: boolean;
    private _multiple;
    isHostClass: boolean;
    role: string;
    readonly classDense: string;
    readonly classLines: string;
    readonly classAvatar: string;
    readonly classBorder: string;
    readonly classInteractive: string;
    options: QueryList<MdcListItem>;
    /** Emits a change event whenever the selected state of an option changes. */
    readonly selectionChange: EventEmitter<MdcListItemChange>;
    constructor(_changeDetectorRef: ChangeDetectorRef, _ngZone: NgZone, elementRef: ElementRef);
    /** Combined stream of all of the child options' change events. */
    readonly optionSelectionChanges: Observable<MdcListSelectionChange>;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /** Drops current option subscriptions and IDs and resets from scratch. */
    private _resetOptions();
    setInteractive(value: boolean): void;
    setMultiple(multiple: boolean): void;
    clearSelected(skip?: MdcListItem): void;
}
