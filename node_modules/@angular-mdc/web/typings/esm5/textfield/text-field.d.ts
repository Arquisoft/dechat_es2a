import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList, Renderer2 } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { EventRegistry } from '@angular-mdc/web/common';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { MdcFloatingLabel } from '@angular-mdc/web/floating-label';
import { MdcLineRipple } from '@angular-mdc/web/line-ripple';
import { MdcNotchedOutline, MdcNotchedOutlineIdle } from '@angular-mdc/web/notched-outline';
import { MdcIcon } from '@angular-mdc/web/icon';
import { MdcTextFieldHelperText } from './helper-text';
export declare const MDC_TEXTFIELD_CONTROL_VALUE_ACCESSOR: any;
export declare class MdcTextField implements AfterViewInit, AfterContentInit, OnDestroy, ControlValueAccessor {
    protected _changeDetectorRef: ChangeDetectorRef;
    protected _renderer: Renderer2;
    elementRef: ElementRef;
    protected _ripple: MdcRipple;
    protected _registry: EventRegistry;
    /** Emits whenever the component is destroyed. */
    private _destroy;
    protected _uid: string;
    private _useCustomValidity;
    label: string;
    maxlength: number;
    placeholder: string;
    tabIndex: number;
    direction: 'ltr' | 'rtl';
    iconAction: EventEmitter<boolean>;
    change: EventEmitter<string>;
    blur: EventEmitter<string>;
    isHostClass: boolean;
    inputText: ElementRef;
    floatingLabel: MdcFloatingLabel;
    lineRipple: MdcLineRipple;
    icons: QueryList<MdcIcon>;
    outlined: MdcNotchedOutline;
    outlineIdle: MdcNotchedOutlineIdle;
    id: string;
    protected _id: string;
    /** Input type of the element. */
    type: string;
    protected _type: string;
    box: boolean;
    protected _box: boolean;
    outline: boolean;
    protected _outline: boolean;
    disabled: boolean;
    protected _disabled: boolean;
    required: boolean;
    private _required;
    focused: boolean;
    private _focused;
    fullwidth: boolean;
    private _fullwidth;
    dense: boolean;
    private _dense;
    helperText: MdcTextFieldHelperText;
    private _helperText;
    /** The input element's value. */
    value: any;
    protected _value: string;
    readonly valid: boolean;
    /** Whether the control is empty. */
    readonly empty: boolean;
    readonly classBox: string;
    readonly classDense: string;
    readonly classFullwidth: string;
    readonly classFocused: string;
    readonly classOutlined: string;
    private _mdcAdapter;
    /** Returns a map of all subcomponents to subfoundations. */
    private _getFoundationMap();
    private _mdcIconAdapter;
    private _foundation;
    private _iconFoundation;
    /** View -> model callback called when value changes */
    _onChange: (value: any) => void;
    /** View -> model callback called when text field has been touched */
    _onTouched: () => void;
    constructor(_changeDetectorRef: ChangeDetectorRef, _renderer: Renderer2, elementRef: ElementRef, _ripple: MdcRipple, _registry: EventRegistry);
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    shouldFloat(): boolean;
    registerOnChange(fn: (value: any) => any): void;
    registerOnTouched(fn: () => any): void;
    onInput(value: any): void;
    onFocus(): void;
    onBlur(): void;
    isDisabled(): boolean;
    isBadInput(): boolean;
    focus(): void;
    setValid(isValid: boolean): void;
    isTextarea(): boolean;
    /** Sets the text-field required or not. */
    setRequired(required: boolean): void;
    setValue(value: any, isUserInput?: boolean): void;
    /** Styles the text field as a box text field. */
    setBox(box: boolean): void;
    /** Styles the text field as an outlined text field. */
    setOutline(outline: boolean): void;
    /** Styles the text field as a fullwidth text field. */
    setFullwidth(fullwidth: boolean): void;
    setDense(dense: boolean): void;
    setDisabled(disabled: boolean): void;
    setHelperText(helperText: MdcTextFieldHelperText): void;
    /** True if the Text Field is required. */
    isRequired(): boolean;
    selectAll(): void;
    /** The value of the input Element. */
    getValue(): string;
    /** Deactives the Text Field's focus state. */
    deactivateFocus(): void;
    /** Activates the text field focus state. */
    activateFocus(): void;
    /** Sets the content of the helper text. */
    setHelperTextContent(content: string): void;
    setIconAriaLabel(label: string): void;
    setIconContent(content: string): void;
    updateIconState(): void;
    getLeadingIcon(): MdcIcon | undefined;
    getTrailingIcon(): MdcIcon | undefined;
    private _hasIcons();
    setDisabledState(isDisabled: boolean): void;
    hasClass(className: string): boolean;
    /** Retrieves the DOM element of the component host. */
    private _getHostElement();
    /** Make sure the input is a supported type. */
    protected _validateType(): void;
}
