import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, Renderer2 } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { EventRegistry } from '@angular-mdc/web/common';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { MdcFormFieldControl } from '@angular-mdc/web/form-field';
/** Change event object emitted by MdcCheckbox. */
export declare class MdcCheckboxChange {
    /** The source MdcCheckbox of the event. */
    source: MdcCheckbox;
    /** The new `checked` value of the checkbox. */
    checked: boolean;
    constructor(
        /** The source MdcCheckbox of the event. */
        source: MdcCheckbox, 
        /** The new `checked` value of the checkbox. */
        checked: boolean);
}
export interface MdcIndeterminateChange {
    source: MdcCheckbox;
    indeterminate: boolean;
}
export declare const MDC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any;
export declare class MdcCheckbox implements AfterViewInit, ControlValueAccessor, OnDestroy, MdcFormFieldControl<any> {
    private _changeDetectorRef;
    private _renderer;
    elementRef: ElementRef;
    ripple: MdcRipple;
    private _registry;
    readonly componentInstance: typeof MdcCheckbox;
    private _mdcAdapter;
    private _foundation;
    private _uniqueId;
    id: string;
    readonly inputId: string;
    name: string | null;
    checked: boolean;
    private _checked;
    disabled: boolean;
    private _disabled;
    indeterminate: boolean;
    private _indeterminate;
    indeterminateToChecked: boolean;
    private _indeterminateToChecked;
    tabIndex: number;
    ariaLabel: string;
    ariaLabelledby: string | null;
    readonly change: EventEmitter<MdcCheckboxChange>;
    readonly indeterminateChange: EventEmitter<MdcIndeterminateChange>;
    isHostClass: boolean;
    inputEl: ElementRef;
    /** View -> model callback called when value changes */
    _onChange: (value: any) => void;
    /** View -> model callback called when component has been touched */
    _onTouched: () => void;
    constructor(_changeDetectorRef: ChangeDetectorRef, _renderer: Renderer2, elementRef: ElementRef, ripple: MdcRipple, _registry: EventRegistry);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => any): void;
    registerOnTouched(fn: () => any): void;
    /** Focuses the checkbox. */
    focus(): void;
    toggle(): void;
    onChange(evt: Event): void;
    /**
       * Event handler for checkbox input element.
       * Toggles checked state if element is not disabled.
       * Do not toggle on (change) event since IE doesn't fire change event when
       * indeterminate checkbox is clicked.
       */
    _onInputClick(evt: Event): void;
    setIndeterminate(indeterminate: boolean): void;
    setIndeterminateToChecked(indeterminateToChecked: boolean): void;
    /** Sets the checkbox disabled state */
    setDisabled(disabled: boolean): void;
    isChecked(): boolean;
    isDisabled(): boolean;
    getValue(): any;
    setChecked(checked: any): void;
    setDisabledState(disabled: boolean): void;
    /** Retrieves the DOM element of the component host. */
    private _getHostElement();
}
