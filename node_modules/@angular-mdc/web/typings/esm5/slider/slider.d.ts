import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, Provider, Renderer2 } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { EventRegistry } from '@angular-mdc/web/common';
export declare const MDC_SLIDER_CONTROL_VALUE_ACCESSOR: Provider;
export declare class MdcSliderChange {
    source: MdcSlider;
    value: number;
    constructor(source: MdcSlider, value: number);
}
export declare class MdcSlider implements AfterViewInit, OnDestroy, ControlValueAccessor {
    private _changeDetectorRef;
    private _renderer;
    elementRef: ElementRef;
    private _registry;
    tabIndex: number;
    name: string | null;
    discrete: boolean;
    private _discrete;
    markers: boolean;
    private _markers;
    min: number;
    private _min;
    max: number;
    private _max;
    step: number;
    private _step;
    value: number;
    private _value;
    disabled: boolean;
    private _disabled;
    readonly change: EventEmitter<MdcSliderChange>;
    readonly input: EventEmitter<MdcSliderChange>;
    isHostClass: boolean;
    role: string;
    readonly classDiscrete: string;
    readonly classDisplayMarkers: string;
    thumbContainer: ElementRef;
    track: ElementRef;
    pinValueMarker: ElementRef;
    trackMarkerContainer: ElementRef;
    /** View -> model callback called when value changes */
    _onChange: (value: any) => void;
    /** View -> model callback called when radio has been touched */
    _onTouched: () => void;
    private _mdcAdapter;
    private _foundation;
    constructor(_changeDetectorRef: ChangeDetectorRef, _renderer: Renderer2, elementRef: ElementRef, _registry: EventRegistry);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => any): void;
    registerOnTouched(fn: () => any): void;
    setDiscrete(discrete: boolean): void;
    setMarkers(markers: boolean): void;
    setValue(value: number): void;
    getValue(): number;
    layout(): void;
    setMin(min: number): void;
    getMin(): number;
    setMax(max: number): void;
    getMax(): number;
    setStep(step: number): void;
    getStep(): number;
    setDisabled(disabled: boolean): void;
    setDisabledState(disabled: boolean): void;
    /** Retrieves the DOM element of the component host. */
    private _getHostElement();
}
