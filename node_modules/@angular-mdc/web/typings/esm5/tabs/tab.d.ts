import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { MdcRouter, EventRegistry } from '@angular-mdc/web/common';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { MdcIcon } from '@angular-mdc/web/icon';
export interface MdcTabSelected {
    tab: MdcTab;
}
export declare class MdcTabIconText {
    elementRef: ElementRef;
    isHostClass: boolean;
    constructor(elementRef: ElementRef);
}
export declare class MdcTab implements OnInit, OnDestroy {
    private _changeDetectorRef;
    private _renderer;
    elementRef: ElementRef;
    private _registry;
    ripple: MdcRipple;
    /** Emits whenever the component is destroyed. */
    private _destroy;
    /** Subscription to route changes. */
    private _routerChangeSubscription;
    active: boolean;
    protected _active: boolean;
    disabled: boolean;
    protected _disabled: boolean;
    /** Event emitted when the option is selected. */
    readonly selected: EventEmitter<MdcTabSelected>;
    isHostClass: boolean;
    role: string;
    readonly classIconText: boolean;
    readonly classActive: string;
    readonly classDisabled: string;
    tabIcon: MdcIcon;
    tabIconText: MdcTabIconText;
    tabRouter: MdcRouter;
    private _mdcAdapter;
    private _foundation;
    constructor(_changeDetectorRef: ChangeDetectorRef, _renderer: Renderer2, elementRef: ElementRef, _registry: EventRegistry, ripple: MdcRipple);
    ngOnInit(): void;
    ngOnDestroy(): void;
    isActive(): boolean;
    setActive(active: boolean): void;
    setDisabled(disabled: boolean): void;
    getComputedWidth(): number;
    getComputedLeft(): number;
    getPreventDefaultOnClick(): boolean;
    setPreventDefaultOnClick(preventDefaultOnClick: boolean): void;
    measureSelf(): void;
    /** Emits the tab selected event. */
    private _emitSelectedEvent();
    /** Retrieves the DOM element of the component host. */
    private _getHostElement();
}
