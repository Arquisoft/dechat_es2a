import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList, Renderer2 } from '@angular/core';
import { EventRegistry } from '@angular-mdc/web/common';
export declare type MdcMenuAnchorCorner = 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end';
export declare class MdcMenuChange {
    index: number;
    source: MdcMenuItem;
    constructor(index: number, source: MdcMenuItem);
}
export declare class MdcMenuAnchor {
    elementRef: ElementRef;
    isHostClass: boolean;
    constructor(elementRef: ElementRef);
}
export declare class MdcMenuDivider {
    elementRef: ElementRef;
    constructor(elementRef: ElementRef);
}
export declare class MdcMenuItems {
    elementRef: ElementRef;
    isHostClass: boolean;
    isSelectClass: boolean;
    role: string;
    ariaHidden: string;
    constructor(elementRef: ElementRef);
}
export declare class MdcMenuItem {
    private _renderer;
    elementRef: ElementRef;
    id: string;
    label: string;
    disabled: boolean;
    private _disabled;
    isHostClass: boolean;
    role: string;
    constructor(_renderer: Renderer2, elementRef: ElementRef);
    /** Used to set the `tabindex`. */
    _getTabIndex(): string;
}
export declare class MdcMenu implements AfterViewInit, OnDestroy {
    private _changeDetectorRef;
    private _renderer;
    elementRef: ElementRef;
    private _registry;
    private _uniqueId;
    private _previousFocus;
    id: string;
    anchor: MdcMenuAnchor;
    anchorCorner: string;
    private _anchorCorner;
    rememberSelection: boolean;
    private _rememberSelection;
    quickOpen: boolean;
    private _quickOpen;
    readonly cancel: EventEmitter<void>;
    readonly select: EventEmitter<MdcMenuChange>;
    isHostClass: boolean;
    tabindex: number;
    menuContainer: MdcMenuItems;
    options: QueryList<MdcMenuItem>;
    private _mdcAdapter;
    private _foundation;
    constructor(_changeDetectorRef: ChangeDetectorRef, _renderer: Renderer2, elementRef: ElementRef, _registry: EventRegistry);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    setRememberSelection(rememberSelection: boolean): void;
    setSelectedIndex(index: number): void;
    getSelectedIndex(): number;
    setAnchorCorner(value: string): void;
    setQuickOpen(quickOpen: boolean): void;
    setMaxHeight(height: string): void;
    isOpen(): boolean;
    open(): void;
    toggle(): void;
    close(): void;
    focus(): void;
    private _setStyle(anchorPoint, position?);
    private _parseAnchorCorner(value);
    /** Retrieves the DOM element of the component host. */
    private _getHostElement();
}
