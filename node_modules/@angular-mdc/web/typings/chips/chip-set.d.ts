import { AfterContentInit, ChangeDetectorRef, ElementRef, NgZone, OnDestroy, OnInit, QueryList, Renderer2 } from '@angular/core';
import { Observable } from 'rxjs';
import { EventRegistry } from '@angular-mdc/web/common';
import { MdcChip, MdcChipSelectionEvent } from './chip';
export declare class MdcChipSet implements AfterContentInit, OnInit, OnDestroy {
    private _changeDetectorRef;
    private _ngZone;
    private _renderer;
    elementRef: ElementRef;
    private _registry;
    /** Emits whenever the component is destroyed. */
    private _destroy;
    /**
    * Indicates that the chips in the set are choice chips, which allow a single selection from a set of options.
    */
    choice: boolean;
    private _choice;
    /**
    * Indicates that the chips in the set are filter chips, which allow multiple selection from a set of options.
    */
    filter: boolean;
    private _filter;
    /**
    * Indicates that the chips in the set are input chips, which enable user input by converting text into chips.
    */
    input: boolean;
    private _input;
    isHostClass: boolean;
    readonly classChoice: string;
    readonly classFilter: string;
    readonly classInput: string;
    chips: QueryList<MdcChip>;
    /** Combined stream of all of the chip change events. */
    readonly chipSelectionChanges: Observable<MdcChipSelectionEvent>;
    private _mdcAdapter;
    private _foundation;
    constructor(_changeDetectorRef: ChangeDetectorRef, _ngZone: NgZone, _renderer: Renderer2, elementRef: ElementRef, _registry: EventRegistry);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    ngOnInit(): void;
    setChoice(choice: boolean): void;
    setFilter(filter: boolean): void;
    setInput(input: boolean): void;
    /** Retrieves the DOM element of the component host. */
    private _getHostElement();
}
