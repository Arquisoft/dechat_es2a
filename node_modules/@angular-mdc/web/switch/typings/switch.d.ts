import { ChangeDetectorRef, ElementRef, EventEmitter, Provider, Renderer2 } from '@angular/core';
import { MdcFormFieldControl } from '@angular-mdc/web/form-field';
export declare const MDC_SWITCH_CONTROL_VALUE_ACCESSOR: Provider;
/** Change event object emitted by MdcSwitch. */
export declare class MdcSwitchChange {
    /** The source MdcSwitch of the event. */
    source: MdcSwitch;
    /** The new `checked` value of the switch. */
    checked: boolean;
    constructor(
        /** The source MdcSwitch of the event. */
        source: MdcSwitch, 
        /** The new `checked` value of the switch. */
        checked: boolean);
}
export declare class MdcSwitch implements MdcFormFieldControl<any> {
    private _changeDetectorRef;
    private _renderer;
    elementRef: ElementRef;
    private _uniqueId;
    readonly componentInstance: typeof MdcSwitch;
    id: string;
    name: string | null;
    checked: boolean;
    private _checked;
    disabled: boolean;
    private _disabled;
    tabIndex: number;
    readonly change: EventEmitter<MdcSwitchChange>;
    isHostClass: boolean;
    inputEl: ElementRef;
    /** View -> model callback called when value changes */
    _onChange: (value: any) => void;
    /** View -> model callback called when control has been touched */
    _onTouched: () => void;
    readonly inputId: string;
    readonly classDisabled: string;
    constructor(_changeDetectorRef: ChangeDetectorRef, _renderer: Renderer2, elementRef: ElementRef);
    onChange(evt: Event): void;
    onInputClick(evt: Event): void;
    onBlur(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    setDisabled(disabled: boolean): void;
    setChecked(checked: boolean): void;
    isChecked(): boolean;
    isDisabled(): boolean;
    setDisabledState(disabled: boolean): void;
    focus(): void;
}
