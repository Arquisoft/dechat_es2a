import { Injector, TemplateRef } from '@angular/core';
import { ComponentType } from '@angular-mdc/web/portal';
import { Overlay } from '@angular-mdc/web/overlay';
import { MdcDialogRef } from './dialog-ref';
import { MdcDialogConfig } from './dialog-config';
export declare class MdcDialog {
    private _overlay;
    private _injector;
    private _parentDialog;
    private _openedDialogRef;
    constructor(_overlay: Overlay, _injector: Injector, _parentDialog: MdcDialog);
    /**
       * Shows a dialog with a message and an optional action.
       * @param componentOrTemplateRef Type of the component to load into the dialog,
       *     or a TemplateRef to instantiate as the dialog content.
       * @param config Additional configuration options for the dialog.
       * @returns Reference to the newly-opened dialog.
       */
    open<T = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>, config?: MdcDialogConfig): MdcDialogRef<T>;
    close(): void;
    /**
       * Attaches the dialog container component to the overlay.
       */
    private _attachDialogContainer(overlay, config);
    /** Creates a new overlay. */
    private _createOverlay();
    /**
       * Attaches the user-provided component to the already-created MdcDialogContainer.
       * @param componentOrTemplateRef The type of component being loaded into the dialog,
       *     or a TemplateRef to instantiate as the content.
       * @param dialogContainer Reference to the wrapping MdcDialogContainer.
       * @param overlayRef Reference to the overlay in which the dialog resides.
       * @param config The dialog configuration.
       * @returns A promise resolving to the MdcDialogRef that should be returned to the user.
       */
    private _attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);
    /**
     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside
     * of a dialog to close itself and, optionally, to return a value.
     * @param config Config object that is used to construct the dialog.
     * @param dialogRef Reference to the dialog.
     * @param container Dialog container element that wraps all of the contents.
     * @returns The custom injector that can be used inside the dialog.
     */
    private _createInjector<T>(config, dialogRef, dialogContainer);
}
