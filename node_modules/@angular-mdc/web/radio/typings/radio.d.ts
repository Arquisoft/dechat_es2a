import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, Provider, Renderer2 } from '@angular/core';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { MdcFormFieldControl } from '@angular-mdc/web/form-field';
export declare const MDC_RADIO_CONTROL_VALUE_ACCESSOR: Provider;
/** Change event object emitted by MdcRadio. */
export declare class MdcRadioChange {
    /** The source MdcRadio of the event. */
    source: MdcRadio;
    /** The value of the radio button. */
    value: any;
    /** The new `checked` value of the radio button. */
    checked: boolean;
    constructor(
        /** The source MdcRadio of the event. */
        source: MdcRadio, 
        /** The value of the radio button. */
        value: any, 
        /** The new `checked` value of the radio button. */
        checked: boolean);
}
export declare class MdcRadio implements AfterViewInit, OnDestroy, MdcFormFieldControl<any> {
    private _changeDetectorRef;
    private _renderer;
    elementRef: ElementRef;
    ripple: MdcRipple;
    readonly componentInstance: typeof MdcRadio;
    private _uniqueId;
    id: string;
    name: string | null;
    tabIndex: number;
    ariaLabel: string;
    ariaLabelledby: string | null;
    readonly inputId: string;
    value: any;
    private _value;
    checked: boolean;
    private _checked;
    disabled: boolean;
    private _disabled;
    readonly change: EventEmitter<MdcRadioChange>;
    isHostClass: boolean;
    inputEl: ElementRef;
    private _mdcAdapter;
    private _foundation;
    /** View -> model callback called when value changes */
    _onChange: (value: any) => void;
    /** View -> model callback called when radio has been touched */
    _onTouched: () => void;
    constructor(_changeDetectorRef: ChangeDetectorRef, _renderer: Renderer2, elementRef: ElementRef, ripple: MdcRipple);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    onInputClick(evt: Event): void;
    onChange(evt: Event): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => any): void;
    registerOnTouched(fn: () => any): void;
    setDisabled(disabled: boolean): void;
    setDisabledState(disabled: boolean): void;
    setChecked(checked: boolean): void;
    getValue(): any;
    setValue(value: any): void;
    isChecked(): boolean;
    focus(): void;
    isDisabled(): boolean;
    /** Retrieves the DOM element of the component host. */
    private _getHostElement();
}
