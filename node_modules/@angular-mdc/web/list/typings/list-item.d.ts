import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, Renderer2 } from '@angular/core';
import { MdcRipple } from '@angular-mdc/web/ripple';
/** Change event that is fired whenever the selected state of an option changes. */
export declare class MdcListSelectionChange {
    source: MdcListItem;
    constructor(source: MdcListItem);
}
export declare class MdcListItemGraphic {
    elementRef: ElementRef;
    isHostClass: boolean;
    ariaHidden: string;
    constructor(elementRef: ElementRef);
}
export declare class MdcListItemMeta {
    elementRef: ElementRef;
    isHostClass: boolean;
    constructor(elementRef: ElementRef);
}
export declare class MdcListItemText {
    elementRef: ElementRef;
    isHostClass: boolean;
    constructor(elementRef: ElementRef);
}
export declare class MdcListItemSecondary {
    elementRef: ElementRef;
    isHostClass: boolean;
    constructor(elementRef: ElementRef);
}
export declare class MdcListItem implements OnDestroy {
    ripple: MdcRipple;
    private _changeDetector;
    private _renderer;
    elementRef: ElementRef;
    private _id;
    /** The unique ID of the option. */
    readonly id: string;
    isHostClass: boolean;
    role: string;
    readonly classSelected: string;
    readonly selectionChange: EventEmitter<MdcListSelectionChange>;
    listItemStart: MdcListItemGraphic;
    onclick(): void;
    /** Whether the option is selected. */
    selected: boolean;
    private _selected;
    /** Sets the selected state of the option. */
    setSelected(selected: boolean): void;
    constructor(ripple: MdcRipple, _changeDetector: ChangeDetectorRef, _renderer: Renderer2, elementRef: ElementRef);
    ngOnDestroy(): void;
    _getHostElement(): any;
    /** Emits a change event if the selected state of an option changed. */
    private _emitChangeEvent();
}
