/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, Component, Directive, ElementRef, HostBinding, Input, Renderer2, ViewEncapsulation, NgModule } from '@angular/core';
import { toBoolean } from '@angular-mdc/web/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MdcCardMediaContent = /** @class */ (function () {
    function MdcCardMediaContent(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    MdcCardMediaContent.decorators = [
        { type: Directive, args: [{
                    selector: 'mdc-card-media-content, [mdcCardMediaContent]',
                    exportAs: 'mdcCardMediaContent'
                },] },
    ];
    /** @nocollapse */
    MdcCardMediaContent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcCardMediaContent.propDecorators = {
        isHostClass: [{ type: HostBinding, args: ['class.mdc-card__media-content',] }]
    };
    return MdcCardMediaContent;
}());
var MdcCardMedia = /** @class */ (function () {
    function MdcCardMedia(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    Object.defineProperty(MdcCardMedia.prototype, "square", {
        get: /**
         * @return {?}
         */
        function () { return this._square; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setSquare(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcCardMedia.prototype, "wide", {
        get: /**
         * @return {?}
         */
        function () { return this._wide; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setWide(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcCardMedia.prototype, "classSquare", {
        get: /**
         * @return {?}
         */
        function () {
            return this.square ? 'mdc-card__media--square' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcCardMedia.prototype, "classWide", {
        get: /**
         * @return {?}
         */
        function () {
            return this._wide ? 'mdc-card__media--16-9' : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} wide
     * @return {?}
     */
    MdcCardMedia.prototype.setWide = /**
     * @param {?} wide
     * @return {?}
     */
    function (wide) {
        this._wide = wide;
    };
    /**
     * @param {?} square
     * @return {?}
     */
    MdcCardMedia.prototype.setSquare = /**
     * @param {?} square
     * @return {?}
     */
    function (square) {
        this._square = square;
    };
    MdcCardMedia.decorators = [
        { type: Component, args: [{selector: 'mdc-card-media, [mdcCardMedia]',
                    template: '<ng-content></ng-content>',
                    exportAs: 'mdcCardMedia',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    MdcCardMedia.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcCardMedia.propDecorators = {
        square: [{ type: Input }],
        wide: [{ type: Input }],
        isHostClass: [{ type: HostBinding, args: ['class.mdc-card__media',] }],
        classSquare: [{ type: HostBinding, args: ['class.mdc-card__media--square',] }],
        classWide: [{ type: HostBinding, args: ['class.mdc-card__media--16-9',] }]
    };
    return MdcCardMedia;
}());
var MdcCardPrimaryAction = /** @class */ (function () {
    function MdcCardPrimaryAction(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    MdcCardPrimaryAction.decorators = [
        { type: Directive, args: [{
                    selector: 'mdc-card-primary-action, [mdcCardPrimaryAction]',
                    exportAs: 'mdcCardPrimaryAction'
                },] },
    ];
    /** @nocollapse */
    MdcCardPrimaryAction.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcCardPrimaryAction.propDecorators = {
        isHostClass: [{ type: HostBinding, args: ['class.mdc-card__primary-action',] }]
    };
    return MdcCardPrimaryAction;
}());
var MdcCardActions = /** @class */ (function () {
    function MdcCardActions(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    Object.defineProperty(MdcCardActions.prototype, "fullBleed", {
        get: /**
         * @return {?}
         */
        function () { return this._fullBleed; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._fullBleed = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcCardActions.prototype, "buttons", {
        get: /**
         * @return {?}
         */
        function () { return this._buttons; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._buttons = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcCardActions.prototype, "icons", {
        get: /**
         * @return {?}
         */
        function () { return this._icons; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._icons = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcCardActions.prototype, "classFullBleed", {
        get: /**
         * @return {?}
         */
        function () {
            return this.fullBleed ? 'mdc-card__actions--full-bleed' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcCardActions.prototype, "classActionButtons", {
        get: /**
         * @return {?}
         */
        function () {
            return this.buttons ? 'mdc-card__action-buttons' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcCardActions.prototype, "classActionIcons", {
        get: /**
         * @return {?}
         */
        function () {
            return this.icons ? 'mdc-card__action-icons' : '';
        },
        enumerable: true,
        configurable: true
    });
    MdcCardActions.decorators = [
        { type: Component, args: [{selector: 'mdc-card-actions, [mdcCardActions]',
                    template: '<ng-content></ng-content>',
                    exportAs: 'mdcCardActions',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    MdcCardActions.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcCardActions.propDecorators = {
        fullBleed: [{ type: Input }],
        buttons: [{ type: Input }],
        icons: [{ type: Input }],
        isHostClass: [{ type: HostBinding, args: ['class.mdc-card__actions',] }],
        classFullBleed: [{ type: HostBinding, args: ['class.mdc-card__actions--full-bleed',] }],
        classActionButtons: [{ type: HostBinding, args: ['class.mdc-card__action-buttons',] }],
        classActionIcons: [{ type: HostBinding, args: ['class.mdc-card__action-icons',] }]
    };
    return MdcCardActions;
}());
var MdcCardActionButtons = /** @class */ (function () {
    function MdcCardActionButtons(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    MdcCardActionButtons.decorators = [
        { type: Directive, args: [{
                    selector: 'mdc-card-action-buttons, [mdcCardActionButtons]',
                    exportAs: 'mdcCardActionButtons'
                },] },
    ];
    /** @nocollapse */
    MdcCardActionButtons.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcCardActionButtons.propDecorators = {
        isHostClass: [{ type: HostBinding, args: ['class.mdc-card__action-buttons',] }]
    };
    return MdcCardActionButtons;
}());
var MdcCardActionIcons = /** @class */ (function () {
    function MdcCardActionIcons(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    MdcCardActionIcons.decorators = [
        { type: Directive, args: [{
                    selector: 'mdc-card-action-icons, [mdcCardActionIcons]',
                    exportAs: 'mdcCardActionIcons'
                },] },
    ];
    /** @nocollapse */
    MdcCardActionIcons.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcCardActionIcons.propDecorators = {
        isHostClass: [{ type: HostBinding, args: ['class.mdc-card__action-icons',] }]
    };
    return MdcCardActionIcons;
}());
var MdcCardAction = /** @class */ (function () {
    function MdcCardAction(_renderer, elementRef) {
        this._renderer = _renderer;
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    Object.defineProperty(MdcCardAction.prototype, "action", {
        get: /**
         * @return {?}
         */
        function () { return this._action; },
        set: /**
         * @param {?} action
         * @return {?}
         */
        function (action) {
            // If the directive is set without a name (updated programatically), then this setter will
            // trigger with an empty string and should not overwrite the programatically set value.
            if (!action) {
                return;
            }
            if (action === 'button') {
                this._renderer.addClass(this.elementRef.nativeElement, 'mdc-card__action--button');
            }
            else if (action === 'icon') {
                this._renderer.addClass(this.elementRef.nativeElement, 'mdc-card__action--icon');
                this._renderer.setAttribute(this.elementRef.nativeElement, 'tabIndex', '0');
                this._renderer.setAttribute(this.elementRef.nativeElement, 'role', 'button');
            }
            this._action = action;
        },
        enumerable: true,
        configurable: true
    });
    MdcCardAction.decorators = [
        { type: Directive, args: [{
                    selector: '[mdcCardAction]'
                },] },
    ];
    /** @nocollapse */
    MdcCardAction.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    MdcCardAction.propDecorators = {
        action: [{ type: Input, args: ['mdcCardAction',] }],
        isHostClass: [{ type: HostBinding, args: ['class.mdc-card__action',] }]
    };
    return MdcCardAction;
}());
var MdcCard = /** @class */ (function () {
    function MdcCard(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    Object.defineProperty(MdcCard.prototype, "outlined", {
        get: /**
         * @return {?}
         */
        function () { return this._outlined; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setOutlined(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcCard.prototype, "classOutlined", {
        get: /**
         * @return {?}
         */
        function () {
            return this.outlined ? 'mdc-card--outlined' : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} outlined
     * @return {?}
     */
    MdcCard.prototype.setOutlined = /**
     * @param {?} outlined
     * @return {?}
     */
    function (outlined) {
        this._outlined = outlined;
    };
    MdcCard.decorators = [
        { type: Component, args: [{selector: 'mdc-card, [mdc-card]',
                    template: '<ng-content></ng-content>',
                    exportAs: 'mdcCard',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    MdcCard.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcCard.propDecorators = {
        outlined: [{ type: Input }],
        isHostClass: [{ type: HostBinding, args: ['class.mdc-card',] }],
        classOutlined: [{ type: HostBinding, args: ['class.mdc-card--outlined',] }]
    };
    return MdcCard;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ CARD_DECLARATIONS = [
    MdcCard,
    MdcCardAction,
    MdcCardActionButtons,
    MdcCardActionIcons,
    MdcCardActions,
    MdcCardMedia,
    MdcCardMediaContent,
    MdcCardPrimaryAction
];
var MdcCardModule = /** @class */ (function () {
    function MdcCardModule() {
    }
    MdcCardModule.decorators = [
        { type: NgModule, args: [{
                    exports: CARD_DECLARATIONS,
                    declarations: CARD_DECLARATIONS,
                },] },
    ];
    return MdcCardModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MdcCardModule, MdcCardMediaContent, MdcCardMedia, MdcCardPrimaryAction, MdcCardActions, MdcCardActionButtons, MdcCardActionIcons, MdcCardAction, MdcCard };
