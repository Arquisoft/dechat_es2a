/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, HostBinding, Input, Output, Renderer2, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { MdcFormFieldControl } from '@angular-mdc/web/form-field';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ MDC_SWITCH_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return MdcSwitch; }),
    multi: true
};
/**
 * Change event object emitted by MdcSwitch.
 */
var  /**
 * Change event object emitted by MdcSwitch.
 */
MdcSwitchChange = /** @class */ (function () {
    function MdcSwitchChange(source, checked) {
        this.source = source;
        this.checked = checked;
    }
    return MdcSwitchChange;
}());
var /** @type {?} */ nextUniqueId = 0;
var MdcSwitch = /** @class */ (function () {
    function MdcSwitch(_changeDetectorRef, _renderer, elementRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._renderer = _renderer;
        this.elementRef = elementRef;
        this._uniqueId = "mdc-switch-" + ++nextUniqueId;
        this.componentInstance = MdcSwitch;
        this.id = this._uniqueId;
        this.name = null;
        this._checked = false;
        this._disabled = false;
        this.tabIndex = 0;
        this.change = new EventEmitter();
        this.isHostClass = true;
        /**
         * View -> model callback called when value changes
         */
        this._onChange = function () { };
        /**
         * View -> model callback called when control has been touched
         */
        this._onTouched = function () { };
    }
    Object.defineProperty(MdcSwitch.prototype, "checked", {
        get: /**
         * @return {?}
         */
        function () { return this._checked; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setChecked(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcSwitch.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () { return this._disabled; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setDisabledState(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcSwitch.prototype, "inputId", {
        get: /**
         * @return {?}
         */
        function () { return (this.id || this._uniqueId) + "-input"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcSwitch.prototype, "classDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this.disabled ? 'mdc-switch--disabled' : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} evt
     * @return {?}
     */
    MdcSwitch.prototype.onChange = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        evt.stopPropagation();
        this.setChecked(this.inputEl.nativeElement.checked);
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    MdcSwitch.prototype.onInputClick = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        evt.stopPropagation();
    };
    /**
     * @return {?}
     */
    MdcSwitch.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this._onTouched();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MdcSwitch.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.setChecked(value);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    MdcSwitch.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    MdcSwitch.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    MdcSwitch.prototype.setDisabled = /**
     * @param {?} disabled
     * @return {?}
     */
    function (disabled) {
        this.setDisabledState(disabled);
    };
    /**
     * @param {?} checked
     * @return {?}
     */
    MdcSwitch.prototype.setChecked = /**
     * @param {?} checked
     * @return {?}
     */
    function (checked) {
        if (this.disabled) {
            return;
        }
        var /** @type {?} */ previousValue = this.checked;
        this._checked = checked;
        if (previousValue !== null || undefined) {
            this._onChange(this.checked);
            this.change.emit(new MdcSwitchChange(this, this.checked));
        }
        this._changeDetectorRef.markForCheck();
    };
    /**
     * @return {?}
     */
    MdcSwitch.prototype.isChecked = /**
     * @return {?}
     */
    function () {
        return this.checked;
    };
    /**
     * @return {?}
     */
    MdcSwitch.prototype.isDisabled = /**
     * @return {?}
     */
    function () {
        return this.disabled;
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    MdcSwitch.prototype.setDisabledState = /**
     * @param {?} disabled
     * @return {?}
     */
    function (disabled) {
        this._disabled = disabled;
        this._changeDetectorRef.markForCheck();
    };
    /**
     * @return {?}
     */
    MdcSwitch.prototype.focus = /**
     * @return {?}
     */
    function () {
        this.inputEl.nativeElement.focus();
    };
    MdcSwitch.decorators = [
        { type: Component, args: [{selector: 'mdc-switch',
                    host: {
                        '[id]': 'id',
                    },
                    template: "\n  <input type=\"checkbox\"\n    #inputEl\n    role=\"switch\"\n    class=\"mdc-switch__native-control\"\n    [id]=\"inputId\"\n    [name]=\"name\"\n    [tabIndex]=\"tabIndex\"\n    [disabled]=\"disabled\"\n    [checked]=\"checked\"\n    (click)=\"onInputClick($event)\"\n    (blur)=\"onBlur()\"\n    (change)=\"onChange($event)\"/>\n  <div class=\"mdc-switch__background\">\n    <div class=\"mdc-switch__knob\"></div>\n  </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        MDC_SWITCH_CONTROL_VALUE_ACCESSOR,
                        [{ provide: MdcFormFieldControl, useExisting: MdcSwitch }],
                    ]
                },] },
    ];
    /** @nocollapse */
    MdcSwitch.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    MdcSwitch.propDecorators = {
        id: [{ type: Input }],
        name: [{ type: Input }],
        checked: [{ type: Input }],
        disabled: [{ type: Input }],
        tabIndex: [{ type: Input }],
        change: [{ type: Output }],
        isHostClass: [{ type: HostBinding, args: ['class.mdc-switch',] }],
        inputEl: [{ type: ViewChild, args: ['inputEl',] }],
        classDisabled: [{ type: HostBinding, args: ['class.mdc-switch--disabled',] }]
    };
    return MdcSwitch;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MdcSwitchModule = /** @class */ (function () {
    function MdcSwitchModule() {
    }
    MdcSwitchModule.decorators = [
        { type: NgModule, args: [{
                    exports: [MdcSwitch],
                    declarations: [MdcSwitch],
                },] },
    ];
    return MdcSwitchModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MdcSwitchModule, MDC_SWITCH_CONTROL_VALUE_ACCESSOR, MdcSwitchChange, MdcSwitch };
