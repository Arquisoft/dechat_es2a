/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, Renderer2, ViewEncapsulation, ContentChildren, NgZone, ViewChild, NgModule } from '@angular/core';
import { EventRegistry, toBoolean } from '@angular-mdc/web/common';
import { MdcRipple } from '@angular-mdc/web/ripple';
import { defer, merge, Subject } from 'rxjs';
import { startWith, switchMap, take, takeUntil } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Change event that is fired whenever the selected state of an option changes.
 */
var  /**
 * Change event that is fired whenever the selected state of an option changes.
 */
MdcListSelectionChange = /** @class */ (function () {
    function MdcListSelectionChange(source) {
        this.source = source;
    }
    return MdcListSelectionChange;
}());
var /** @type {?} */ uniqueIdCounter = 0;
var MdcListItemGraphic = /** @class */ (function () {
    function MdcListItemGraphic(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
        this.ariaHidden = 'true';
    }
    MdcListItemGraphic.decorators = [
        { type: Directive, args: [{
                    selector: '[mdcListItemGraphic], [mdc-list-item-graphic], mdc-list-item-graphic',
                    exportAs: 'mdcListItemGraphic',
                },] },
    ];
    /** @nocollapse */
    MdcListItemGraphic.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcListItemGraphic.propDecorators = {
        isHostClass: [{ type: HostBinding, args: ['class.mdc-list-item__graphic',] }],
        ariaHidden: [{ type: HostBinding, args: ['attr.aria-hidden',] }]
    };
    return MdcListItemGraphic;
}());
var MdcListItemMeta = /** @class */ (function () {
    function MdcListItemMeta(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    MdcListItemMeta.decorators = [
        { type: Directive, args: [{
                    selector: '[mdcListItemMeta], [mdc-list-item-meta], mdc-list-item-meta',
                    exportAs: 'mdcListItemMeta',
                },] },
    ];
    /** @nocollapse */
    MdcListItemMeta.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcListItemMeta.propDecorators = {
        isHostClass: [{ type: HostBinding, args: ['class.mdc-list-item__meta',] }]
    };
    return MdcListItemMeta;
}());
var MdcListItemText = /** @class */ (function () {
    function MdcListItemText(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    MdcListItemText.decorators = [
        { type: Directive, args: [{
                    selector: '[mdcListItemText], [mdc-list-item-text], mdc-list-item-text',
                    exportAs: 'mdcListItemText',
                },] },
    ];
    /** @nocollapse */
    MdcListItemText.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcListItemText.propDecorators = {
        isHostClass: [{ type: HostBinding, args: ['class.mdc-list-item__text',] }]
    };
    return MdcListItemText;
}());
var MdcListItemSecondary = /** @class */ (function () {
    function MdcListItemSecondary(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    MdcListItemSecondary.decorators = [
        { type: Directive, args: [{
                    selector: '[mdcListItemSecondary], [mdc-list-item-secondary], mdc-list-item-secondary',
                    exportAs: 'mdcListItemSecondary',
                },] },
    ];
    /** @nocollapse */
    MdcListItemSecondary.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcListItemSecondary.propDecorators = {
        isHostClass: [{ type: HostBinding, args: ['class.mdc-list-item__secondary-text',] }]
    };
    return MdcListItemSecondary;
}());
var MdcListItem = /** @class */ (function () {
    function MdcListItem(ripple, _changeDetector, _renderer, elementRef) {
        this.ripple = ripple;
        this._changeDetector = _changeDetector;
        this._renderer = _renderer;
        this.elementRef = elementRef;
        this._id = "mdc-list-item-" + uniqueIdCounter++;
        this.isHostClass = true;
        this.role = 'listitem';
        this.selectionChange = new EventEmitter();
    }
    Object.defineProperty(MdcListItem.prototype, "id", {
        /** The unique ID of the option. */
        get: /**
         * The unique ID of the option.
         * @return {?}
         */
        function () { return this._id; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcListItem.prototype, "classSelected", {
        get: /**
         * @return {?}
         */
        function () {
            return this.selected ? 'mdc-list-item--selected' : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MdcListItem.prototype.onclick = /**
     * @return {?}
     */
    function () {
        this.setSelected(!this.selected);
        this._emitChangeEvent();
    };
    Object.defineProperty(MdcListItem.prototype, "selected", {
        /** Whether the option is selected. */
        get: /**
         * Whether the option is selected.
         * @return {?}
         */
        function () { return this._selected; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setSelected(value);
        },
        enumerable: true,
        configurable: true
    });
    /** Sets the selected state of the option. */
    /**
     * Sets the selected state of the option.
     * @param {?} selected
     * @return {?}
     */
    MdcListItem.prototype.setSelected = /**
     * Sets the selected state of the option.
     * @param {?} selected
     * @return {?}
     */
    function (selected) {
        this._selected = selected;
        this._changeDetector.markForCheck();
    };
    /**
     * @return {?}
     */
    MdcListItem.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.ripple.destroy();
    };
    /**
     * @return {?}
     */
    MdcListItem.prototype._getHostElement = /**
     * @return {?}
     */
    function () {
        return this.elementRef.nativeElement;
    };
    /**
     * Emits a change event if the selected state of an option changed.
     * @return {?}
     */
    MdcListItem.prototype._emitChangeEvent = /**
     * Emits a change event if the selected state of an option changed.
     * @return {?}
     */
    function () {
        this.selectionChange.emit(new MdcListSelectionChange(this));
    };
    MdcListItem.decorators = [
        { type: Component, args: [{selector: 'mdc-list-item, a[mdc-list-item]',
                    exportAs: 'mdcListItem',
                    host: {
                        '[id]': 'id',
                    },
                    template: '<ng-content></ng-content>',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        EventRegistry,
                        MdcRipple
                    ]
                },] },
    ];
    /** @nocollapse */
    MdcListItem.ctorParameters = function () { return [
        { type: MdcRipple },
        { type: ChangeDetectorRef },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    MdcListItem.propDecorators = {
        isHostClass: [{ type: HostBinding, args: ['class.mdc-list-item',] }],
        role: [{ type: HostBinding, args: ['attr.role',] }],
        classSelected: [{ type: HostBinding, args: ['class.mdc-list-item--selected',] }],
        selectionChange: [{ type: Output }],
        listItemStart: [{ type: ContentChild, args: [MdcListItemGraphic,] }],
        onclick: [{ type: HostListener, args: ['click', ['$event'],] }],
        selected: [{ type: Input }]
    };
    return MdcListItem;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Change event that is being fired whenever the selected state of an option changes.
 */
var  /**
 * Change event that is being fired whenever the selected state of an option changes.
 */
MdcListItemChange = /** @class */ (function () {
    function MdcListItemChange(source, option) {
        this.source = source;
        this.option = option;
    }
    return MdcListItemChange;
}());
var MdcListGroup = /** @class */ (function () {
    function MdcListGroup(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    MdcListGroup.decorators = [
        { type: Directive, args: [{
                    selector: '[mdc-list-group], mdc-list-group',
                    exportAs: 'mdcListGroup',
                },] },
    ];
    /** @nocollapse */
    MdcListGroup.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcListGroup.propDecorators = {
        isHostClass: [{ type: HostBinding, args: ['class.mdc-list-group',] }]
    };
    return MdcListGroup;
}());
var MdcListGroupSubheader = /** @class */ (function () {
    function MdcListGroupSubheader(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    MdcListGroupSubheader.decorators = [
        { type: Directive, args: [{
                    selector: '[mdcListGroupSubheader], [mdc-list-group-subheader], mdc-list-group-subheader',
                    exportAs: 'mdcListGroupSubheader',
                },] },
    ];
    /** @nocollapse */
    MdcListGroupSubheader.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcListGroupSubheader.propDecorators = {
        isHostClass: [{ type: HostBinding, args: ['class.mdc-list-group__subheader',] }]
    };
    return MdcListGroupSubheader;
}());
var MdcListDivider = /** @class */ (function () {
    function MdcListDivider(_renderer) {
        this._renderer = _renderer;
        this._inset = false;
        this._padded = false;
    }
    Object.defineProperty(MdcListDivider.prototype, "inset", {
        get: /**
         * @return {?}
         */
        function () { return this._inset; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._inset = toBoolean(value);
            this._inset ? this._renderer.addClass(this.nativeEl.nativeElement, 'mdc-list-divider--inset')
                : this._renderer.removeClass(this.nativeEl.nativeElement, 'mdc-list-divider--inset');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcListDivider.prototype, "padded", {
        get: /**
         * @return {?}
         */
        function () { return this._padded; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._padded = toBoolean(value);
            this._padded ? this._renderer.addClass(this.nativeEl.nativeElement, 'mdc-list-divider--padded')
                : this._renderer.removeClass(this.nativeEl.nativeElement, 'mdc-list-divider--padded');
        },
        enumerable: true,
        configurable: true
    });
    MdcListDivider.decorators = [
        { type: Component, args: [{selector: '[mdc-list-divider], mdc-list-divider',
                    exportAs: 'mdcListDivider',
                    template: '<div #nativeEl class="mdc-list-divider" role="seperator"></div>',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    MdcListDivider.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    MdcListDivider.propDecorators = {
        inset: [{ type: Input }],
        padded: [{ type: Input }],
        nativeEl: [{ type: ViewChild, args: ['nativeEl',] }]
    };
    return MdcListDivider;
}());
var MdcList = /** @class */ (function () {
    function MdcList(_changeDetectorRef, _ngZone, elementRef) {
        var _this = this;
        this._changeDetectorRef = _changeDetectorRef;
        this._ngZone = _ngZone;
        this.elementRef = elementRef;
        /**
         * Emits whenever the component is destroyed.
         */
        this._destroy = new Subject();
        this.dense = false;
        this.lines = 1;
        this.border = false;
        this._interactive = true;
        this.isHostClass = true;
        this.role = 'list';
        /**
         * Emits a change event whenever the selected state of an option changes.
         */
        this.selectionChange = new EventEmitter();
        /**
         * Combined stream of all of the child options' change events.
         */
        this.optionSelectionChanges = defer(function () {
            if (_this.options) {
                return merge.apply(void 0, _this.options.map(function (option) { return option.selectionChange; }));
            }
            return _this._ngZone.onStable
                .asObservable()
                .pipe(take(1), switchMap(function () { return _this.optionSelectionChanges; }));
        });
    }
    Object.defineProperty(MdcList.prototype, "avatar", {
        get: /**
         * @return {?}
         */
        function () { return this._avatar; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._avatar = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcList.prototype, "interactive", {
        get: /**
         * @return {?}
         */
        function () { return this._interactive; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._interactive) {
                this.setInteractive(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcList.prototype, "multiple", {
        get: /**
         * @return {?}
         */
        function () { return this._multiple; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setMultiple(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcList.prototype, "classDense", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dense ? 'mdc-list--dense' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcList.prototype, "classLines", {
        get: /**
         * @return {?}
         */
        function () {
            return this.lines === 2 ? 'mdc-list--two-line' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcList.prototype, "classAvatar", {
        get: /**
         * @return {?}
         */
        function () {
            return this.avatar ? 'mdc-list--avatar-list' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcList.prototype, "classBorder", {
        get: /**
         * @return {?}
         */
        function () {
            return this.border ? 'ng-mdc-list--border' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcList.prototype, "classInteractive", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.interactive ? 'mdc-list--non-interactive' : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MdcList.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.optionSelectionChanges.pipe(takeUntil(merge(this._destroy, this.options.changes))).subscribe(function (event) {
            _this.selectionChange.emit(new MdcListItemChange(_this, event.source));
        });
        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(function () {
            Promise.resolve().then(function () {
                _this.setInteractive(_this.interactive);
                if (!_this.multiple) {
                    _this._resetOptions();
                }
            });
        });
    };
    /**
     * @return {?}
     */
    MdcList.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._destroy.next();
        this._destroy.complete();
    };
    /**
     * Drops current option subscriptions and IDs and resets from scratch.
     * @return {?}
     */
    MdcList.prototype._resetOptions = /**
     * Drops current option subscriptions and IDs and resets from scratch.
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ changedOrDestroyed = merge(this.options.changes, this._destroy);
        this.optionSelectionChanges
            .pipe(takeUntil(changedOrDestroyed)).subscribe(function (event) {
            if (!_this.multiple) {
                _this.clearSelected(event.source);
            }
        });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MdcList.prototype.setInteractive = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._interactive = toBoolean(value);
        if (!this.options) {
            return;
        }
        this.options.forEach(function (option) {
            if (value) {
                option.ripple.attachTo(option._getHostElement());
            }
            else {
                option.ripple.destroy();
            }
        });
    };
    /**
     * @param {?} multiple
     * @return {?}
     */
    MdcList.prototype.setMultiple = /**
     * @param {?} multiple
     * @return {?}
     */
    function (multiple) {
        this._multiple = multiple;
        this.clearSelected();
        this._changeDetectorRef.markForCheck();
    };
    /**
     * @param {?=} skip
     * @return {?}
     */
    MdcList.prototype.clearSelected = /**
     * @param {?=} skip
     * @return {?}
     */
    function (skip) {
        if (!this.options) {
            return;
        }
        this.options.forEach(function (option) {
            if (option !== skip) {
                option.setSelected(false);
            }
        });
    };
    MdcList.decorators = [
        { type: Component, args: [{selector: 'mdc-list',
                    exportAs: 'mdcList',
                    template: '<ng-content></ng-content>',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    MdcList.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgZone },
        { type: ElementRef }
    ]; };
    MdcList.propDecorators = {
        dense: [{ type: Input }],
        lines: [{ type: Input }],
        border: [{ type: Input }],
        avatar: [{ type: Input }],
        interactive: [{ type: Input }],
        multiple: [{ type: Input }],
        isHostClass: [{ type: HostBinding, args: ['class.mdc-list',] }],
        role: [{ type: HostBinding, args: ['attr.role',] }],
        classDense: [{ type: HostBinding, args: ['class.mdc-list--dense',] }],
        classLines: [{ type: HostBinding, args: ['class.mdc-list--two-line',] }],
        classAvatar: [{ type: HostBinding, args: ['class.mdc-list--avatar-list',] }],
        classBorder: [{ type: HostBinding, args: ['class.ng-mdc-list--border',] }],
        classInteractive: [{ type: HostBinding, args: ['class.mdc-list--non-interactive',] }],
        options: [{ type: ContentChildren, args: [MdcListItem, { descendants: true },] }],
        selectionChange: [{ type: Output }]
    };
    return MdcList;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ LIST_DECLARATIONS = [
    MdcList,
    MdcListDivider,
    MdcListGroup,
    MdcListGroupSubheader,
    MdcListItem,
    MdcListItemGraphic,
    MdcListItemMeta,
    MdcListItemSecondary,
    MdcListItemText,
];
var MdcListModule = /** @class */ (function () {
    function MdcListModule() {
    }
    MdcListModule.decorators = [
        { type: NgModule, args: [{
                    exports: LIST_DECLARATIONS,
                    declarations: LIST_DECLARATIONS,
                },] },
    ];
    return MdcListModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MdcListModule, MdcListSelectionChange, MdcListItemGraphic, MdcListItemMeta, MdcListItemText, MdcListItemSecondary, MdcListItem, MdcListItemChange, MdcListGroup, MdcListGroupSubheader, MdcListDivider, MdcList };
