/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, Renderer2, ViewEncapsulation, NgModule } from '@angular/core';
import { toBoolean } from '@angular-mdc/web/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MdcIcon = /** @class */ (function () {
    function MdcIcon(_changeDetectorRef, _renderer, elementRef, ariaHidden) {
        this._changeDetectorRef = _changeDetectorRef;
        this._renderer = _renderer;
        this.elementRef = elementRef;
        this.ariaHidden = ariaHidden;
        this._defaultFontSetClass = 'material-icons';
        if (!ariaHidden) {
            _renderer.setAttribute(elementRef.nativeElement, 'aria-hidden', 'true');
        }
    }
    Object.defineProperty(MdcIcon.prototype, "fontSet", {
        /** Font set that the icon is a part of. */
        get: /**
         * Font set that the icon is a part of.
         * @return {?}
         */
        function () { return this._fontSet; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._fontSet = this._cleanupFontValue(value);
            this._updateFontIconClasses();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcIcon.prototype, "fontIcon", {
        /** Name of an icon within a font set. */
        get: /**
         * Name of an icon within a font set.
         * @return {?}
         */
        function () { return this._fontIcon; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._fontIcon = value;
            this._updateFontIconClasses();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcIcon.prototype, "fontSize", {
        get: /**
         * @return {?}
         */
        function () { return this._fontSize; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setFontSize(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcIcon.prototype, "leading", {
        get: /**
         * @return {?}
         */
        function () { return this._leading; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._leading = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcIcon.prototype, "trailing", {
        get: /**
         * @return {?}
         */
        function () { return this._trailing; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._trailing = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcIcon.prototype, "clickable", {
        get: /**
         * @return {?}
         */
        function () { return this._clickable; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setClickable(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MdcIcon.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._updateFontIconClasses();
    };
    /**
     * @return {?}
     */
    MdcIcon.prototype._updateFontIconClasses = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ el = this._getHostElement();
        var /** @type {?} */ fontSetClass = this.fontSet ? this.fontSet : this._getDefaultFontSetClass();
        if (fontSetClass !== this._previousFontSetClass) {
            if (this._previousFontSetClass) {
                this._renderer.removeClass(el, this._previousFontSetClass);
            }
            if (fontSetClass) {
                this._renderer.addClass(el, fontSetClass);
            }
            this._previousFontSetClass = fontSetClass;
        }
        if (this.fontIcon !== this._previousFontIconClass) {
            if (this._previousFontIconClass) {
                this._renderer.removeClass(el, this._previousFontIconClass);
            }
            if (this.fontIcon) {
                for (var _i = 0, _a = this.fontIcon.split(' '); _i < _a.length; _i++) {
                    var iconClass = _a[_i];
                    this._renderer.addClass(el, iconClass);
                }
            }
            this._previousFontIconClass = this.fontIcon;
        }
        if (this.fontSize !== this._previousFontSize) {
            if (this._previousFontSize) {
                this._renderer.removeStyle(el, "font-size: " + this.fontSize + "px");
            }
            if (this.fontSize) {
                this._renderer.setStyle(el, 'font-size', this.fontSize + "px");
            }
            this._previousFontSize = this.fontSize;
        }
    };
    /**
     * @return {?}
     */
    MdcIcon.prototype._getDefaultFontSetClass = /**
     * @return {?}
     */
    function () {
        return this._defaultFontSetClass;
    };
    /**
     * Cleans up a value to be used as a fontIcon or fontSet.
     * Since the value ends up being assigned as a CSS class, we
     * have to trim the value and omit space-separated values.
     * @param {?} value
     * @return {?}
     */
    MdcIcon.prototype._cleanupFontValue = /**
     * Cleans up a value to be used as a fontIcon or fontSet.
     * Since the value ends up being assigned as a CSS class, we
     * have to trim the value and omit space-separated values.
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return typeof value === 'string' ? value.trim().split(' ')[0] : value;
    };
    /** Retrieves the DOM element of the component host. */
    /**
     * Retrieves the DOM element of the component host.
     * @return {?}
     */
    MdcIcon.prototype._getHostElement = /**
     * Retrieves the DOM element of the component host.
     * @return {?}
     */
    function () {
        return this.elementRef.nativeElement;
    };
    /**
     * @return {?}
     */
    MdcIcon.prototype.isLeading = /**
     * @return {?}
     */
    function () {
        return this.leading;
    };
    /**
     * @return {?}
     */
    MdcIcon.prototype.isTrailing = /**
     * @return {?}
     */
    function () {
        return this.trailing;
    };
    /**
     * @param {?} content
     * @return {?}
     */
    MdcIcon.prototype.setIcon = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        this.fontIcon ? this.fontIcon = content : this._getHostElement().textContent = content;
        this._changeDetectorRef.markForCheck();
    };
    /**
     * @return {?}
     */
    MdcIcon.prototype.getIcon = /**
     * @return {?}
     */
    function () {
        return this.fontIcon ? this.fontIcon : this._getHostElement().textContent;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MdcIcon.prototype.setFontSize = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._fontSize = value;
        this._updateFontIconClasses();
        this._changeDetectorRef.markForCheck();
    };
    /**
     * @param {?} clickable
     * @return {?}
     */
    MdcIcon.prototype.setClickable = /**
     * @param {?} clickable
     * @return {?}
     */
    function (clickable) {
        this._clickable = toBoolean(clickable);
        if (this.clickable) {
            this._renderer.setAttribute(this._getHostElement(), 'tabindex', '0');
            this._renderer.addClass(this._getHostElement(), 'ng-mdc-icon--clickable');
            this._renderer.setAttribute(this._getHostElement(), 'role', 'button');
        }
        else {
            this._renderer.setAttribute(this._getHostElement(), 'tabindex', '-1');
            this._renderer.removeClass(this._getHostElement(), 'ng-mdc-icon--clickable');
            this._renderer.removeAttribute(this._getHostElement(), 'role');
        }
    };
    MdcIcon.decorators = [
        { type: Component, args: [{selector: 'mdc-icon',
                    template: '<ng-content></ng-content>',
                    exportAs: 'mdcIcon',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    MdcIcon.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: Renderer2 },
        { type: ElementRef },
        { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] }
    ]; };
    MdcIcon.propDecorators = {
        fontSet: [{ type: Input }],
        fontIcon: [{ type: Input }],
        fontSize: [{ type: Input }],
        leading: [{ type: Input }],
        trailing: [{ type: Input }],
        clickable: [{ type: Input }]
    };
    return MdcIcon;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MdcIconModule = /** @class */ (function () {
    function MdcIconModule() {
    }
    MdcIconModule.decorators = [
        { type: NgModule, args: [{
                    exports: [MdcIcon],
                    declarations: [MdcIcon],
                },] },
    ];
    return MdcIconModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MdcIconModule, MdcIcon };
