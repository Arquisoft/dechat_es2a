/**
 * @license
 * Copyright (c) 2018 Dominic Carretto
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, HostBinding, Input, Renderer2, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';
import { startWith, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { isBrowser, toBoolean, EventRegistry } from '@angular-mdc/web/common';
import { MdcIcon } from '@angular-mdc/web/icon';

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @template A
 */
var MDCFoundation =
/*#__PURE__*/
function () {
  _createClass(MDCFoundation, null, [{
    key: "cssClasses",

    /** @return enum{cssClasses} */
    get: function get() {
      // Classes extending MDCFoundation should implement this method to return an object which exports every
      // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
      return {};
    }
    /** @return enum{strings} */

  }, {
    key: "strings",
    get: function get() {
      // Classes extending MDCFoundation should implement this method to return an object which exports all
      // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
      return {};
    }
    /** @return enum{numbers} */

  }, {
    key: "numbers",
    get: function get() {
      // Classes extending MDCFoundation should implement this method to return an object which exports all
      // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
      return {};
    }
    /** @return {!Object} */

  }, {
    key: "defaultAdapter",
    get: function get() {
      // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
      // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
      // validation.
      return {};
    }
    /**
     * @param {A=} adapter
     */

  }]);

  function MDCFoundation() {
    var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, MDCFoundation);

    /** @protected {!A} */
    this.adapter_ = adapter;
  }

  _createClass(MDCFoundation, [{
    key: "init",
    value: function init() {// Subclasses should override this method to perform initialization routines (registering events, etc.)
    }
  }, {
    key: "destroy",
    value: function destroy() {// Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
    }
  }]);

  return MDCFoundation;
}();

/**
 * @template F
 */

var MDCComponent =
/*#__PURE__*/
function () {
  _createClass(MDCComponent, null, [{
    key: "attachTo",

    /**
     * @param {!Element} root
     * @return {!MDCComponent}
     */
    value: function attachTo(root) {
      // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and
      // returns an instantiated component with its root set to that element. Also note that in the cases of
      // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized
      // from getDefaultFoundation().
      return new MDCComponent(root, new MDCFoundation());
    }
    /**
     * @param {!Element} root
     * @param {F=} foundation
     * @param {...?} args
     */

  }]);

  function MDCComponent(root) {
    var foundation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

    _classCallCheck(this, MDCComponent);

    /** @protected {!Element} */
    this.root_ = root;

    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    this.initialize.apply(this, args); // Note that we initialize foundation here and not within the constructor's default param so that
    // this.root_ is defined and can be used within the foundation class.

    /** @protected {!F} */

    this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;
    this.foundation_.init();
    this.initialSyncWithDOM();
  }

  _createClass(MDCComponent, [{
    key: "initialize",
    value: function initialize()
    /* ...args */
    {} // Subclasses can override this to do any additional setup work that would be considered part of a
    // "constructor". Essentially, it is a hook into the parent constructor before the foundation is
    // initialized. Any additional arguments besides root and foundation will be passed in here.

    /**
     * @return {!F} foundation
     */

  }, {
    key: "getDefaultFoundation",
    value: function getDefaultFoundation() {
      // Subclasses must override this method to return a properly configured foundation class for the
      // component.
      throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' + 'foundation class');
    }
  }, {
    key: "initialSyncWithDOM",
    value: function initialSyncWithDOM() {// Subclasses should override this method if they need to perform work to synchronize with a host DOM
      // object. An example of this would be a form control wrapper that needs to synchronize its internal state
      // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM
      // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.
    }
  }, {
    key: "destroy",
    value: function destroy() {
      // Subclasses may implement this method to release any resources / deregister any listeners they have
      // attached. An example of this might be deregistering a resize event from the window object.
      this.foundation_.destroy();
    }
    /**
     * Wrapper method to add an event listener to the component's root element. This is most useful when
     * listening for custom events.
     * @param {string} evtType
     * @param {!Function} handler
     */

  }, {
    key: "listen",
    value: function listen(evtType, handler) {
      this.root_.addEventListener(evtType, handler);
    }
    /**
     * Wrapper method to remove an event listener to the component's root element. This is most useful when
     * unlistening for custom events.
     * @param {string} evtType
     * @param {!Function} handler
     */

  }, {
    key: "unlisten",
    value: function unlisten(evtType, handler) {
      this.root_.removeEventListener(evtType, handler);
    }
    /**
     * Fires a cross-browser-compatible custom event from the component root of the given type,
     * with the given data.
     * @param {string} evtType
     * @param {!Object} evtData
     * @param {boolean=} shouldBubble
     */

  }, {
    key: "emit",
    value: function emit(evtType, evtData) {
      var shouldBubble = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var evt;

      if (typeof CustomEvent === 'function') {
        evt = new CustomEvent(evtType, {
          detail: evtData,
          bubbles: shouldBubble
        });
      } else {
        evt = document.createEvent('CustomEvent');
        evt.initCustomEvent(evtType, shouldBubble, false, evtData);
      }

      this.root_.dispatchEvent(evt);
    }
  }]);

  return MDCComponent;
}();

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var strings = {
  TILES_SELECTOR: '.mdc-grid-list__tiles',
  TILE_SELECTOR: '.mdc-grid-tile'
};

var MDCGridListFoundation =
/*#__PURE__*/
function (_MDCFoundation) {
  _inherits(MDCGridListFoundation, _MDCFoundation);

  _createClass(MDCGridListFoundation, null, [{
    key: "strings",
    get: function get() {
      return strings;
    }
  }, {
    key: "defaultAdapter",
    get: function get() {
      return {
        getOffsetWidth: function getOffsetWidth() {
          return (
            /* number */
            0
          );
        },
        getNumberOfTiles: function getNumberOfTiles() {
          return (
            /* number */
            0
          );
        },
        getOffsetWidthForTileAtIndex: function getOffsetWidthForTileAtIndex() {
          return (
            /* index: number */

            /* number */
            0
          );
        },
        setStyleForTilesElement: function setStyleForTilesElement()
        /* property: string, value: string */
        {},
        registerResizeHandler: function registerResizeHandler()
        /* handler: EventListener */
        {},
        deregisterResizeHandler: function deregisterResizeHandler()
        /* handler: EventListener */
        {}
      };
    }
  }]);

  function MDCGridListFoundation(adapter) {
    var _this;

    _classCallCheck(this, MDCGridListFoundation);

    _this = _possibleConstructorReturn(this, (MDCGridListFoundation.__proto__ || Object.getPrototypeOf(MDCGridListFoundation)).call(this, Object.assign(MDCGridListFoundation.defaultAdapter, adapter)));

    _this.resizeHandler_ = function () {
      return _this.alignCenter();
    };

    _this.resizeFrame_ = 0;
    return _this;
  }

  _createClass(MDCGridListFoundation, [{
    key: "init",
    value: function init() {
      this.alignCenter();
      this.adapter_.registerResizeHandler(this.resizeHandler_);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.adapter_.deregisterResizeHandler(this.resizeHandler_);
    }
  }, {
    key: "alignCenter",
    value: function alignCenter() {
      var _this2 = this;

      if (this.resizeFrame_ !== 0) {
        cancelAnimationFrame(this.resizeFrame_);
      }

      this.resizeFrame_ = requestAnimationFrame(function () {
        _this2.alignCenter_();

        _this2.resizeFrame_ = 0;
      });
    }
  }, {
    key: "alignCenter_",
    value: function alignCenter_() {
      if (this.adapter_.getNumberOfTiles() == 0) {
        return;
      }

      var gridWidth = this.adapter_.getOffsetWidth();
      var itemWidth = this.adapter_.getOffsetWidthForTileAtIndex(0);
      var tilesWidth = itemWidth * Math.floor(gridWidth / itemWidth);
      this.adapter_.setStyleForTilesElement('width', "".concat(tilesWidth, "px"));
    }
  }]);

  return MDCGridListFoundation;
}(MDCFoundation);

var MDCGridList =
/*#__PURE__*/
function (_MDCComponent) {
  _inherits(MDCGridList, _MDCComponent);

  function MDCGridList() {
    _classCallCheck(this, MDCGridList);

    return _possibleConstructorReturn(this, (MDCGridList.__proto__ || Object.getPrototypeOf(MDCGridList)).apply(this, arguments));
  }

  _createClass(MDCGridList, [{
    key: "getDefaultFoundation",
    value: function getDefaultFoundation() {
      var _this = this;

      return new MDCGridListFoundation({
        getOffsetWidth: function getOffsetWidth() {
          return _this.root_.offsetWidth;
        },
        getNumberOfTiles: function getNumberOfTiles() {
          return _this.root_.querySelectorAll(MDCGridListFoundation.strings.TILE_SELECTOR).length;
        },
        getOffsetWidthForTileAtIndex: function getOffsetWidthForTileAtIndex(index) {
          return _this.root_.querySelectorAll(MDCGridListFoundation.strings.TILE_SELECTOR)[index].offsetWidth;
        },
        setStyleForTilesElement: function setStyleForTilesElement(property, value) {
          _this.root_.querySelector(MDCGridListFoundation.strings.TILES_SELECTOR).style[property] = value;
        },
        registerResizeHandler: function registerResizeHandler(handler) {
          return window.addEventListener('resize', handler);
        },
        deregisterResizeHandler: function deregisterResizeHandler(handler) {
          return window.removeEventListener('resize', handler);
        }
      });
    }
  }], [{
    key: "attachTo",
    value: function attachTo(root) {
      return new MDCGridList(root);
    }
  }]);

  return MDCGridList;
}(MDCComponent);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ MDC_VALID_ASPECTS = [
    '1x1',
    '16x9',
    '2x3',
    '3x2',
    '4x3',
    '3x4'
];
var MdcGridTileTitle = /** @class */ (function () {
    function MdcGridTileTitle(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    MdcGridTileTitle.decorators = [
        { type: Directive, args: [{
                    selector: 'mdc-grid-tile-title, [mdcGridTileTitle]',
                    exportAs: 'mdcGridTileTitle'
                },] },
    ];
    /** @nocollapse */
    MdcGridTileTitle.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcGridTileTitle.propDecorators = {
        isHostClass: [{ type: HostBinding, args: ['class.mdc-grid-tile__title',] }]
    };
    return MdcGridTileTitle;
}());
var MdcGridTileSupportText = /** @class */ (function () {
    function MdcGridTileSupportText(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    MdcGridTileSupportText.decorators = [
        { type: Directive, args: [{
                    selector: 'mdc-grid-tile-support-text, [mdcGridTileSupportText]',
                    exportAs: 'mdcGridTileSupportText'
                },] },
    ];
    /** @nocollapse */
    MdcGridTileSupportText.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcGridTileSupportText.propDecorators = {
        isHostClass: [{ type: HostBinding, args: ['class.mdc-grid-tile__support-text',] }]
    };
    return MdcGridTileSupportText;
}());
var MdcGridTilePrimary = /** @class */ (function () {
    function MdcGridTilePrimary(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    MdcGridTilePrimary.decorators = [
        { type: Directive, args: [{
                    selector: 'mdc-grid-tile-primary, [mdcGridTilePrimary]',
                    exportAs: 'mdcGridTilePrimary'
                },] },
    ];
    /** @nocollapse */
    MdcGridTilePrimary.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcGridTilePrimary.propDecorators = {
        isHostClass: [{ type: HostBinding, args: ['class.mdc-grid-tile__primary',] }]
    };
    return MdcGridTilePrimary;
}());
var MdcGridTilePrimaryContent = /** @class */ (function () {
    function MdcGridTilePrimaryContent() {
        this.isHostClass = true;
    }
    MdcGridTilePrimaryContent.decorators = [
        { type: Directive, args: [{
                    selector: '[mdcGridTilePrimaryContent], mdc-grid-tile-primary-content',
                    exportAs: 'mdcGridTilePrimaryContent'
                },] },
    ];
    MdcGridTilePrimaryContent.propDecorators = {
        isHostClass: [{ type: HostBinding, args: ['class.mdc-grid-tile__primary-content',] }]
    };
    return MdcGridTilePrimaryContent;
}());
var MdcGridTileSecondary = /** @class */ (function () {
    function MdcGridTileSecondary(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    MdcGridTileSecondary.decorators = [
        { type: Directive, args: [{
                    selector: 'mdc-grid-tile-secondary, [mdcGridTileSecondary]',
                    exportAs: 'mdcGridTileSecondary'
                },] },
    ];
    /** @nocollapse */
    MdcGridTileSecondary.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcGridTileSecondary.propDecorators = {
        isHostClass: [{ type: HostBinding, args: ['class.mdc-grid-tile__secondary',] }]
    };
    return MdcGridTileSecondary;
}());
var MdcGridTile = /** @class */ (function () {
    function MdcGridTile(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    MdcGridTile.decorators = [
        { type: Directive, args: [{
                    selector: 'mdc-grid-tile, [mdcGridTile]',
                    exportAs: 'mdcGridTile'
                },] },
    ];
    /** @nocollapse */
    MdcGridTile.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcGridTile.propDecorators = {
        isHostClass: [{ type: HostBinding, args: ['class.mdc-grid-tile',] }]
    };
    return MdcGridTile;
}());
var MdcGridListTiles = /** @class */ (function () {
    function MdcGridListTiles(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    MdcGridListTiles.decorators = [
        { type: Directive, args: [{
                    selector: 'mdc-grid-list-tiles, [mdcGridListTiles]',
                    exportAs: 'mdcGridListTiles'
                },] },
    ];
    /** @nocollapse */
    MdcGridListTiles.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MdcGridListTiles.propDecorators = {
        isHostClass: [{ type: HostBinding, args: ['class.mdc-grid-list__tiles',] }]
    };
    return MdcGridListTiles;
}());
var MdcGridList = /** @class */ (function () {
    function MdcGridList(_changeDetectorRef, _renderer, elementRef, _registry) {
        var _this = this;
        this._changeDetectorRef = _changeDetectorRef;
        this._renderer = _renderer;
        this.elementRef = elementRef;
        this._registry = _registry;
        /**
         * Emits whenever the component is destroyed.
         */
        this._destroy = new Subject();
        this._header = false;
        this._aspect = '1x1';
        this.iconAlign = 'start';
        this.isHostClass = true;
        this._mdcAdapter = {
            getOffsetWidth: function () { return _this._getHostElement().offsetWidth; },
            getNumberOfTiles: function () { return _this.tiles.length; },
            getOffsetWidthForTileAtIndex: function (index) {
                var /** @type {?} */ tile = _this.getTile(index);
                return tile ? tile.elementRef.nativeElement.offsetWidth : 0;
            },
            setStyleForTilesElement: function (property, value) {
                return _this._renderer.setStyle(_this.gridListTiles.elementRef.nativeElement, property, value);
            },
            registerResizeHandler: function (handler) {
                if (isBrowser()) {
                    _this._registry.listen('resize', handler, window);
                }
            },
            deregisterResizeHandler: function (handler) {
                if (isBrowser()) {
                    _this._registry.unlisten('resize', handler);
                }
            }
        };
    }
    Object.defineProperty(MdcGridList.prototype, "narrow", {
        get: /**
         * @return {?}
         */
        function () { return this._narrow; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setNarrow(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcGridList.prototype, "header", {
        get: /**
         * @return {?}
         */
        function () { return this._header; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setHeader(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcGridList.prototype, "aspect", {
        get: /**
         * @return {?}
         */
        function () { return this._aspect; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._foundation && value !== this._aspect) {
                this.setAspect(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcGridList.prototype, "classGutter", {
        get: /**
         * @return {?}
         */
        function () {
            return this.narrow ? 'mdc-grid-list--tile-gutter-1' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcGridList.prototype, "classheader", {
        get: /**
         * @return {?}
         */
        function () {
            return this.header ? 'mdc-grid-list--header-caption' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcGridList.prototype, "classIconAlignStart", {
        get: /**
         * @return {?}
         */
        function () {
            return this.icons.length > 0 && this.iconAlign === 'start' ? 'mdc-grid-list--with-icon-align-start' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MdcGridList.prototype, "classIconAlignEnd", {
        get: /**
         * @return {?}
         */
        function () {
            return this.icons.length > 0 && this.iconAlign === 'end' ? 'mdc-grid-list--with-icon-align-end' : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MdcGridList.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this._foundation = new MDCGridListFoundation(this._mdcAdapter);
        this._foundation.init();
        this.setAspect(this.aspect);
    };
    /**
     * @return {?}
     */
    MdcGridList.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.captions.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(function () {
            Promise.resolve().then(function () {
                var /** @type {?} */ cssClass = 'mdc-grid-list--twoline-caption';
                _this.captions.length > 0 ? _this._renderer.addClass(_this._getHostElement(), cssClass)
                    : _this._renderer.removeClass(_this._getHostElement(), cssClass);
            });
        });
        this.icons.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(function () {
            Promise.resolve().then(function () {
                _this.icons.forEach(function (icon) {
                    _this._renderer.addClass(icon.elementRef.nativeElement, 'mdc-grid-tile__icon');
                });
            });
        });
    };
    /**
     * @return {?}
     */
    MdcGridList.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._destroy.next();
        this._destroy.complete();
        this._foundation.destroy();
    };
    /**
     * @param {?} narrow
     * @return {?}
     */
    MdcGridList.prototype.setNarrow = /**
     * @param {?} narrow
     * @return {?}
     */
    function (narrow) {
        this._narrow = toBoolean(narrow);
        this._changeDetectorRef.markForCheck();
    };
    /**
     * @param {?} header
     * @return {?}
     */
    MdcGridList.prototype.setHeader = /**
     * @param {?} header
     * @return {?}
     */
    function (header) {
        this._header = toBoolean(header);
        this._changeDetectorRef.markForCheck();
    };
    /**
     * @param {?} aspect
     * @return {?}
     */
    MdcGridList.prototype.setAspect = /**
     * @param {?} aspect
     * @return {?}
     */
    function (aspect) {
        if (this._isAspectValid(aspect)) {
            var /** @type {?} */ cssClass = 'mdc-grid-list--tile-aspect-';
            this._renderer.removeClass(this._getHostElement(), "" + cssClass + this.aspect);
            this._renderer.addClass(this._getHostElement(), "" + cssClass + aspect);
            this._aspect = aspect;
            this._changeDetectorRef.markForCheck();
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    MdcGridList.prototype.getTile = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.tiles.toArray()[index];
    };
    /**
     * @return {?}
     */
    MdcGridList.prototype.alignCenter = /**
     * @return {?}
     */
    function () {
        this._foundation.alignCenter();
    };
    /**
     * Retrieves the DOM element of the component host.
     * @return {?}
     */
    MdcGridList.prototype._getHostElement = /**
     * Retrieves the DOM element of the component host.
     * @return {?}
     */
    function () {
        return this.elementRef.nativeElement;
    };
    /** Make sure the aspect is supported. */
    /**
     * Make sure the aspect is supported.
     * @param {?} aspect
     * @return {?}
     */
    MdcGridList.prototype._isAspectValid = /**
     * Make sure the aspect is supported.
     * @param {?} aspect
     * @return {?}
     */
    function (aspect) {
        return MDC_VALID_ASPECTS.indexOf(aspect) > -1 ? true : false;
    };
    MdcGridList.decorators = [
        { type: Component, args: [{selector: '[mdc-grid-list], mdc-grid-list',
                    exportAs: 'mdcGridList',
                    template: "\n  <mdc-grid-list-tiles>\n    <ng-content></ng-content>\n  </mdc-grid-list-tiles>\n  ",
                    providers: [EventRegistry],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    MdcGridList.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: Renderer2 },
        { type: ElementRef },
        { type: EventRegistry }
    ]; };
    MdcGridList.propDecorators = {
        narrow: [{ type: Input }],
        header: [{ type: Input }],
        aspect: [{ type: Input }],
        iconAlign: [{ type: Input }],
        isHostClass: [{ type: HostBinding, args: ['class.mdc-grid-list',] }],
        tiles: [{ type: ContentChildren, args: [MdcGridTile,] }],
        captions: [{ type: ContentChildren, args: [MdcGridTileSupportText, { descendants: true },] }],
        icons: [{ type: ContentChildren, args: [MdcIcon, { descendants: true },] }],
        primaries: [{ type: ContentChildren, args: [MdcGridTilePrimary, { descendants: true },] }],
        gridListTiles: [{ type: ViewChild, args: [MdcGridListTiles,] }],
        classGutter: [{ type: HostBinding, args: ['class.mdc-grid-list--tile-gutter-1',] }],
        classheader: [{ type: HostBinding, args: ['class.mdc-grid-list--header-caption',] }],
        classIconAlignStart: [{ type: HostBinding, args: ['class.mdc-grid-list--with-icon-align-start',] }],
        classIconAlignEnd: [{ type: HostBinding, args: ['class.mdc-grid-list--with-icon-align-end',] }]
    };
    return MdcGridList;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ GRID_LIST_DECLARATIONS = [
    MdcGridList,
    MdcGridListTiles,
    MdcGridTile,
    MdcGridTilePrimary,
    MdcGridTilePrimaryContent,
    MdcGridTileSecondary,
    MdcGridTileSupportText,
    MdcGridTileTitle,
];
var MdcGridListModule = /** @class */ (function () {
    function MdcGridListModule() {
    }
    MdcGridListModule.decorators = [
        { type: NgModule, args: [{
                    exports: GRID_LIST_DECLARATIONS,
                    declarations: GRID_LIST_DECLARATIONS,
                },] },
    ];
    return MdcGridListModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MdcGridListModule, MdcGridTileTitle, MdcGridTileSupportText, MdcGridTilePrimary, MdcGridTilePrimaryContent, MdcGridTileSecondary, MdcGridTile, MdcGridListTiles, MdcGridList };
