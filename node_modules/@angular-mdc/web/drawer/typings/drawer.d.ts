import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, Renderer2 } from '@angular/core';
import { EventRegistry } from '@angular-mdc/web/common';
import { MdcDrawerNavigation } from './drawer.directives';
export declare const FOCUSABLE_ELEMENTS: string;
export declare type MdcDrawerType = 'persistent' | 'permanent' | 'temporary';
export declare class MdcDrawer implements OnDestroy {
    private _changeDetectorRef;
    renderer: Renderer2;
    elementRef: ElementRef;
    private _registry;
    fixed: boolean;
    private _fixed;
    drawer: string;
    private _drawer;
    fixedAdjustElement: any;
    private _fixedAdjustElement;
    closeOnClick: boolean;
    private readonly drawerElement;
    opened: EventEmitter<void>;
    closed: EventEmitter<void>;
    isHostClass: boolean;
    role: string;
    readonly classFixed: string;
    drawerNav: MdcDrawerNavigation;
    private _mdcAdapter;
    private _foundation;
    constructor(_changeDetectorRef: ChangeDetectorRef, renderer: Renderer2, elementRef: ElementRef, _registry: EventRegistry);
    ngOnDestroy(): void;
    setDrawer(drawer: string): void;
    setFixedAdjustElement(element: any): void;
    setFixed(fixed: boolean): void;
    isDrawerPermanent(): boolean;
    isDrawerTemporary(): boolean;
    isDrawerPersistent(): boolean;
    private _initializeFoundation(drawer);
    private _removeDrawerModifierClass();
    isOpen(): boolean;
    open(): void;
    close(): void;
    getDrawerWidth(): any;
    private _getHostElement();
}
